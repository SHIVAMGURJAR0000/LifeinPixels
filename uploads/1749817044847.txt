27/03/23, 9:11 am - Messages to yourself are end-to-end encrypted. No one else, not even WhatsApp, can read, listen to, or share them. Learn more.
27/03/23, 9:11 am - Shivam Gurjar: Hii
27/03/23, 6:11 pm - Shivam Gurjar: <Media omitted>
06/04/23, 7:04 pm - Shivam Gurjar: <Media omitted>
27/04/23, 7:17 pm - Shivam Gurjar: Hii
27/04/23, 10:18 pm - Shivam Gurjar: https://share.snapchat.com/m/EUfFtMZr?share_id=4kpHZJ4YQF8&locale=en-IN
28/04/23, 7:41 am - Shivam Gurjar: <Media omitted>
01/05/23, 10:36 am - Shivam Gurjar: Meeting day 1
06/05/23, 10:52 am - Shivam Gurjar: 22.7668180, 75.8883040
08/05/23, 8:08 pm - Shivam Gurjar: <Media omitted>
10/05/23, 11:41 am - Shivam Gurjar: <Media omitted>
10/05/23, 7:08 pm - Shivam Gurjar: https://drive.google.com/file/d/1DOV_xOeHxOgeYkCeUfIz5DdlWD9CufcV/view?usp=drivesdk
14/05/23, 7:35 pm - Shivam Gurjar: <Media omitted>
21/05/23, 11:57 am - Shivam Gurjar: <Media omitted>
22/05/23, 8:52 pm - Shivam Gurjar: <Media omitted>
22/05/23, 9:01 pm - Shivam Gurjar: <Media omitted>
31/05/23, 7:02 pm - Shivam Gurjar: People tell me you have changed
31/05/23, 7:04 pm - Shivam Gurjar: Like it's a bad thing. 
I am not the same person a year ago, a month ago, or even a day ago. I am always growing. I am always experiencing new things and learning more about the world so you are damn right I have changed.
31/05/23, 7:04 pm - Shivam Gurjar: And I am thankful for it
31/05/23, 7:05 pm - Shivam Gurjar: Because I don't wanna be the same person for the rest of my life.
31/05/23, 7:09 pm - Shivam Gurjar: Do not stop believing in what you feel about yourself
31/05/23, 7:09 pm - Shivam Gurjar: If you doubt yourself or if you do not trust yourself
31/05/23, 7:09 pm - Shivam Gurjar: Imagine how would anyone trust yourself
31/05/23, 7:12 pm - Shivam Gurjar: The day you start doubting yourself the war is finish there because you know yourself, you know your capability and you know how far you want to reach and you know how much hard work you gonna put
04/06/23, 7:54 pm - Shivam Gurjar: <Media omitted>
06/06/23, 6:43 pm - Shivam Gurjar: <Media omitted>
09/06/23, 8:08 pm - Shivam Gurjar: <Media omitted>
09/06/23, 8:08 pm - Shivam Gurjar: <Media omitted>
11/06/23, 9:13 am - Shivam Gurjar: <html>
<head>
<title>Hiiiiii</title>
<style>
p {
text-align: center;
font-size: 32px;
font-family: Candara, Oswald;
}
img {
display: block;
margin: 0 auto;
width: 25%;
}
</style>
</head>
<body>
<p>Can we hang out soon?</p>
<img src="https://media.tenor.com/zGm5acSjHCIAAAAM/cat-begging.gif">
</body>
<title>Botões</title>
<style>
#botao1 {
position: fixed;
top: 70%;
left: 55%;
transform: translate(-50%, -50%);
}
#botao2 {
position: absolute;
 left: 39%;
  top: 68%;
}
</style>
</head>
<body>
<button id="botao1">YES BBY!</button>
<button id="botao2">NO</button>
<script>
const button2 = document.getElementById('botao2');
let left = 40;
button2.addEventListener('mouseover', function() {
  if(left == 40){
    left = 44;
  }else{
    left = 40;
  }
  this.style.left = left + '%';
});

</script>
<script>document.getElementById('botao1').addEventListener('click', function() {
alert('YAYY THANK U 😍❤️');
});
</script>
</body>
</html>
11/06/23, 11:19 am - Shivam Gurjar: <Media omitted>
11/06/23, 11:19 am - Shivam Gurjar: <Media omitted>
11/06/23, 11:19 am - Shivam Gurjar: <Media omitted>
11/06/23, 11:19 am - Shivam Gurjar: <Media omitted>
11/06/23, 11:19 am - Shivam Gurjar: <Media omitted>
11/06/23, 11:19 am - Shivam Gurjar: <Media omitted>
12/06/23, 6:43 pm - Shivam Gurjar: <Media omitted>
12/06/23, 6:47 pm - Shivam Gurjar: <Media omitted>
15/06/23, 7:16 pm - Shivam Gurjar: <Media omitted>
18/06/23, 9:02 pm - Shivam Gurjar: <Media omitted>
02/07/23, 11:52 am - Shivam Gurjar: <Media omitted>
02/07/23, 11:54 am - Shivam Gurjar: <Media omitted>
02/07/23, 11:56 am - Shivam Gurjar: <Media omitted>
06/07/23, 8:23 am - Shivam Gurjar: <Media omitted>
06/07/23, 8:22 pm - Shivam Gurjar: https://www.rgpvnotes.in/btech/grading-system-old/notes/2018/12/english-for-communication-bt-103
09/07/23, 3:04 pm - Shivam Gurjar: <Media omitted>
16/07/23, 8:26 pm - Shivam Gurjar: <Media omitted>
29/07/23, 12:18 am - Shivam Gurjar: https://youtube.com/shorts/rvm_zqSFiPs?feature=share
02/08/23, 9:47 pm - Shivam Gurjar: <Media omitted>
08/08/23, 1:07 pm - Shivam Gurjar: <Media omitted>
08/08/23, 1:07 pm - Shivam Gurjar: <Media omitted>
08/08/23, 1:07 pm - Shivam Gurjar: <Media omitted>
08/08/23, 1:07 pm - Shivam Gurjar: <Media omitted>
18/08/23, 11:02 pm - Shivam Gurjar: You deleted this message
18/08/23, 11:29 pm - Shivam Gurjar: You deleted this message
18/08/23, 11:33 pm - Shivam Gurjar: You deleted this message
18/08/23, 11:34 pm - Shivam Gurjar: You deleted this message
19/08/23, 8:26 pm - Shivam Gurjar: <Media omitted>
23/08/23, 12:41 am - Shivam Gurjar: https://1drv.ms/w/s!Am3_eHcx9fkmgxDXGjLztcR3dFfv?e=RwSZGE
25/08/23, 3:57 pm - Shivam Gurjar: https://www.linkedin.com/in/shivam-gurjar-ab51b124a/
28/08/23, 11:39 pm - Shivam Gurjar: 500178791@tcit.com
29/08/23, 9:46 am - Shivam Gurjar: P - mrrobot@0786
04/09/23, 7:48 am - Shivam Gurjar: #include<stdio.h>
#include<conio.h>
int main()
{
    int i, arr[10], search, first, last, middle;
    printf("Enter 10 elements (in ascending order): ");
    for(i=0; i<10; i++)
        scanf("%d", &arr[i]);
    printf("\nEnter element to be search: ");
    scanf("%d", &search);
    first = 0;
    last = 9;
    middle = (first+last)/2;
    while(first <= last)
    {
        if(arr[middle]<search)
            first = middle+1;
        else if(arr[middle]==search)
        {
            printf("\nThe number, %d found at Position %d", search, middle+1);
            break;
        }
        else
            last = middle-1;
        middle = (first+last)/2;
    }
    if(first>last)
        printf("\nThe number, %d is not found in given Array", search);
    getch();
    return 0;
}
04/09/23, 8:09 am - Shivam Gurjar: ___
04/09/23, 8:09 am - Shivam Gurjar: #include <stdio.h>

int main() {
    int arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int target = 6;

    int left = 0, right = sizeof(arr) / sizeof(arr[0]) - 1;
    int found = 0;

    while (left <= right) {
        int mid = (left + right) / 2;

        if (arr[mid] == target) {
            printf("Target %d found at index %d\n", target, mid);
            found = 1;
            break;
        } else if (arr[mid] < target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }

    if (!found) {
        printf("Target not found in the list\n");
    }

    return 0;
}
04/09/23, 10:24 am - Shivam Gurjar: include <stdio.h>
 
int main()
{
    int arr[100] = { 0 };
    int i, x, pos, n = 10;
 
    // initial array of size 10
    for (i = 0; i < 10; i++)
        arr[i] = i + 1;
 
    // print the original array
    for (i = 0; i < n; i++)
        printf("%d ", arr[i]);
    printf("\n");
 
    // element to be inserted
    x = 50;
 
    // position at which element
    // is to be inserted
    pos = 5;
 
    // increase the size by 1
    n++;
 
    // shift elements forward
    for (i = n - 1; i >= pos; i--)
        arr[i] = arr[i - 1];
 
    // insert x at pos
    arr[pos - 1] = x;
 
    // print the updated array
    for (i = 0; i < n; i++)
        printf("%d ", arr[i]);
    printf("\n");
 
    return 0;
}
Output
1 2 3 4 5 6 7 8 9 10 
1 2 3 4 50 5 6 7 8 9 10
04/09/23, 11:26 am - Shivam Gurjar: -------
04/09/23, 11:26 am - Shivam Gurjar: include <stdio.h>  
#include <conio.h>  
  
int main ()  
{  
    // declaration of the int type variable  
    int arr[50];  
    int pos, i, num; // declare int type variable  
    printf (" \n Enter the number of elements in an array: \n ");  
    scanf (" %d", &num);  
      
    printf (" \n Enter %d elements in array: \n ", num);  
      
    // use for loop to insert elements one by one in array  
    for (i = 0; i < num; i++ )  
    {   printf (" arr[%d] = ", i);  
        scanf (" %d", &arr[i]);  
    }  
      
    // enter the position of the element to be deleted  
    printf( " Define the position of the array element where you want to delete: \n ");  
    scanf (" %d", &pos);  
      
    // check whether the deletion is possible or not  
    if (pos >= num+1)  
    {  
        printf (" \n Deletion is not possible in the array.");  
    }  
    else  
    {  
        // use for loop to delete the element and update the index  
        for (i = pos - 1; i < num -1; i++)  
        {  
            arr[i] = arr[i+1]; // assign arr[i+1] to arr[i]  
        }  
          
        printf (" \n The resultant array is: \n");  
          
        // display the final array  
        for (i = 0; i< num - 1; i++)  
        {  
            printf (" arr[%d] = ", i);  
            printf (" %d \n", arr[i]);  
        }  
    }  
    return 0;  
}
14/09/23, 9:09 am - Shivam Gurjar: <Media omitted>
14/09/23, 9:11 am - Shivam Gurjar: <Media omitted>
19/09/23, 12:33 pm - Shivam Gurjar: <Media omitted>
21/09/23, 9:01 pm - Shivam Gurjar: <Media omitted>
21/09/23, 10:08 pm - Shivam Gurjar: Encapsulation is to hide the variables or something inside a class, preventing unauthorized parties to use. So the public methods like getter and setter access it and the other classes call these methods for accessing

Abstraction involves the facility to define objects that represent abstract "actors" that can perform work, report on and change their state, and "communicate" with other objects in the system.

Consider the below real time example:

Encapsulation: As a driver you know how to start the car by pressing the start button and internal details of the starting operations are hidden from you. So the entire starting process is hidden from you otherwise we can tell starting operation is encapsulated from you.

OR

The driving wheel is encapsulated the process of rotating the wheel from you.

Abstraction:

Before mentioning anything about abstraction, we can take three different users here (I am calling them as entity)

1) You 2) Local Mechanic 3) Expert

You Entity: Since you know only to start the car by pressing a button and all other operations behind the scene are abstracted from you.

Local Mechanic Entity: Our local mechanic knows some of the implementation of starting the car, i.e. he can open car's bonnet and check the battery cable or chock etc. So in short Local Mechanic Entity knows some of the implementations of the car.

Expert Entity: Since our expert (Designer of the car) mechanic knows all the operations of our car, he can repair it very quickly. So in short Expert Entity knows all the implementations of the car.

The car's operation is completely abstracted from you and it is partially implemented to Local Mechanic Entity and fully implemented to Expert Entity. So you are an abstract class having only abstract methods, Local Mechanic Entity has extended You(Since he is also an ordinary user) and he implemented some of the methods and last our expert Entity extending Local Mechanic and implementing all the methods.
21/09/23, 10:39 pm - Shivam Gurjar: destructor prop
21/09/23, 10:39 pm - Shivam Gurjar: The following are the main properties of Destructor:

The destructor function is automatically invoked when the objects are destroyed.
It cannot be declared static or const.
The destructor does not have arguments.
It has no return type not even void.
An object of a class with a Destructor cannot become a member of the union.
A destructor should be declared in the public section of the class.
The programmer cannot access the address of the destructor.
21/09/23, 10:39 pm - Shivam Gurjar: destructor function is called automatically when the object goes out of scope:

the function ends 
the program ends 
a block containing local variables ends 
a delete operator is called
21/09/23, 10:41 pm - Shivam Gurjar: example
21/09/23, 10:41 pm - Shivam Gurjar: #include <iostream>

class MyResource {
public:
    MyResource() {
        std::cout << "Resource acquired." << std::endl;
    }

    ~MyResource() {
        std::cout << "Resource released." << std::endl;
    }
};

int main() {
    MyResource resource; // Object created, constructor called

    // Object goes out of scope at the end of main
    // Destructor is called automatically
    return 0;
}
26/09/23, 10:56 pm - Shivam Gurjar: https://fredpastrana.myportfolio.com/
03/10/23, 10:09 am - Shivam Gurjar: 192.168.112.80
03/10/23, 2:02 pm - Shivam Gurjar: // Quick sort in C

#include <stdio.h>

// function to swap elements
void swap(int *a, int *b) {
  int t = *a;
  *a = *b;
  *b = t;
}

// function to find the partition position
int partition(int array[], int low, int high) {
  
  // select the rightmost element as pivot
  int pivot = array[high];
  
  // pointer for greater element
  int i = (low - 1);

  // traverse each element of the array
  // compare them with the pivot
  for (int j = low; j < high; j++) {
    if (array[j] <= pivot) {
        
      // if element smaller than pivot is found
      // swap it with the greater element pointed by i
      i++;
      
      // swap element at i with element at j
      swap(&array[i], &array[j]);
    }
  }

  // swap the pivot element with the greater element at i
  swap(&array[i + 1], &array[high]);
  
  // return the partition point
  return (i + 1);
}

void quickSort(int array[], int low, int high) {
  if (low < high) {
    
    // find the pivot element such that
    // elements smaller than pivot are on left of pivot
    // elements greater than pivot are on right of pivot
    int pi = partition(array, low, high);
    
    // recursive call on the left of pivot
    quickSort(array, low, pi - 1);
    
    // recursive call on the right of pivot
    quickSort(array, pi + 1, high);
  }
}

// function to print array elements
void printArray(int array[], int size) {
  for (int i = 0; i < size; ++i) {
    printf("%d  ", array[i]);
  }
  printf("\n");
}

// main function
int main() {
  int data[] = {8, 7, 2, 1, 0, 9, 6};
  
  int n = sizeof(data) / sizeof(data[0]);
  
  printf("Unsorted Array\n");
  printArray(data, n);
  
  // perform quicksort on data
  quickSort(data, 0, n - 1);
  
  printf("Sorted array in ascending order: \n");
  printArray(data, n);
}
09/10/23, 9:52 am - Shivam Gurjar: #include <stdio.h>

#include <stdlib.h>

#define SIZE 4

int top = -1, inp_array[SIZE];
void push();
void pop();
void show();

int main()
{
    int choice;

    while (1)
    {
        printf("\nPerform operations on the stack:");
        printf("\n1.Push the element\n2.Pop the element\n3.Show\n4.End");
        printf("\n\nEnter the choice: ");
        scanf("%d", &choice);

        switch (choice)
        {
        case 1:
            push();
            break;
        case 2:
            pop();
            break;
        case 3:
            show();
            break;
        case 4:
            exit(0);

        default:
            printf("\nInvalid choice!!");
        }
    }
}

void push()
{
    int x;

    if (top == SIZE - 1)
    {
        printf("\nOverflow!!");
    }
    else
    {
        printf("\nEnter the element to be added onto the stack: ");
        scanf("%d", &x);
        top = top + 1;
        inp_array[top] = x;
    }
}

void pop()
{
    if (top == -1)
    {
        printf("\nUnderflow!!");
    }
    else
    {
        printf("\nPopped element: %d", inp_array[top]);
        top = top - 1;
    }
}

void show()
{
    if (top == -1)
    {
        printf("\nUnderflow!!");
    }
    else
    {
        printf("\nElements present in the stack: \n");
        for (int i = top; i >= 0; --i)
            printf("%d\n", inp_array[i]);
    }
}
09/10/23, 3:47 pm - Shivam Gurjar: Pattern print box size
09/10/23, 3:47 pm - Shivam Gurjar: Then triangles by using the same
09/10/23, 3:47 pm - Shivam Gurjar: Q2
09/10/23, 3:48 pm - Shivam Gurjar: Make a heart shape using for loop
09/10/23, 3:48 pm - Shivam Gurjar: Done at 11 wed at 1100 otime
10/10/23, 1:40 pm - Shivam Gurjar: number = float(input("Enter a number: "))
initial_guess = 1.0
max_iterations = 10  # You can adjust this to your desired number of iterations

guess = initial_guess

for iteration in range(1, max_iterations + 1):
    next_guess = 0.5 * (guess + number / guess)
    
    guess = next_guess

print(f"After {max_iterations} iterations, the approximate square root of {number} is {guess}")
11/10/23, 9:45 pm - Shivam Gurjar: <Media omitted>
12/10/23, 7:40 am - Shivam Gurjar: <Media omitted>
14/10/23, 10:17 pm - Shivam Gurjar: <Media omitted>
30/10/23, 2:13 pm - Shivam Gurjar: // Queue implementation in C

#include <stdio.h>
#define SIZE 5

void enQueue(int);
void deQueue();
void display();

int items[SIZE], front = -1, rear = -1;

int main() {
  //deQueue is not possible on empty queue
  deQueue();

  //enQueue 5 elements
  enQueue(1);
  enQueue(2);
  enQueue(3);
  enQueue(4);
  enQueue(5);

  // 6th element can't be added to because the queue is full
  enQueue(6);

  display();

  //deQueue removes element entered first i.e. 1
  deQueue();

  //Now we have just 4 elements
  display();

  return 0;
}

void enQueue(int value) {
  if (rear == SIZE - 1)
    printf("\nQueue is Full!!");
  else {
    if (front == -1)
      front = 0;
    rear++;
    items[rear] = value;
    printf("\nInserted -> %d", value);
  }
}

void deQueue() {
  if (front == -1)
    printf("\nQueue is Empty!!");
  else {
    printf("\nDeleted : %d", items[front]);
    front++;
    if (front > rear)
      front = rear = -1;
  }
}

// Function to print the queue
void display() {
  if (rear == -1)
    printf("\nQueue is Empty!!!");
  else {
    int i;
    printf("\nQueue elements are:\n");
    for (i = front; i <= rear; i++)
      printf("%d  ", items[i]);
  }
  printf("\n");
}
30/10/23, 2:19 pm - Shivam Gurjar: #include<iostream>
#include<stdlib.h>
#define max 5
using namespace std ;
int a [max];
int front =-1;
int rear =-1;
 
 void queinsert(int x){
    if (rear==max-1 ){
        cout<< "insertion is imposible because is queue allready full";
    }
    else {
        rear ++;
    a[rear]=x;
    cout<<"insertion is successfull";
    }
    if ( front==-1){
        front++;
    }
 }
 void quedealit(){
    if ( rear==-1){
        cout<<"dealition is imposible beacuse queue is allready empty";
    }
    else {cout<< "dealition is successfull ="<<a[front];
        front++; }
        if (rear==front){
            front=rear=-1;
        }
 }  
 void traverse(){
    if(front==rear==-1){cout<<"your is allready is empty\n";}
    else{for(int i = front ; i<=rear; i++){
cout<<i+1<<" element in queue ="<<a[i]<<endl;
    }}
 }
int main(){
do{
   // int top=-1;
//cout<<"jatin\n";
cout<<"\n\n\n enter 1 for insertion \n";
cout<<" enter 2 for dealition\n";
cout<<" enter 3 for traversing\n";
cout<<" enter 4 for exit\n";
int n;
cout<<"enter your choice =";
cin>>n;
switch(n){
    case 1:{ cout<<" enter the element what you insert =";
  int x ;
  cin>>x;     
  queinsert(x);break;}

  case 2:{ quedealit();break;}
  case 3:{traverse();break;}
  case 4: { cout<<" you are exit from our programe ";exit(0);}
  default: { cout<<"etner corect choise\n";}
  }
}while(1);
return 0;
}
30/10/23, 2:27 pm - Shivam Gurjar: #include <stdio.h>
#include <stdlib.h>

const int MAX_SIZE = 20;
int a[MAX_SIZE];
int front = -1;
int rear = -1;

void queinsert(int x) {
    if (rear == MAX_SIZE - 1) {
        printf("Insertion is impossible because the queue is already full.\n");
    } else {
        rear++;
        a[rear] = x;
        printf("Insertion is successful.\n");
    }
    if (front == -1) {
        front++;
    }
}

void quedealit() {
    if (rear == -1) {
        printf("Deletion is impossible because the queue is already empty.\n");
    } else {
        printf("Deletion is successful = %d\n", a[front]);
        front++;
    }
    if (rear == front) {
        front = rear = -1;
    }
}

void traverse() {
    if (front == rear == -1) {
        printf("The queue is already empty.\n");
    } else {
        for (int i = front; i <= rear; i++) {
            printf("%d element in queue = %d\n", i + 1, a[i]);
        }
    }
}

int main() {
    do {
        printf("\n\n\nEnter 1 for insertion\n");
        printf("Enter 2 for deletion\n");
        printf("Enter 3 for traversing\n");
        printf("Enter 4 to exit\n");
        int n;
        printf("Enter your choice: ");
        scanf("%d", &n);
        switch (n) {
            case 1: {
                printf("Enter the element you want to insert: ");
                int x;
                scanf("%d", &x);
                queinsert(x);
                break;
            }

            case 2: {
                quedealit();
                break;
            }
            case 3: {
                traverse();
                break;
            }
            case 4: {
                printf("Exiting the program.\n");
                exit(0);
            }
            default: {
                printf("Enter a valid choice.\n");
            }
        }
    } while (1);
    return 0;
}
30/10/23, 3:04 pm - Shivam Gurjar: #include <stdio.h>


const int n = 20;
int a[n];
int front = -1;
int rear = -1;

void queinsert(int x) {
    if (rear == n - 1) {
        printf("Insertion is impossible because the queue is already full.\n");
    } else {
        rear++;
        a[rear] = x;
        printf("Insertion is successful.\n");
    }
    if (front == -1) {
        front++;
    }
}

void quedealit() {
    if (rear == -1) {
        printf("Deletion is impossible because the queue is already empty.\n");
    } else {
        printf("Deletion is successful = %d\n", a[front]);
        front++;
    }
    if (rear == front) {
        front = rear = -1;
    }
}

void traverse() {
    if (front == rear == -1) {
        printf("The queue is already empty.\n");
    } else {
        for (int i = front; i <= rear; i++) {
            printf("%d element in queue = %d\n", i + 1, a[i]);
        }
    }
}

int main() {
    do {
        printf("\n\n\nEnter 1  insertion ke liye\n");
        printf("Enter 2 delet ke liye\n");
        printf("Enter 3 dekne ke liye\n");
        printf("Enter 4 to exit\n");
        int n;
        printf("Enter your choice: ");
        scanf("%d", &n);
        switch (n) {
            case 1: {
                printf("Enter the element you want to insert: ");
                int x;
                scanf("%d", &x);
                queinsert(x);
                break;
            }

            case 2: {
                quedealit();
                break;
            }
            case 3: {
                traverse();
                break;
            }
            case 4: {
                printf("Exiting the program.\n");
               
                
            }
            default: {
                printf("Enter a valid choice.\n");
            }
        }
    } while (1);
    return 0;
}
02/11/23, 7:44 am - Shivam Gurjar: import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        body: Center(
          child: Container(
            width: 300, // Width of the outer Container
            height: 300, // Height of the outer Container
            color: Colors.blue, // Color of the outer Container
            child: Container(
              width: 200, // Width of the inner Container
              height: 200, // Height of the inner Container
              color: Colors.red, // Color of the inner Container
              // Apply border radius to the inner Container
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(20.0),
              ),
            ),
          ),
        ),
      ),
    );
  }
}
03/11/23, 6:14 am - Shivam Gurjar: import 'package:flutter/material.dart';
import 'package:fruithero/detailsPage.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: MyHomePage(),
      debugShowCheckedModeBanner: false,
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color(0xFF21BFBD),
      body: ListView(
        children: <Widget>[
          Padding(
            padding: EdgeInsets.only(top: 15.0, left: 10.0),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: <Widget>[
                IconButton(
                  icon: Icon(Icons.arrow_back_ios),
                  color: Colors.white,
                  onPressed: () {},
                ),
                Container(
                    width: 125.0,
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: <Widget>[
                        IconButton(
                          icon: Icon(Icons.filter_list),
                          color: Colors.white,
                          onPressed: () {},
                        ),
                        IconButton(
                          icon: Icon(Icons.menu),
                          color: Colors.white,
                          onPressed: () {},
                        )
                      ],
                    ))
              ],
            ),
          ),
          SizedBox(height: 25.0),
          Padding(
            padding: EdgeInsets.only(left: 40.0),
            child: Row(
              children: <Widget>[
                Text('Healthy',
                    style: TextStyle(
                        fontFamily: 'Montserrat',
                        color: Colors.white,
                        fontWeight: FontWeight.bold,
                        fontSize: 25.0)),
                SizedBox(width: 10.0),
                Text('Food',
                    style: TextStyle(
                        fontFamily: 'Montserrat',
                        color: Colors.white,
                        fontSize: 25.0))
              ],
            ),
          ),
          SizedBox(height: 40.0),
          Container(
            height: MediaQuery.of(context).size.height - 185.0,
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.only(topLeft: Radius.circular(75.0)),
            ),
            child: ListView(
              primary: false,
              padding: EdgeInsets.only(left: 25.0, right: 20.0),
              children: <Widget>[
                Padding(
                    padding: EdgeInsets.only(top: 45.0),
                    child: Container(
                        height: MediaQuery.of(context).size.height - 300.0,
                        child: ListView(children: [
                          _buildFoodItem('assets/plate1.png', 'Salmon bowl', '\$24.00'),
                          _buildFoodItem('assets/plate2.png', 'Spring bowl', '\$22.00'),
                          _buildFoodItem('assets/plate6.png', 'Avocado bowl', '\$26.00'),
                          _buildFoodItem('assets/plate5.png', 'Berry bowl', '\$24.00')
                        ]))),
                    Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: <Widget>[
                    Container(
                      height: 65.0,
                      width: 60.0,
                      decoration: BoxDecoration(
                        border: Border.all(
                            color: Colors.grey,
                            style: BorderStyle.solid,
                            width: 1.0),
                        borderRadius: BorderRadius.circular(10.0),
                      ),
                      child: Center(
                        child: Icon(Icons.search, color: Colors.black),
                      ),
                    ),
                    Container(
                      height: 65.0,
                      width: 60.0,
                      decoration: BoxDecoration(
                        border: Border.all(
                            color: Colors.grey,
                            style: BorderStyle.solid,
                            width: 1.0),
                        borderRadius: BorderRadius.circular(10.0),
                      ),
                      child: Center(
                        child: Icon(Icons.shopping_basket, color: Colors.black),
                      ),
                    ),
                    Container(
                      height: 65.0,
                      width: 120.0,
                      decoration: BoxDecoration(
                          border: Border.all(
                              color: Colors.grey,
                              style: BorderStyle.solid,
                              width: 1.0),
                          borderRadius: BorderRadius.circular(10.0),
                          color: Color(0xFF1C1428)),
                      child: Center(
                          child: Text('Checkout',
                              style: TextStyle(
                                  fontFamily: 'Montserrat',
                                  color: Colors.white,
                                  fontSize: 15.0))),
                    )
                  ],
                )
              ],
            ),
          )
        ],
      ),
    );
  }

  Widget _buildFoodItem(String imgPath, String foodName, String price) {
    return Padding(
        padding: EdgeInsets.only(left: 10.0, right: 10.0, top: 10.0),
        child: InkWell(
          onTap: () {
            Navigator.of(context).push(MaterialPageRoute(
              builder: (context) => DetailsPage(heroTag: imgPath, foodName: foodName, foodPrice: price)
            ));
          },
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: <Widget>[
              Container(
                child: Row(
                  children: [
                    Hero(
                      tag: imgPath,
                      child: Image(
                        image: AssetImage(imgPath),
                        fit: BoxFit.cover,
                        height: 75.0,
                        width: 75.0
                      )
                    ),
                    SizedBox(width: 10.0),
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children:[
                        Text(
                          foodName,
                          style: TextStyle(
                            fontFamily: 'Montserrat',
                            fontSize: 17.0,
                            fontWeight: FontWeight.bold
                          )
                        ),
                        Text(
                          price,
                          style: TextStyle(
                            fontFamily: 'Montserrat',
                            fontSize: 15.0,
                            color: Colors.grey
                          )
                        )
                      ]
                    )
                  ]
                )
              ),
              IconButton(
                icon: Icon(Icons.add),
                color: Colors.black,
                onPressed: () {}
              )
            ],
          )
        ));
  }
}
03/11/23, 6:15 am - Shivam Gurjar: import 'package:flutter/material.dart';

class DetailsPage extends StatefulWidget {
  final heroTag;
  final foodName;
  final foodPrice;

  DetailsPage({this.heroTag, this.foodName, this.foodPrice});

  @override
  _DetailsPageState createState() => _DetailsPageState();
}

class _DetailsPageState extends State<DetailsPage> {
  var selectedCard = 'WEIGHT';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        backgroundColor: Color(0xFF7A9BEE),
        appBar: AppBar(
          leading: IconButton(
            onPressed: () {
              Navigator.of(context).pop();
            },
            icon: Icon(Icons.arrow_back_ios),
            color: Colors.white,
          ),
          backgroundColor: Colors.transparent,
          elevation: 0.0,
          title: Text('Details',
              style: TextStyle(
                  fontFamily: 'Montserrat',
                  fontSize: 18.0,
                  color: Colors.white)),
          centerTitle: true,
          actions: <Widget>[
            IconButton(
              icon: Icon(Icons.more_horiz),
              onPressed: () {},
              color: Colors.white,
            )
          ],
        ),
        body: ListView(children: [
          Stack(children: [
            Container(
                height: MediaQuery.of(context).size.height - 82.0,
                width: MediaQuery.of(context).size.width,
                color: Colors.transparent),
            Positioned(
                top: 75.0,
                child: Container(
                    decoration: BoxDecoration(
                        borderRadius: BorderRadius.only(
                          topLeft: Radius.circular(45.0),
                          topRight: Radius.circular(45.0),
                        ),
                        color: Colors.white),
                    height: MediaQuery.of(context).size.height - 100.0,
                    width: MediaQuery.of(context).size.width)),
            Positioned(
                top: 30.0,
                left: (MediaQuery.of(context).size.width / 2) - 100.0,
                child: Hero(
                    tag: widget.heroTag,
                    child: Container(
                        decoration: BoxDecoration(
                            image: DecorationImage(
                                image: AssetImage(widget.heroTag),
                                fit: BoxFit.cover)),
                        height: 200.0,
                        width: 200.0))),
            Positioned(
                top: 250.0,
                left: 25.0,
                right: 25.0,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: <Widget>[
                    Text(widget.foodName,
                        style: TextStyle(
                            fontFamily: 'Montserrat',
                            fontSize: 22.0,
                            fontWeight: FontWeight.bold)),
                    SizedBox(height: 20.0),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: <Widget>[
                        Text(widget.foodPrice,
                            style: TextStyle(
                                fontFamily: 'Montserrat',
                                fontSize: 20.0,
                                color: Colors.grey)),
                        Container(height: 25.0, color: Colors.grey, width: 1.0),
                        Container(
                          width: 125.0,
                          height: 40.0,
                          decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(17.0),
                              color: Color(0xFF7A9BEE)),
                          child: Row(
                            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                            children: <Widget>[
                              InkWell(
                                onTap: () {},
                                child: Container(
                                  height: 25.0,
                                  width: 25.0,
                                  decoration: BoxDecoration(
                                      borderRadius: BorderRadius.circular(7.0),
                                      color: Color(0xFF7A9BEE)),
                                  child: Center(
                                    child: Icon(
                                      Icons.remove,
                                      color: Colors.white,
                                      size: 20.0,
                                    ),
                                  ),
                                ),
                              ),
                              Text('2',
                                  style: TextStyle(
                                      color: Colors.white,
                                      fontFamily: 'Montserrat',
                                      fontSize: 15.0)),
                              InkWell(
                                onTap: () {},
                                child: Container(
                                  height: 25.0,
                                  width: 25.0,
                                  decoration: BoxDecoration(
                                      borderRadius: BorderRadius.circular(7.0),
                                      color: Colors.white),
                                  child: Center(
                                    child: Icon(
                                      Icons.add,
                                      color: Color(0xFF7A9BEE),
                                      size: 20.0,
                                    ),
                                  ),
                                ),
                              )
                            ],
                          ),
                        )
                      ],
                    ),
                    SizedBox(height: 20.0),
                    Container(
                      height: 150.0,
                      child: ListView(
                        scrollDirection: Axis.horizontal,
                        children: <Widget>[
                          _buildInfoCard('WEIGHT', '300', 'G'),
                          SizedBox(width: 10.0),
                            _buildInfoCard('CALORIES', '267', 'CAL'),
                            SizedBox(width: 10.0),
                            _buildInfoCard('VITAMINS', 'A, B6', 'VIT'),
                            SizedBox(width: 10.0),
                            _buildInfoCard('AVAIL', 'NO', 'AV')
                        ],
                      )
                    ),
                    SizedBox(height: 20.0),
                      Padding(
                        padding: EdgeInsets.only(bottom:5.0),
                        child: Container(
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.only(topLeft: Radius.circular(10.0), topRight: Radius.circular(10.0), bottomLeft: Radius.circular(25.0), bottomRight: Radius.circular(25.0)),
                            color: Colors.black
                          ),
                          height: 50.0,
                          child: Center(
                            child: Text(
                              '\$52.00',
                              style: TextStyle(
                                color: Colors.white,
                                fontFamily: 'Montserrat'
                              )
                            ),
                          ),
                        ),
                      )
                  ],
                ))
          ])
        ]));
  }

  Widget _buildInfoCard(String cardTitle, String info, String unit) {
    return InkWell(
      onTap: () {
        selectCard(cardTitle);
      },
      child: AnimatedContainer(
        duration: Duration(milliseconds: 500),
        curve: Curves.easeIn,
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(10.0),
          color: cardTitle == selectedCard ? Color(0xFF7A9BEE) : Colors.white,
          border: Border.all(
            color: cardTitle == selectedCard ? 
            Colors.transparent :
            Colors.grey.withOpacity(0.3),
            style: BorderStyle.solid,
          width: 0.75
          ),
          
        ),
        height: 100.0,
        width: 100.0,
        child: Column(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Padding(
              padding: const EdgeInsets.only(top: 8.0, left: 15.0),
              child: Text(cardTitle,
                  style: TextStyle(
                    fontFamily: 'Montserrat',
                    fontSize: 12.0,
                    color:
                        cardTitle == selectedCard ? Colors.white : Colors.grey.withOpacity(0.7),
                  )),
            ),
            Padding(
              padding: const EdgeInsets.only(left: 15.0, bottom: 8.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: <Widget>[
                  Text(info,
                      style: TextStyle(
                          fontFamily: 'Montserrat',
                          fontSize: 14.0,
                          color: cardTitle == selectedCard
                              ? Colors.white
                              : Colors.black,
                          fontWeight: FontWeight.bold)),
                  Text(unit,
                      style: TextStyle(
                        fontFamily: 'Montserrat',
                        fontSize: 12.0,
                        color: cardTitle == selectedCard
                            ? Colors.white
                            : Colors.black,
                      ))
                ],
              ),
            )
          ]
        )
      )
    );
  }

  selectCard(cardTitle) {
    setState(() {
      selectedCard = cardTitle;
    });
  }
}
03/11/23, 6:17 am - Shivam Gurjar: https://github.com/rajayogan/flutterui-curveddesigns/tree/master/assets
03/11/23, 8:22 am - Shivam Gurjar: @override
 Widget build(BuildContext context) {
// TODO: implement build
return Scaffold(
    appBar: AppBar(
      title: Text('Login'),
    ),
    body: Container(
        child: Column(          
      children: <Widget>[
        Container(
          child: TextField(
            decoration: InputDecoration(hintText: 'Email Address'),
          ),width: MediaQuery.of(context).size.width * 0.5,
        ),
        Container(
          child: TextField(
            decoration: InputDecoration(hintText: 'Password'),
          ),
          width: MediaQuery.of(context).size.width * 0.5,
        ),
        RaisedButton(
          onPressed: () {
            print('Pressed');
          },
          child: Text('Login'),
          textColor: Colors.white,
          color: Colors.blue,
        ),
      ],
    )));
03/11/23, 8:25 am - Shivam Gurjar: import 'package:flutter/material.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Nested Containers with Text Field'),
        ),
        body: Container(
          padding: EdgeInsets.all(20.0),
          child: Column(
            children: [
              Container(
                margin: EdgeInsets.all(10.0),
                padding: EdgeInsets.all(10.0),
                color: Colors.blue,
                child: Text('Container 1'),
              ),
              Container(
                margin: EdgeInsets.all(10.0),
                padding: EdgeInsets.all(10.0),
                color: Colors.green,
                child: Column(
                  children: [
                    Text('Container 2'),
                    SizedBox(height: 10.0),
                    TextField(
                      decoration: InputDecoration(labelText: 'Text Field'),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
03/11/23, 11:59 am - Shivam Gurjar: https://gamma.app/docs/Pointer-in-C-6xp8y5ibmxqxhlr
04/11/23, 6:11 am - Shivam Gurjar: <Media omitted>
04/11/23, 8:23 pm - Shivam Gurjar: <Media omitted>
04/11/23, 9:35 pm - Shivam Gurjar: <Media omitted>
04/11/23, 9:36 pm - Shivam Gurjar: #7CABDF
04/11/23, 11:03 pm - Shivam Gurjar: 22°45'36.0"N 75°53'05.7"E
04/11/23, 11:05 pm - Shivam Gurjar: Scaffold(
      backgroundColor: Colors.pink,
      body: Container(
        height: 200,
        width: 200,
         // Set the height of the Container
        decoration: BoxDecoration(
          color: Colors.black,
          image: DecorationImage(
            fit: BoxFit.cover,
            image: AssetImage('assets/images/flower.jpg'),
          ),
        ),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Hellooo,\n Artist' ,
              
              style: TextStyle(
                color: Colors.white,
                fontSize: 35,
                fontWeight: FontWeight.w900
              ),
            ),
          ],
        ),
      ),
    );
  }
}
05/11/23, 4:32 pm - Shivam Gurjar: <Media omitted>
06/11/23, 11:34 am - Shivam Gurjar: import 'package:flutter/material.dart';
import 'package:video_player/video_player.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: VideoPlayerScreen(),
    );
  }
}

class VideoPlayerScreen extends StatefulWidget {
  @override
  _VideoPlayerScreenState createState() => _VideoPlayerScreenState();
}

class _VideoPlayerScreenState extends State<VideoPlayerScreen> {
  late VideoPlayerController _controller;

  @override
  void initState() {
    super.initState();
    _controller = VideoPlayerController.asset('assets/video.mp4')
      ..initialize().then((_) {
        // Ensure the first frame is shown
        setState(() {});
      });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Video Player Example'),
      ),
      body: Center(
        child: _controller.value.isInitialized
            ? AspectRatio(
                aspectRatio: _controller.value.aspectRatio,
                child: VideoPlayer(_controller),
              )
            : CircularProgressIndicator(),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          setState(() {
            if (_controller.value.isPlaying) {
              _controller.pause();
            } else {
              _controller.play();
            }
          });
        },
        child: Icon(
          _controller.value.isPlaying ? Icons.pause : Icons.play_arrow,
        ),
      ),
    );
  }

  @override
  void dispose() {
    super.dispose();
    _controller.dispose();
  }
}
06/11/23, 2:58 pm - Shivam Gurjar: <Media omitted>
06/11/23, 2:58 pm - Shivam Gurjar: <Media omitted>
06/11/23, 7:07 pm - Shivam Gurjar: <Media omitted>
06/11/23, 7:08 pm - Shivam Gurjar: <Media omitted>
06/11/23, 7:19 pm - Shivam Gurjar: <Media omitted>
06/11/23, 7:50 pm - Shivam Gurjar: <Media omitted>
06/11/23, 8:29 pm - Shivam Gurjar: <Media omitted>
06/11/23, 10:50 pm - Shivam Gurjar: nameController, _genderController, _wakeupController, _sleepController, _ageController, and _weightController are instances of TextEditingController. Each of these controllers is associated with a specific text input field, allowing the code to interact with and manage the content of those fields.

Inside the build method, you can see that these controllers are assigned to the controller property of the TextFormField widgets. For example, _nameController is assigned to _nameController:

dart
Copy code
TextFormField(
  controller: _nameController, // Associates the controller with this input field
  // Other properties...
)
This association allows the controller to control the content of the TextFormField.

The validator function is also defined for each TextFormField. It is used to validate the input text. If the text is empty, a validation error message is returned, indicating that the user must enter a value. For example:

dart
Copy code
validator: (value) {
  if (value == null || value.isEmpty) {
    return 'Please enter your name';
  }
  return null;
},
If the input is not empty, null is returned, indicating that the input is valid.

The TextEditingController instances are used to read the values of the text input fields, update them, and perform validation. Additionally, these controllers are associated with the TextFormField widgets to manage the text input and user interaction.

In summary, TextEditingController instances play a crucial role in this code by managing the state of text input fields, validating user input, and allowing for the navigation to the next screen when the form is valid.
12/11/23, 10:06 am - Shivam Gurjar: <Media omitted>
12/11/23, 10:14 am - Shivam Gurjar: <Media omitted>
16/11/23, 3:55 pm - Shivam Gurjar: <Media omitted>
16/11/23, 3:55 pm - Shivam Gurjar: <Media omitted>
16/11/23, 3:55 pm - Shivam Gurjar: <Media omitted>
16/11/23, 3:56 pm - Shivam Gurjar: <Media omitted>
17/11/23, 7:59 pm - Shivam Gurjar: Title: My Adventure Learning Flutter: How a Workshop Showed Me the World of App-Making

Getting Curious

Have you ever wondered how apps are made? That's exactly what led me to join a special Flutter workshop—a place to learn about making apps that work on phones, computers, and the internet. I was really excited to explore Flutter because it promised to make creating apps easier.

What the Workshop Was Like

In the workshop, friendly teachers showed us how Flutter works. They mixed talking about Flutter with lots of fun activities where we got to practice making things with it.

We learned that Flutter uses special building blocks called "widgets" to create the different parts of an app. But sometimes, understanding these widgets and how they work together was a bit tricky. The teachers helped us by explaining and showing examples until it made sense.

The Tough Parts and What I Learned

I won't lie—some parts were hard to understand at first. Things like managing how the app remembers stuff or figuring out how everything should look took time. But as I kept trying and learning from the teachers and my friends in the workshop, suddenly, it just clicked! I was so happy when I finally understood.

Playing with Projects

The best part was when we got to make our own projects. We started with simple things like drawing on the screen and built up to making small apps. It was like creating stories but using code. Every time I finished a project, I felt like I had learned something new.

What I Learned Along the Way

Thinking back, I learned so much! Flutter is amazing because it makes it easy to make what you imagine real. I also discovered how important it is to organize how the app remembers things, and making everything look good is really important too.

Advice for Friends Interested in Flutter

If you're interested in Flutter, don't give up if it feels tricky at first! Ask questions, practice a lot, and try making things by yourself. Don't forget, there are lots of people online who can help too. The more you try, the easier it gets!

The End of the Adventure

This workshop wasn't just about learning Flutter; it was about exploring and making cool things. I feel excited to keep learning and making more apps with Flutter. It's like having a magic wand to create your own digital world!

In the end, this workshop was like an awesome journey that showed me the incredible world of making apps, and Flutter was my guide through this exciting adventure!
22/11/23, 1:18 pm - Shivam Gurjar: #include <stdio.h>

int main() {
    int size = 5; // Example array size
    int position = 2; // Position to insert the element
    int element = 10; // Element to insert
    int arr[10] = {1, 2, 3, 4, 5}; // Example array

    printf("Original array: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    // Shift elements to the right starting from the end
    for (int i = size - 1; i >= position; i--) {
        arr[i + 1] = arr[i];
    }

    // Insert the new element at the specified position
    arr[position] = element;

    // Increment the size of the array
    size++;

    // Display the updated array
    printf("Array after insertion: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}
22/11/23, 1:19 pm - Shivam Gurjar: //////
22/11/23, 1:19 pm - Shivam Gurjar: #include <stdio.h>

int main() {
    int size = 5; // Example array size
    int position = 2; // Position to delete the element
    int arr[10] = {1, 2, 3, 4, 5}; // Example array

    printf("Original array: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    // Shift elements to the left starting from the position to be deleted
    for (int i = position; i < size - 1; i++) {
        arr[i] = arr[i + 1];
    }

    // Decrement the size of the array
    size--;

    // Display the updated array
    printf("Array after deletion: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}
22/11/23, 1:20 pm - Shivam Gurjar: #include<stdio.h>    
#include<stdlib.h>  
int main(){  
int a[10][10],b[10][10],mul[10][10],r,c,i,j,k;    
system("cls");  
printf("enter the number of row=");    
scanf("%d",&r);    
printf("enter the number of column=");    
scanf("%d",&c);    
printf("enter the first matrix element=\n");    
for(i=0;i<r;i++)    
{    
for(j=0;j<c;j++)    
{    
scanf("%d",&a[i][j]);    
}    
}    
printf("enter the second matrix element=\n");    
for(i=0;i<r;i++)    
{    
for(j=0;j<c;j++)    
{    
scanf("%d",&b[i][j]);    
}    
}    
    
printf("multiply of the matrix=\n");    
for(i=0;i<r;i++)    
{    
for(j=0;j<c;j++)    
{    
mul[i][j]=0;    
for(k=0;k<c;k++)    
{    
mul[i][j]+=a[i][k]*b[k][j];    
}    
}    
}    
//for printing result    
for(i=0;i<r;i++)    
{    
for(j=0;j<c;j++)    
{    
printf("%d\t",mul[i][j]);    
}    
printf("\n");    
}    
return 0;  
}
22/11/23, 1:48 pm - Shivam Gurjar: insertion sort
22/11/23, 1:48 pm - Shivam Gurjar: #include<stdio.h>

int main() { 
    int A[] = {12, 54, 65, 7, 23, 9};
    int n = 6;

    
    printf("Array before sorting: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", A[i]);
    }
    printf("\n");

    // Insertion sort algorithm
    int key, j;
    for (int i = 1; i <= n - 1; i++) {
        key = A[i];
        j = i - 1;
        while (j >= 0 && A[j] > key) {
            A[j + 1] = A[j];
            j--;
        }
        A[j + 1] = key;
    }

   
    printf("Array after sorting: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", A[i]);
    }
    printf("\n");

    return 0;
}
22/11/23, 1:50 pm - Shivam Gurjar: quicksort
22/11/23, 1:50 pm - Shivam Gurjar: #include <stdio.h>

void printArray(int *A, int n)
{
    for (int i = 0; i < n; i++)
    {
        printf("%d ", A[i]);
    }
    printf("\n");
}

int partition(int A[], int low, int high)
{
    int pivot = A[low];
    int i = low + 1;
    int j = high;
    int temp;

    do
    {
        while (A[i] <= pivot)
        {
            i++;
        }

        while (A[j] > pivot)
        {
            j--;
        }

        if (i < j)
        {
            temp = A[i];
            A[i] = A[j];
            A[j] = temp;
        }
    } while (i < j);

    
    temp = A[low];
    A[low] = A[j];
    A[j] = temp;
    return j;
}

void quickSort(int A[], int low, int high)
{
    int partitionIndex; 

    if (low < high)
    {
        partitionIndex = partition(A, low, high); 
       
        quickSort(A, low, partitionIndex - 1);  
        quickSort(A, partitionIndex + 1, high); 
    }
}

int main()
{
   
    int A[] = {9, 4, 4, 8, 7, 5, 6};
    
    
    int n = 9;
    n =7;
    printArray(A, n);
    quickSort(A, 0, n - 1);
    printArray(A, n);
    return 0;
}
25/11/23, 8:39 pm - Shivam Gurjar: <Media omitted>
26/11/23, 3:15 pm - Shivam Gurjar: <Media omitted>
26/11/23, 3:15 pm - Shivam Gurjar: <Media omitted>
26/11/23, 3:15 pm - Shivam Gurjar: <Media omitted>
27/11/23, 9:07 am - Shivam Gurjar: <Media omitted>
27/11/23, 9:08 am - Shivam Gurjar: <Media omitted>
27/11/23, 9:09 am - Shivam Gurjar: <Media omitted>
27/11/23, 9:09 am - Shivam Gurjar: <Media omitted>
27/11/23, 9:10 am - Shivam Gurjar: <Media omitted>
29/11/23, 8:59 pm - Shivam Gurjar: <Media omitted>
18/12/23, 9:19 am - Shivam Gurjar: https://leetcode.com/submissions/#/1
19/12/23, 8:43 am - Shivam Gurjar: <Media omitted>
29/12/23, 12:36 pm - Shivam Gurjar: https://drive.google.com/drive/folders/1ag3An8ma2_-3vbYmei1rpBBu_aPoXPiv?usp=drive_link
29/12/23, 12:56 pm - Shivam Gurjar: <Media omitted>
31/12/23, 5:43 pm - Shivam Gurjar: <Media omitted>
01/01/24, 11:33 am - Shivam Gurjar: QUEUES: QUEUES AS ADT, DIFFERENT IMPLEMENTATION 
OF QUEUE, CIRCULAR QUEUE, CONCEPT OF DQUEUE 
AND PRIORITY QUEUE , QUEUE SIMULATION, 
APPLICATION OF QUEUES.
01/01/24, 8:58 pm - Shivam Gurjar: <Media omitted>
03/01/24, 10:20 am - Shivam Gurjar: <Media omitted>
03/01/24, 10:22 am - Shivam Gurjar: <Media omitted>
03/01/24, 10:25 am - Shivam Gurjar: <Media omitted>
05/01/24, 4:02 pm - Shivam Gurjar: <Media omitted>
05/01/24, 4:03 pm - Shivam Gurjar: <Media omitted>
06/01/24, 8:13 pm - Shivam Gurjar: <Media omitted>
07/01/24, 1:51 pm - Shivam Gurjar: <Media omitted>
07/01/24, 5:02 pm - Shivam Gurjar: <Media omitted>
07/01/24, 5:02 pm - Shivam Gurjar: <Media omitted>
07/01/24, 5:10 pm - Shivam Gurjar: <Media omitted>
07/01/24, 5:29 pm - Shivam Gurjar: <Media omitted>
07/01/24, 5:35 pm - Shivam Gurjar: <Media omitted>
07/01/24, 6:14 pm - Shivam Gurjar: <Media omitted>
07/01/24, 6:20 pm - Shivam Gurjar: H
08/01/24, 11:21 am - Shivam Gurjar: <Media omitted>
08/01/24, 11:21 am - Shivam Gurjar: <Media omitted>
08/01/24, 11:21 am - Shivam Gurjar: <Media omitted>
08/01/24, 11:21 am - Shivam Gurjar: <Media omitted>
08/01/24, 4:24 pm - Shivam Gurjar: https://drive.google.com/drive/folders/1diPC8WoLRPW5kseLwXV8iuNf22k2UmbJ?usp=sharing
08/01/24, 4:26 pm - Shivam Gurjar: https://drive.google.com/drive/folders/1tCBn6fMaKadM2-v6aSa6AtHagkc-U-pD?usp=sharing


Upload your certificate before 5 pm
08/01/24, 4:26 pm - Shivam Gurjar: https://drive.google.com/drive/folders/1fFK-Y5XYUwkzZIH3tFK2BBm7HN_a58LM?usp=sharing

Upload Cyber hygiene practitioner certificate before 5 pm
08/01/24, 5:23 pm - Shivam Gurjar: Hnn
08/01/24, 8:11 pm - Shivam Gurjar: <Media omitted>
08/01/24, 8:13 pm - Shivam Gurjar: <Media omitted>
12/01/24, 4:05 pm - Shivam Gurjar: https://reviewed-satin-carries-privacy.trycloudflare.com
12/01/24, 4:08 pm - Shivam Gurjar: https://get-unlimited-followers-for-instagram@
12/01/24, 4:11 pm - Shivam Gurjar: ttps://cad-abstract-mining-chi.trycloudflare.com
14/01/24, 9:48 pm - Shivam Gurjar: https://www.youtube.com/watch?v=N9SbIUod0s4&list=PLG9aCp4uE-s2d8BmD16fb84BfCOfvIVVQ
15/01/24, 6:58 pm - Shivam Gurjar: <Media omitted>
16/01/24, 10:04 am - Shivam Gurjar: <Media omitted>
17/01/24, 1:49 pm - Shivam Gurjar: <Media omitted>
17/01/24, 1:50 pm - Shivam Gurjar: <Media omitted>
17/01/24, 1:50 pm - Shivam Gurjar: <Media omitted>
17/01/24, 1:51 pm - Shivam Gurjar: <Media omitted>
17/01/24, 2:19 pm - Shivam Gurjar: <Media omitted>
17/01/24, 8:42 pm - Shivam Gurjar: https://particle-hospitals-licenses-rt.trycloudflare.com
17/01/24, 8:46 pm - Shivam Gurjar: https://opt-east-infinite-formal.trycloudflare.com
17/01/24, 8:49 pm - Shivam Gurjar: https://view-quoted-expected-lovers.trycloudflare.com
21/01/24, 5:17 pm - Shivam Gurjar: 🅹🅰🅸 🆂🅷🆁🅸 🆁🅰🅼
21/01/24, 5:18 pm - Shivam Gurjar: 🄹🄰🅈 🅂🄷🅁🄴🄴 🅁🄰🄼
21/01/24, 7:41 pm - Shivam Gurjar: <Media omitted>
26/01/24, 1:37 pm - Shivam Gurjar: <Media omitted>
31/01/24, 6:22 pm - Shivam Gurjar: <Media omitted>
31/01/24, 6:24 pm - Shivam Gurjar: <Media omitted>
31/01/24, 6:26 pm - Shivam Gurjar: <Media omitted>
31/01/24, 6:28 pm - Shivam Gurjar: <Media omitted>
31/01/24, 6:28 pm - Shivam Gurjar: You deleted this message
31/01/24, 6:29 pm - Shivam Gurjar: <Media omitted>
31/01/24, 7:15 pm - Shivam Gurjar: https://www.youtube.com/watch?v=3SxjXvjLLIQ&list=PL5H7yfUmc71mCfqVcmsoWYYU4-7Uc0nUy
07/02/24, 6:21 pm - Shivam Gurjar: Encapsulation is to hide the variables or something inside a class, preventing unauthorized parties to use. So the public methods like getter and setter access it and the other classes call these methods for accessing

Abstraction involves the facility to define objects that represent abstract "actors" that can perform work, report on and change their state, and "communicate" with other objects in the system.

Consider the below real time example:

Encapsulation: As a driver you know how to start the car by pressing the start button and internal details of the starting operations are hidden from you. So the entire starting process is hidden from you otherwise we can tell starting operation is encapsulated from you.

OR

The driving wheel is encapsulated the process of rotating the wheel from you.

Abstraction:

Before mentioning anything about abstraction, we can take three different users here (I am calling them as entity)

1) You 2) Local Mechanic 3) Expert

You Entity: Since you know only to start the car by pressing a button and all other operations behind the scene are abstracted from you.

Local Mechanic Entity: Our local mechanic knows some of the implementation of starting the car, i.e. he can open car's bonnet and check the battery cable or chock etc. So in short Local Mechanic Entity knows some of the implementations of the car.

Expert Entity: Since our expert (Designer of the car) mechanic knows all the operations of our car, he can repair it very quickly. So in short Expert Entity knows all the implementations of the car.

The car's operation is completely abstracted from you and it is partially implemented to Local Mechanic Entity and fully implemented to Expert Entity. So you are an abstract class having only abstract methods, Local Mechanic Entity has extended You(Since he is also an ordinary user) and he implemented some of the methods and last our expert Entity extending Local Mechanic and implementing all the methods.
09/02/24, 9:52 pm - Shivam Gurjar: <Media omitted>
15/02/24, 8:17 pm - Shivam Gurjar: Your record submitted successfully
Ref ID: 4906524
Name = Shivam Gurjar
Email: shivamgurjar220386@acropolis.in
15/02/24, 8:17 pm - Shivam Gurjar: Your record submitted successfully
Ref ID: 4906524
Name = Shivam Gurjar
Email: shivamgurjar220386@acropolis.in
15/02/24, 8:18 pm - Shivam Gurjar: Your record submitted successfully
Ref ID: 4906524
Name = Shivam Gurjar
Email: shivamgurjar220386@acropolis.in
Hahajjaoa
19/02/24, 11:57 am - Shivam Gurjar: <Media omitted>
19/02/24, 12:30 pm - Shivam Gurjar: <Media omitted>
22/02/24, 9:16 pm - Shivam Gurjar: G
26/02/24, 1:57 pm - Shivam Gurjar: <Media omitted>
29/02/24, 7:24 am - Shivam Gurjar: https://drive.google.com/folderview?id=1LSsnDb-y_7z-IQ4yJvRl4Hn9UgnCougi
14/03/24, 4:03 pm - Shivam Gurjar: Unix terminal  basic cmd
14/03/24, 10:41 pm - Shivam Gurjar: <Media omitted>
14/03/24, 10:44 pm - Shivam Gurjar: <Media omitted>
15/03/24, 8:57 pm - Shivam Gurjar: <Media omitted>
17/03/24, 10:02 pm - Shivam Gurjar: https://youtube.com/shorts/FEaPXccB-K8?si=v1cAIWaKvnx7oAY5
20/03/24, 7:12 pm - Shivam Gurjar: <Media omitted>
21/03/24, 11:53 pm - Shivam Gurjar: <Media omitted>
26/03/24, 10:21 pm - Shivam Gurjar: <Media omitted>
03/04/24, 11:42 pm - Shivam Gurjar: Gui
11/04/24, 3:21 pm - Shivam Gurjar: <Media omitted>
11/04/24, 3:21 pm - Shivam Gurjar: <Media omitted>
11/04/24, 3:21 pm - Shivam Gurjar: <Media omitted>
12/04/24, 7:33 am - Shivam Gurjar: https://designxstream.com/icons/
13/04/24, 10:41 am - Shivam Gurjar: <Media omitted>
14/04/24, 10:33 pm - Shivam Gurjar: <Media omitted>
18/04/24, 6:31 am - Shivam Gurjar: <Media omitted>
21/04/24, 6:11 pm - Shivam Gurjar: <Media omitted>
26/04/24, 9:42 pm - Shivam Gurjar: <Media omitted>
28/04/24, 2:21 pm - Shivam Gurjar: class currencyConverterMaterialPage extends StatefulWidget{
   const currencyConverterMaterialPage({super.key});
  // State createState() =>  State(); = this is instance of state class we cannot create instance of abstract class so we extend this class with _currencyConverterMaterialPageState
  @override
  State<currencyConverterMaterialPage> createState() {
     return _CurrencyConverterMaterailPageState();
     }



}

// we have to create our own class that will extend this state class
class _CurrencyConverterMaterailPageState extends State<currencyConverterMaterialPage>{} explain this code in simple way line by line in detail it is code of flutter
30/04/24, 2:04 pm - Shivam Gurjar: import java.util.ArrayList;

public class ProducerConsumer {
    public static void main(String[] args) {
        ArrayList<Integer> buffer = new ArrayList<Integer>();
        Producer p1 = new Producer(buffer);
        Consumer c1 = new Consumer(buffer);

        Thread producerThread = new Thread(p1);
        Thread consumerThread = new Thread(c1);

        producerThread.start();
        consumerThread.start();
    }

    static class Producer implements Runnable {
        private int i = 0;
        private int max = 5;
        private ArrayList<Integer> buffer;

        Producer(ArrayList<Integer> buffer) {
            this.buffer = buffer;
        }

        public void run() {
            try {
                while (true) {
                    produce(i++);
                }
            } catch (Exception e) {
                System.out.println("exception occur");
            }
        }

        public void produce(int i) {
            synchronized (buffer) {
                while (buffer.size() == max) {
                    System.out.println("Buffer is full, ");
                    try {
                        buffer.wait();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
                buffer.add(i);
                System.out.println("Produced: " + i);
                buffer.notify();
            }
        }
    }

    static class Consumer implements Runnable {
        private ArrayList<Integer> buffer;

        Consumer(ArrayList<Integer> buffer) {
            this.buffer = buffer;
        }

        public void run() {
            try {
                while (true) {
                    consume();
                }
            } catch (Exception e) {
                System.out.println("exception occur");
            }
        }

        public void consume() {
            synchronized (buffer) {
                while (buffer.isEmpty()) {
                    System.out.println("Buffer is empty");
                    try {
                        buffer.wait();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
                int consumed = buffer.remove(0);
                System.out.println("Consumed: " + consumed);
                buffer.notify();
            }
        }
    }
}
30/04/24, 8:48 pm - Shivam Gurjar: I am different person to different people. Annoying to one. Talented to another. Quiet to few. Unknown to lot. But who am i, to me?
30/04/24, 8:50 pm - Shivam Gurjar: Be so rooted in yourself that nobody absence or presence can disturb your peace
08/05/24, 9:39 pm - Shivam Gurjar: <Media omitted>
09/05/24, 12:38 am - Shivam Gurjar: Jo badla ja sakhe use badlo 
Jo badla na ja sake use accept karo
Or jo accept na kiya ja sake usse dur raho
Khud ko khus rakho
11/05/24, 11:15 am - Shivam Gurjar: <Media omitted>
11/05/24, 9:22 pm - Shivam Gurjar: Maths: 
1.Algebra of linear transformation
2. Quotient space
3. Symmetric , herniation, skew-syme
4. Linear sum
5. Direct sum of 2 sub spaces
6. Disjoint sub spaces
7. Linear functional
8. Dual space(theorem)
9. Annihilator
10. Eigen values and vector of linear transformatio(theormS)
11. Inner product space
12. Bilinear forms
13. Symmetric bilinear forms
14. Skew Symmetric bilinear forms
15/05/24, 7:13 am - Shivam Gurjar: <Media omitted>
21/05/24, 2:02 pm - Shivam Gurjar: g
23/05/24, 3:26 pm - Shivam Gurjar: <Media omitted>
27/05/24, 9:18 pm - Shivam Gurjar: <Media omitted>
29/05/24, 3:41 pm - Shivam Gurjar: <Media omitted>
30/05/24, 11:40 pm - Shivam Gurjar: https://youtu.be/nV2HEU7HIdY?si=L5jITUfsN14H0qfi
31/05/24, 10:07 am - Shivam Gurjar: <Media omitted>
31/05/24, 11:46 am - Shivam Gurjar: -- Question 1
CREATE TABLE Student (
    Enrollment_No VARCHAR(20),
    Name CHAR(30),
    Branch CHAR(10),
    Contact_No NUMBER(15),
    Email_ID VARCHAR(40),
    Address1 VARCHAR(40),
    Address2 VARCHAR(40),
    City CHAR(30),
    State VARCHAR(30)
);

-- Question 2
INSERT INTO Student (Enrollment_No, Name, Branch, City, State)
VALUES
('0827CS131001', 'Aarti Suryavanshi', 'CSE', 'Indore', 'MP'),
('0827CS131002', 'Aashrya Pandya', 'CSE', 'Indore', 'MP'),
('0827CS131003', 'Aayush Joshi', 'CSE', 'Indore', 'MP'),
('0827CS131004', 'Aayush Soni', 'CSE', 'Indore', 'MP'),
('0827CS131005', 'Aayush Agrawal', 'CSE', 'Indore', 'MP'),
('0827EC131001', 'Aayush Sharma', 'EC', 'Bhopal', 'MP'),
('0827EC131002', 'Ekta Sharma', 'EC', 'Bhopal', 'MP'),
('0827EC131003', 'Gaurav Sharma', 'EC', 'Bhopal', 'MP'),
('0827EC131004', 'Karan Mishra', 'EC', 'Bhopal', 'MP'),
('0827EC131005', 'Megha Joshi', 'EC', 'Bhopal', 'MP'),
('0827EC131006', 'Shubham Yadav', 'EC', 'Bhopal', 'MP');

-- Question 3
SELECT * FROM Student WHERE Branch = 'CSE';

-- Question 4
SELECT Name FROM Student WHERE City = 'Bhopal';

-- Question 5
SELECT Name, Branch FROM Student WHERE Enrollment_No = '0827CS131002';

-- Question 6
SELECT DISTINCT * FROM Student;

-- Question 7
SELECT Enrollment_No AS EN_No FROM Student;

-- Question 8
SELECT * FROM Student WHERE Name LIKE 'E%';

-- Question 9
SELECT * FROM Student WHERE NOT Name LIKE 'A%';

-- Question 10
DELETE FROM Student WHERE Name = 'Shubham Yadav';

-- Question 11
UPDATE Student SET City = 'Indore' WHERE Branch = 'EC';

-- Question 12
UPDATE Student SET Contact_No = 9827012147 WHERE Enrollment_No = '0827EC131003';

-- Question 13
UPDATE Student SET Email_ID = 'karan_mishra@gmail.com' WHERE Enrollment_No = '0827EC131004';

-- Question 14
ALTER TABLE Student ALTER COLUMN City VARCHAR(30);

-- Question 15
ALTER TABLE Student ADD Pincode NUMBER(10);

-- Question 16
ALTER TABLE Student RENAME COLUMN Name TO Student_Name;

-- Question 17
SELECT * FROM Student;

-- Question 18
SELECT Name, Email_ID FROM Student WHERE Email_ID LIKE '%_%';

-- Question 19
DELETE FROM Student
WHERE ROWID NOT IN (
    SELECT MIN(ROWID)
    FROM Student
    GROUP BY Enrollment_No, Name, Branch, Contact_No, Email_ID, Address1, Address2, City, State
);

-- Question 20
ALTER TABLE Student DROP COLUMN Address2;

-- Question 21
CREATE TABLE "Student Detail of CSE Students" AS
SELECT * FROM Student WHERE Branch = 'CSE';

-- Question 22
CREATE TABLE "Student Detail of EC Students" AS
SELECT Enrollment_No, Name FROM Student WHERE Branch = 'EC';

-- Question 23
ALTER TABLE "Student Detail of CSE Students" RENAME TO "Student Detail";

-- Question 24
DELETE FROM "Student Detail" WHERE Branch = 'CSE';

-- Question 25
DROP TABLE "Student Detail of EC Students";
05/06/24, 10:34 pm - Shivam Gurjar: class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        for(int i =m; i<m+n; i++){
            for(int j=0; j<n; j++){
                nums1[i] = nums2[j];
            }
            sort(nums1.begin(), nums1.end());
        }
    }
};
09/06/24, 5:42 pm - Shivam Gurjar: <Media omitted>
09/06/24, 10:34 pm - Shivam Gurjar: -- Step 1: Create the database
CREATE DATABASE BloodBankDB;
USE BloodBankDB;

-- Step 2: Create tables for each entity

-- Donor table
CREATE TABLE Donor (
    Donor_ID INT PRIMARY KEY,
    Name VARCHAR(100),
    Age INT,
    Gender VARCHAR(10),
    Address VARCHAR(255),
    Blood_Group VARCHAR(10),
    Diseases VARCHAR(255)
);

-- RegistrationTeam table
CREATE TABLE RegistrationTeam (
    ID INT PRIMARY KEY,
    Name VARCHAR(100)
);

-- Patient table
CREATE TABLE Patient (
    P_ID INT PRIMARY KEY,
    Name VARCHAR(100),
    Gender VARCHAR(10),
    Contact VARCHAR(50),
    Blood_G VARCHAR(10),
    Address VARCHAR(255),
    Date_of_Intake DATE
);

-- Blood table
CREATE TABLE Blood (
    ID INT PRIMARY KEY,
    Blood_Group VARCHAR(10)
);

-- BloodBank table
CREATE TABLE BloodBank (
    ID INT PRIMARY KEY,
    Name VARCHAR(100),
    Location VARCHAR(255),
    Contacts VARCHAR(50),
    Quantity INT,
    Available_Group VARCHAR(10)
);

-- Hospital table
CREATE TABLE Hospital (
    ID INT PRIMARY KEY,
    Name VARCHAR(100),
    Location VARCHAR(255)
);

-- Manager table
CREATE TABLE Manager (
    ID INT PRIMARY KEY,
    Name VARCHAR(100)
);

-- Step 3: Create tables for relationships

-- Register relationship
CREATE TABLE Register (
    Donor_ID INT,
    RegistrationTeam_ID INT,
    PRIMARY KEY (Donor_ID, RegistrationTeam_ID),
    FOREIGN KEY (Donor_ID) REFERENCES Donor(Donor_ID),
    FOREIGN KEY (RegistrationTeam_ID) REFERENCES RegistrationTeam(ID)
);

-- Registers relationship
CREATE TABLE Registers (
    Patient_ID INT,
    RegistrationTeam_ID INT,
    PRIMARY KEY (Patient_ID, RegistrationTeam_ID),
    FOREIGN KEY (Patient_ID) REFERENCES Patient(P_ID),
    FOREIGN KEY (RegistrationTeam_ID) REFERENCES RegistrationTeam(ID)
);

-- Donates relationship
CREATE TABLE Donates (
    Donor_ID INT,
    Blood_ID INT,
    PRIMARY KEY (Donor_ID, Blood_ID),
    FOREIGN KEY (Donor_ID) REFERENCES Donor(Donor_ID),
    FOREIGN KEY (Blood_ID) REFERENCES Blood(ID)
);

-- Receives relationship
CREATE TABLE Receives (
    Patient_ID INT,
    Blood_ID INT,
    PRIMARY KEY (Patient_ID, Blood_ID),
    FOREIGN KEY (Patient_ID) REFERENCES Patient(P_ID),
    FOREIGN KEY (Blood_ID) REFERENCES Blood(ID)
);

-- StoredIn relationship
CREATE TABLE StoredIn (
    Blood_ID INT,
    BloodBank_ID INT,
    PRIMARY KEY (Blood_ID, BloodBank_ID),
    FOREIGN KEY (Blood_ID) REFERENCES Blood(ID),
    FOREIGN KEY (BloodBank_ID) REFERENCES BloodBank(ID)
);

-- Manages relationship
CREATE TABLE Manages (
    Manager_ID INT,
    BloodBank_ID INT,
    PRIMARY KEY (Manager_ID, BloodBank_ID),
    FOREIGN KEY (Manager_ID) REFERENCES Manager(ID),
    FOREIGN KEY (BloodBank_ID) REFERENCES BloodBank(ID)
);

-- Contacts relationship
CREATE TABLE Contacts (
    BloodBank_ID INT,
    Hospital_ID INT,
    PRIMARY KEY (BloodBank_ID, Hospital_ID),
    FOREIGN KEY (BloodBank_ID) REFERENCES BloodBank(ID),
    FOREIGN KEY (Hospital_ID) REFERENCES Hospital(ID)
);

-- Step 4: Insert sample data (optional)
10/06/24, 9:19 am - Shivam Gurjar: -- Example of SUM aggregate function
SELECT SUM(salary) AS total_salary FROM employees;

-- Example of AVG aggregate function
SELECT AVG(age) AS average_age FROM students;

-- Example of COUNT aggregate function
SELECT COUNT(*) AS total_orders FROM orders;
10/06/24, 9:20 am - Shivam Gurjar: -- Example of UPPER scalar function
SELECT UPPER(name) AS upper_case_name FROM customers;

-- Example of LOWER scalar function
SELECT LOWER(email) AS lower_case_email FROM users;

-- Example of CONCAT scalar function
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM employees;
10/06/24, 9:20 am - Shivam Gurjar: -- Example of SUBSTRING string function
SELECT SUBSTRING(title, 1, 10) AS short_title FROM books;

-- Example of REPLACE string function
SELECT REPLACE(description, 'old', 'new') AS updated_description FROM products;

-- Example of LENGTH string function
SELECT LENGTH(username) AS username_length FROM accounts;
10/06/24, 9:20 am - Shivam Gurjar: -- Example of ABS mathematical function
SELECT ABS(balance) AS absolute_balance FROM accounts;

-- Example of SQRT mathematical function
SELECT SQRT(area) AS square_root_area FROM shapes;

-- Example of POWER mathematical function
SELECT POWER(2, 3) AS power_result;
10/06/24, 9:20 am - Shivam Gurjar: -- Example of NOW date and time function
SELECT NOW() AS current_datetime;

-- Example of DATE_FORMAT date and time function
SELECT DATE_FORMAT(order_date, '%Y-%m-%d') AS formatted_order_date FROM orders;

-- Example of DATEDIFF date and time function
SELECT DATEDIFF(end_date, start_date) AS project_duration FROM projects;
12/06/24, 2:21 pm - Shivam Gurjar: Quotient space
Direct sum of subspaces

Eigen values and eigen vectors of linear transformation

Inner product spaces

Invarient subspaces
12/06/24, 2:21 pm - Shivam Gurjar: Reduction of quadratic to canonical form
13/06/24, 12:11 am - Shivam Gurjar: https://www.reddit.com/r/css/s/Qw63Ne1WEY
14/06/24, 2:18 pm - Shivam Gurjar: <Media omitted>
14/06/24, 2:22 pm - Shivam Gurjar: <Media omitted>
16/06/24, 5:47 pm - Shivam Gurjar: <Media omitted>
16/06/24, 6:14 pm - Shivam Gurjar: <Media omitted>
17/06/24, 8:40 am - Shivam Gurjar: https://youtu.be/bVyigcIt-ac?si=MZmzpvohd2fqJp4S
17/06/24, 2:18 pm - Shivam Gurjar: from threading import Thread, current_thread

# Function to print thread names
def print_thread_names():
    # Get the current thread (main thread)
    main_thread = current_thread()
    print(f"Main Thread: {main_thread.name}")

    # Function for child thread
    def child_thread_func():
        child_thread = current_thread()
        print(f"Child Thread: {child_thread.name}")

    # Create a new thread for the child thread
    child_thread = Thread(target=child_thread_func)
    child_thread.start()
    child_thread.join()  # Wait for the child thread to complete

# Call the function directly
print_thread_names()
17/06/24, 10:40 pm - Shivam Gurjar: <Media omitted>
20/06/24, 6:59 am - Shivam Gurjar: SELECT co.country_name,count(*),avg(i.total_price)
from country co,city ci, customer cu, invoice i
WHERE co.id= ci.country_id and ci.id=cu.city_id and cu.id=i.customer_id
group BY co.country_name
having avg(i.total_price) > (select avg(total_price)from invoice)
20/06/24, 7:01 am - Shivam Gurjar: SELECT c.customer_name, CAST(SUM(i.total_price), AS DECIMAL(9,6)) AS total
FROM customer c
INNER JOIN invoice i ON c.id=i.customer_id
GROUP BY c.customer_name
HAVING SUM(i.total_price)<0.25*(SELECT AVG(total_price) FROM invoice)
ORDER BY total DESC
20/06/24, 7:04 am - Shivam Gurjar: SELECT c.customer_name, CAST(SUM(i.total_price), AS DECIMAL(9,6)) AS total
FROM customer c
INNER JOIN invoice i ON c.id=i.customer_id
GROUP BY c.customer_name
HAVING SUM(i.total_price)<0.25*(SELECT AVG(total_price) FROM invoice)
ORDER BY total DESC
20/06/24, 7:06 am - Shivam Gurjar: SELECT c.customer_name, CAST(SUM(i.total_price), AS DECIMAL(9,6)) AS total
FROM customer c
INNER JOIN invoice i ON c.id=i.customer_id
GROUP BY c.customer_name
HAVING SUM(i.total_price)<0.25*(SELECT AVG(total_price) FROM invoice)
ORDER BY total DESC
20/06/24, 7:07 am - Shivam Gurjar: SELECT c.customer_name, CAST(SUM(i.total_price) AS DECIMAL(9,6)) AS total
FROM customer c
INNER JOIN invoice i ON c.id = i.customer_id
GROUP BY c.customer_name
HAVING SUM(i.total_price) < 0.25 * (SELECT AVG(total_price) FROM invoice)
ORDER BY total DESC;
20/06/24, 7:09 am - Shivam Gurjar: SELECT c.customer_name, CAST(SUM(i.total_price) AS DECIMAL(9,6)) AS total
FROM customer c
INNER JOIN invoice i ON c.id = i.customer_id
GROUP BY c.customer_name
HAVING SUM(i.total_price) < 0.25 * (SELECT AVG(total_price) FROM invoice)
ORDER BY total DESC;
20/06/24, 7:11 am - Shivam Gurjar: SELECT c.customer_name, CAST(SUM(i.total_price) AS DECIMAL(9,6)) AS total
FROM customer c
INNER JOIN invoice i ON c.id = i.customer_id
GROUP BY c.customer_name
HAVING SUM(i.total_price) < 0.25 * (SELECT AVG(total_price) FROM invoice)
ORDER BY CAST(SUM(i.total_price) AS DECIMAL(9,6)) DESC;
20/06/24, 7:12 am - Shivam Gurjar: List all customers who spent 25% or less than the average amount spent on all invoices. For each customer, display their name and the amount spent to 6 decimal places. Order the result by the amount spent from high to low.
▼ Schema

There are 2 tables: customer, invoice.

28°C Clear

customer

Name

Type

id

int

Description

This is a primary key

customer_name

varchar(255)

Name

city_id

int

City ID

customer_address

varchar(255)

Address

contact_person

varchar(255)

Can be NULL

email

varchar(128)

Email

phone

varchar(128)

Phone number

is_active

int

Boolean

invoice

Name

Type

id

int

invoice_number

varchar(255)

customer_id

int

user_account_id

int

total_price

decimal(8,2)

Description

This is a primary key

Invoice number

Foreign key referencing customer.id

Account ID

Total price
20/06/24, 7:13 am - Shivam Gurjar: SELECT c.customer_name, SUM(i.total_price) AS total_spent
FROM customer c
JOIN invoice i ON c.id = i.customer_id
GROUP BY c.customer_name
HAVING SUM(i.total_price) <= (SELECT 0.25 * AVG(total_price)
                              FROM invoice)
ORDER BY total_spent DESC;
20/06/24, 7:14 am - Shivam Gurjar: SELECT c.customer_name, ROUND(SUM(i.total_price), 6) AS total_spent
FROM customer c
JOIN invoice i ON c.id = i.customer_id
GROUP BY c.customer_name
HAVING SUM(i.total_price) <= (SELECT 0.25 * AVG(total_price) FROM invoice)
ORDER BY total_spent DESC;
20/06/24, 7:16 am - Shivam Gurjar: SELECT c.customer_name, ROUND(SUM(i.total_price), 6) AS amount_spent
FROM customer c
JOIN invoice i ON c.id = i.customer_id
GROUP BY c.customer_name
HAVING ROUND(SUM(i.total_price), 6) <= (SELECT 0.25 * AVG(total_price) FROM invoice)
ORDER BY amount_spent DESC;
20/06/24, 7:17 am - Shivam Gurjar: SELECT c.customer_name, ROUND(SUM(i.total_price), 6) AS amount_spent
FROM customer c
JOIN invoice i ON c.id = i.customer_id
GROUP BY c.customer_name
HAVING ROUND(SUM(i.total_price), 6) <= (SELECT 0.25 * AVG(total_price) FROM invoice)
ORDER BY amount_spent DESC;
20/06/24, 7:18 am - Shivam Gurjar: Unknown column 'amount_spent ' in 'order clause'
20/06/24, 7:18 am - Shivam Gurjar: SELECT c.customer_name, ROUND(SUM(i.total_price), 6) AS amount_spent
FROM customer c
JOIN invoice i ON c.id = i.customer_id
GROUP BY c.customer_name
HAVING ROUND(SUM(i.total_price), 6) <= (SELECT 0.25 * AVG(total_price) FROM invoice)
ORDER BY ROUND(SUM(i.total_price), 6) DESC;
20/06/24, 7:19 am - Shivam Gurjar: SELECT c.customer_name, ROUND(SUM(i.total_price), 6) AS amount_spent
FROM customer c
JOIN invoice i ON c.id = i.customer_id
GROUP BY c.customer_name
HAVING ROUND(SUM(i.total_price), 6) <= (SELECT 0.25 * AVG(total_price) FROM invoice)
ORDER BY amount_spent DESC;
20/06/24, 7:20 am - Shivam Gurjar: ----- cumtomer Spending

SELECT
     c.customer_name, ROUND(SUM(i.total_price), 6)
FROM 
     customer c
INNER JOIN
     invoice i ON c.id=i.customer_id
GROUP BY
     c.customer_name
HAVING 
     SUM(i.total_price)<0.25*(SELECT AVG(total_price) FROM invoice)
ORDER BY
      ROUND(SUM(i.total_price), 6) DESC;
20/06/24, 7:21 am - Shivam Gurjar: SELECT
    c.customer_name,
    ROUND(SUM(i.total_price), 6) AS total_spent
FROM
    customer c
INNER JOIN
    invoice i ON c.id = i.customer_id
GROUP BY
    c.customer_name
HAVING
    SUM(i.total_price) <= 0.25 * (SELECT AVG(total_price) FROM invoice)
ORDER BY
    total_spent DESC;
20/06/24, 8:21 pm - Shivam Gurjar: <Media omitted>
22/06/24, 7:56 pm - Shivam Gurjar: Weak people act strong to rule other
Strong people act weak to use other
I act fool to know everyone true intension and truth
22/06/24, 8:04 pm - Shivam Gurjar: Real man want a home not a hotspot
23/06/24, 7:00 pm - Shivam Gurjar: <Media omitted>
27/06/24, 5:59 pm - Shivam Gurjar: <Media omitted>
27/06/24, 6:09 pm - Shivam Gurjar: <Media omitted>
30/06/24, 11:33 pm - Shivam Gurjar: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="test.css">
</head>
<body>
    <div id="main">
        <div id="cursor"></div>
    </div>
    <script src="test.js"></script>
</body>
</html>#main{
    min-height: 100vh;
    width: 100%;
    background-color: black;
    margin: 0;
    position: relative;
}

#cursor{
    height: 20px;
    width: 20px;
    background-color: red;
    position: fixed;
    top: 20px;
}var cursor = document.querySelector("#cursor");

document.addEventListener("mouseenter", function(e){
    cursor.style.left = "e.x" + "px";
    cursor.style.top = "e.y" + "px";
    
}) why my div is not moving with cursor
30/06/24, 11:36 pm - Shivam Gurjar: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mouse Cursor Movement</title>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            height: 100%;
        }

        #main {
            min-height: 100vh;
            width: 100%;
            background-color: black;
            position: relative;
        }

        #cursor {
            width: 20px;
            height: 20px;
            background-color: red;
            position: absolute;
            top: 0;
            left: 0;
            border-radius: 50%; /* Optional: Makes the cursor div round */
        }
    </style>
</head>
<body>
    <div id="main">
        <div id="cursor"></div>
    </div>
    <script>
        document.addEventListener("mousemove", function(e) {
            var cursor = document.getElementById("cursor");
            cursor.style.left = e.pageX + "px";
            cursor.style.top = e.pageY + "px";
        });
    </script>
</body>
</html>
03/07/24, 9:07 am - Shivam Gurjar: https://github.com/nodejs/node-gyp#on-windows
03/07/24, 6:45 pm - Shivam Gurjar: https://dly.to/UvuHms030En
03/07/24, 11:40 pm - Shivam Gurjar: const express = require('express')
const app = express()
const fs = require('node:fs');


// two ways to use middleware
app.use(function(req, res, next){
    console.log("middleware chala");
    next();
}); // jo bhi request aygi phele ye chelega

app.use(function(req, res, next){
    console.log("middleware chala 2nd time yese bohot sare bana sakte h");
    next();
});

// creating a route ex www.youtube.com/home(route)
app.get('/', function (req, res) {
  res.send(function(){
    fs.writeFile('chk.txt', "file inside route", function(err){
        if(err) console.error(err)
        else console.log("no error");
    })
  })
});

// app.get('/profile', function (req, res) {
//   res.send('My profile10001')
// });

// request handler is also a middle ware

app.get('/profile', function (req, res, next) {
  return next(new Error("something went wrong ")) ; // route yahi ruk jyga if error come ( ye error console pe jayga)
});


// error handler
app.use((err , req, res)=>{
    console.log(err.stack);
    req.status(500).send('something broke!'); // ye error frontend pe jaygA
})

app.listen(3000) // 3000 is port  no (learn what is server and port)

// if we change anything here then we have to restart server again and again
// for this problem we install nodemon pakage from npm using command npm i nodemon -g (here g denote global means we do not have to dowload again)
//after install write nodemon filename , if it dont work write npx nodemon filename
// miidleware : jab bhi server request accept karta hai waha se routeke beech pahuchne tak agar aap us request ko beech me rokte ho and kuchh perform karte ho , to ye element middleware kehlaata hai

// req -> server(accept req) -> middleware -> route
03/07/24, 11:54 pm - Shivam Gurjar: const express = require('express')
const app = express()
const fs = require('node:fs');


// two ways to use middleware
app.use(function(req, res, next){
    console.log("middleware chala");
    next();
}); // jo bhi request aygi phele ye chelega

app.use(function(req, res, next){
    console.log("middleware chala 2nd time yese bohot sare bana sakte h");
    next();
});

// creating a route ex www.youtube.com/home(route)
app.get('/', function (req, res) {
  res.send("hello from first page");
  fs.writeFile('chk.txt', "file inside route", function(err){
    if(err) console.error(err)
    else console.log("no error");
})
 

})


app.get('/profile3', function (req, res) {
  res.sendFile("C:\Users\dheer\Nodejs_basic_express_application\chk.txt");
});

// request handler is also a middle ware

app.get('/profile', function (req, res, next) {
  return next(new Error("something went wrong ")) ; 
  // route yahi ruk jyga if error come ( ye error console pe jayga)
});


// error handler
app.use((err , req, res)=>{
    console.log(err.stack);
    req.status(500).send('something broke!'); // ye error frontend pe jaygA
})

app.listen(3000) // 3000 is port  no (learn what is server and port)

// if we change anything here then we have to restart server again and again
// for this problem we install nodemon pakage from npm using command npm i nodemon -g (here g denote global means we do not have to dowload again)
//after install write nodemon filename , if it dont work write npx nodemon filename
// miidleware : jab bhi server request accept karta hai waha se routeke beech pahuchne tak agar aap us request ko beech me rokte ho and kuchh perform karte ho , to ye element middleware kehlaata hai

// req -> server(accept req) -> middleware -> route
04/07/24, 9:36 pm - Shivam Gurjar: Dhanuka agritech
07/07/24, 11:39 pm - Shivam Gurjar: <Media omitted>
08/07/24, 4:36 pm - Shivam Gurjar: 🚀" Starting my 100 codes journey in 50 days"🚀..

" I'm excited to embark on a journey of solving 100 coding problems in 50 days on LeetCode. This challenge aims to sharpen my problem-solving skills and deepen my understanding of algorithms and data structures. Looking forward to this rigorous yet rewarding experience".

Just tackled two challenging coding problems on LeetCode today. It’s always rewarding to push the boundaries of my problem-solving skills..

Today's two problems are :

1.Height checker(leetcode problem #1051)
2.Find the number of good pairs I (leetcode problem #3162)

These two problems are based on Array which help me to improve my logic in Array and build my knowledge..

"Looking forward to tackling more coding challenges and expanding my skill set. Every problem solved is a step towards mastery".
🚀
hashtag#codingjourney hashtag#leetcode hashtag#DSA hashtag#algorithm
hashtag#codingskills hashtag#problemsolving
08/07/24, 4:40 pm - Shivam Gurjar: Absolutely! Here's a LinkedIn post structured similarly for your "100 Days of LeetCode" challenge:

---

🚀 "Starting my 100 days of LeetCode problem-solving journey" 🚀

Excited to announce the start of my "100 Days of LeetCode" challenge! Over the next 100 days, I'll be tackling 100 coding problems on LeetCode to enhance my problem-solving skills and deepen my understanding of algorithms and data structures. This journey promises to be both challenging and immensely rewarding.

---

🌟 **Day 1 Update:** Just kicked off my challenge by solving two challenging problems on LeetCode. It's incredible how each problem pushes me to think differently and refine my coding techniques.

🔍 **Today's Problems:**
1. **Height Checker** (LeetCode Problem #1051)
2. **Find the Number of Good Pairs I** (LeetCode Problem #3162)

📊 These problems focused on arrays, helping me strengthen my logic and proficiency in handling array-related challenges.

---

🔍 "Looking forward to the next 99 days of continuous learning and growth. Every problem solved brings me closer to mastering algorithms and becoming a better coder."

🚀 #100DaysOfLeetCode #CodingJourney #LeetCode #DSA #Algorithm #CodingSkills #ProblemSolving

Stay tuned for daily updates as I progress through this exciting challenge! 💻💪
08/07/24, 4:54 pm - Shivam Gurjar: 🌟 Day 1 of 100 Days of LeetCode Problem Solving 🌟
Hello everyone,
Today marks the beginning of an exciting journey for me - 100 Days of LeetCode Problem Solving! 🎉
Over the next 100 days, I will be dedicating time every day to solve problems on LeetCode, with the goal of enhancing my coding skills, improving my algorithmic thinking, and becoming a better problem solver. 
hashtag#100DaysOfCode hashtag#LeetCode hashtag#ProblemSolving hashtag#CodingJourney hashtag#ContinuousLearning hashtag#TechSkills hashtag#Algorithm hashtag#DataStructures
08/07/24, 4:55 pm - Shivam Gurjar: 🌟 Day 1 of 100 Days of LeetCode Challenge 🌟

Hello everyone,

Today marks the beginning of an exciting journey for me - 100 Days of solving LeetCode problems! 🎉

Over the next 100 days, I'll dedicate time every day to enhance my coding skills, improve my algorithmic thinking, and become a better problem solver.

#100DaysOfCode #LeetCode #ProblemSolving #CodingJourney #ContinuousLearning #TechSkills #Algorithm #DataStructures
08/07/24, 4:56 pm - Shivam Gurjar: Remove today marks
08/07/24, 4:57 pm - Shivam Gurjar: 🌟 Day 1 of 100 Days of LeetCode Challenge 🌟

Greetings everyone,

Today begins an exciting journey for me - 100 Days of tackling LeetCode problems! 🎉

Over the next 100 days, I'm committed to improving my coding skills, refining my algorithmic thinking, and becoming a more adept problem solver.

#100DaysOfCode #LeetCode #ProblemSolving #CodingJourney #ContinuousLearning #TechSkills #Algorithm #DataStructures
09/07/24, 3:10 pm - Shivam Gurjar: class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        // Calculate the length of the list
        ListNode* temp = head;
        int length = 0;
        while (temp != nullptr) {
            length++;
            temp = temp->next;
        }

        // If the node to be removed is the head node
        if (n == length) {
            ListNode* nodeToDelete = head;
            head = head->next;
            delete nodeToDelete;
            return head;
        }

        // Find the node just before the one to be removed
        int stepsToMove = length - n;
10/07/24, 1:59 pm - Shivam Gurjar: तू तो मुझे हमेशा कहता है मै तेरे दिल के करीब हूँ
और जब हम तुझे बर्थड़े की पार्टी मांगने आते है
तो तू साले कहता है मै गरीब हूँ।
10/07/24, 3:04 pm - Shivam Gurjar: class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode newnode = new ListNode(0);
        ListNode q1 = newnode;
        while(list1!=null && list2!=null){
            if(list1.val<list2.val){
                q1.next=list1;
                list1=list1.next;
            }
            else{
                q1.next=list2;
                list2=list2.next;
            }
            q1=q1.next;
        }
       if(list1==null){
        q1.next=list2;
       }
       if(list2==null){
        q1.next=list1;
       }
        return newnode.next;
    }
}
10/07/24, 3:09 pm - Shivam Gurjar: Sure, let's simulate the execution of the `mergeTwoLists` method step by step with `list1 = [1, 2, 3]` and `list2 = [1, 3, 4, 5, 6]` to understand how the merging works. Here's the pseudo run:

### Pseudo Run of `mergeTwoLists`

1. **Initialization**:
   - `newnode` is initialized as a dummy node with value 0.
   - `q1` is initialized to `newnode`, which will be used to build the merged list.

   ```java
   ListNode newnode = new ListNode(0);
   ListNode q1 = newnode;
   ```

2. **Iterate Through Lists**:
   - Both `list1` and `list2` are iterated simultaneously.
   - Compare the current nodes of `list1` and `list2`.
   - Append the smaller node to `q1.next` and move the respective list pointer forward.
   - Update `q1` to `q1.next` to move forward in the merged list.

   | Step | list1      | list2      | Action                        | q1.next | q1     |
   |------|------------|------------|-------------------------------|---------|--------|
   | 1    | [1, 2, 3]  | [1, 3, 4, 5, 6] | list1.val < list2.val         | 1       | 1      |
   | 2    | [2, 3]     | [1, 3, 4, 5, 6] | list1.val > list2.val         | 1       | 1 -> 1 |
   | 3    | [2, 3]     | [3, 4, 5, 6]    | list1.val < list2.val         | 1 -> 2  | 2      |
   | 4    | [3]        | [3, 4, 5, 6]    | list1.val == list2.val        | 1 -> 2  | 2 -> 3 |
   | 5    | [3]        | [4, 5, 6]       | list1.val < list2.val         | 1 -> 2 -> 3 | 3      |
   | 6    | []         | [4, 5, 6]       | list1 is null, list2 is not  | 1 -> 2 -> 3 | 3 -> 4 |
   | 7    | []         | [5, 6]          | list1 is null, list2 is not  | 1 -> 2 -> 3 -> 4 | 4      |
   | 8    | []         | [6]             | list1 is null, list2 is not  | 1 -> 2 -> 3 -> 4 -> 5 | 5      |
   | 9    | []         | []              | Both lists are null           | 1 -> 2 -> 3 -> 4 -> 5 -> 6 | 6      |

3. **Appending Remaining Elements**:
   - After exiting the while loop (when either `list1` or `list2` becomes null), append the remaining nodes of the non-empty list to `q1.next`.

   | Step | Action                        | q1.next |
   |------|-------------------------------|---------|
   | 6    | `q1.next = list2` (list2 is [4, 5, 6]) | 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 4 |
   | 7    | `q1.next = list2` (list2 is [5, 6])    | 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 5 |
   | 8    | `q1.next = list2` (list2 is [6])       | 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 6 |

4. **Return**:
   - Return `newnode.next`, which skips the dummy node and returns the head of the merged list.

   ```java
   return newnode.next; // Returns 1 -> 1 -> 2 -> 3 -> 3 -> 4 -> 5 -> 6
   ```

### Result of Pseudo Run:
The merged list from `list1 = [1, 2, 3]` and `list2 = [1, 3, 4, 5, 6]` is `[1, 1, 2, 3, 3, 4, 5, 6]`.

This pseudo run illustrates how the `mergeTwoLists` method merges two sorted linked lists into one sorted linked list efficiently. Each step ensures that the merged list (`q1`) is built correctly by comparing elements from `list1` and `list2` and appending them in ascending order.
10/07/24, 3:34 pm - Shivam Gurjar: #include <iostream>

struct ListNode {
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        if (list1 == nullptr) {
            return list2;
        }
        if (list2 == nullptr) {
            return list1;
        }
        
        if (list1->val < list2->val) {
            list1->next = mergeTwoLists(list1->next, list2);
            return list1;
        } else {
            list2->next = mergeTwoLists(list1, list2->next);
            return list2;
        }
    }
};

// Helper function to print the linked list
void printList(ListNode* head) {
    ListNode* current = head;
    while (current != nullptr) {
        std::cout << current->val << " ";
        current = current->next;
    }
    std::cout << std::endl;
}

int main() {
    // Example usage
    ListNode* list1 = new ListNode(1);
    list1->next = new ListNode(3);
    list1->next->next = new ListNode(5);

    ListNode* list2 = new ListNode(2);
    list2->next = new ListNode(4);
    list2->next->next = new ListNode(6);

    Solution solution;
    ListNode* merged = solution.mergeTwoLists(list1, list2);

    std::cout << "Merged List: ";
    printList(merged);

    return 0;
}
10/07/24, 3:43 pm - Shivam Gurjar: 🎉 Day 3 of #100DaysOfLeetCode: Solving LeetCode Problem #21 - Merge Two Sorted Lists 🧩

Today, I tackled the classic problem of merging two sorted linked lists into one sorted list. 📝

Problem Overview:
You're given the heads of two sorted linked lists list1 and list2. The task is to merge the two lists into one sorted list by splicing together the nodes of the first two lists.

Solution Approach:
I used a recursive approach to solve this problem in C++. Here’s a breakdown of the method:

Base Cases:

If list1 is nullptr, return list2.
If list2 is nullptr, return list1.
Recursive Case:

Compare the values at the heads of list1 and list2.
If list1->val < list2->val, set list1->next to the merged result of list1->next and list2, then return list1.
Otherwise, set list2->next to the merged result of list1 and list2->next, then return list2.
10/07/24, 3:46 pm - Shivam Gurjar: 🎉 Day 3 of #100DaysOfLeetCode: Solved "Merge Two Sorted Lists"!

I used C++, recursion, and backtracking to merge two sorted linked lists. Here’s the solution:
10/07/24, 3:48 pm - Shivam Gurjar: 🎉 Day 3 of #100DaysOfLeetCode: Solved "Merge Two Sorted Lists" using C++, recursion, and backtracking!
10/07/24, 8:44 pm - Shivam Gurjar: https://github.com/emmit02/Networking
11/07/24, 12:52 am - Shivam Gurjar: https://imgs.search.brave.com/XyTD9xtzWC0mHojLAxTXUuZpX5MwgIFh88wVH7fSccU/rs:fit:500:0:0:0/g:ce/aHR0cHM6Ly9jZG4u/c2FuaXR5LmlvL2lt/YWdlcy9ueXloYWxq/dy9wcm9kdWN0aW9u/LzhkMTIwZDczZmZl/NjJiMjI5ZWNmNGFl/OWJlOTBjYmQ4ZTQy/NWM1YmQtMTkzNHgx/MDM2LnBuZz9yZWN0/PTAsMCwxODQyLDEw/MzYmdz0xNjAwJmg9/OTAwJnE9ODAmYXV0/bz1mb3JtYXQ
11/07/24, 3:58 pm - Shivam Gurjar: 🚀 Solved another interesting problem on LeetCode! 🚀

Problem: Reverse the substrings in parentheses.

Solution:
I approached this by using a stack to keep track of the indices where each parenthesis starts. For each closing parenthesis, I used the stack to find the corresponding opening parenthesis and reversed the substring between them.

Here's the core idea:

Push the index of each '(' onto the stack.
On encountering a ')', pop from the stack to get the start index and reverse the substring.
Collect the characters to form the final result.
11/07/24, 4:00 pm - Shivam Gurjar: Add Two Numbers
Problem: Add two numbers represented by linked lists where each node contains a single digit, and the digits are stored in reverse order.

Solution: I used a dummy node to handle the sum and managed the carry-over during the addition process. By iterating through the linked lists, we summed corresponding nodes and carried over values exceeding 10.
15/07/24, 2:35 pm - Shivam Gurjar: class MyStack {
public:

    queue<int> q;
    MyStack() {
        
    }
    
    void push(int x) {
        int size = q.size();
        q.push(x);

        for(int i =0; i<size; i++){
            q.push(q.front());
            q.pop();
        }
    }
    
    int pop() {
        if(q.empty()){
            cout<<"stack is empty \n";
        }
        int top = q.front();
        q.pop();
        return top;
    }
    
    int top() {
        if(q.empty()){
            cout<<"Stack is empty /n";
            return -1;
        }
        return q.front();
    }
    
    bool empty( ) {
        return q.empty();
    }
};
17/07/24, 11:18 pm - Shivam Gurjar: using jwt  we send request to server then server ask you are you then you gave details then server matches yes you are verified then server send a string that is created using jwt and this string created by jwt will be store at the browser as a cookie then if user again ask for data then this stiring with data will be sent to server and server matches this string and sendthe data and do not ask agin for login
20/07/24, 10:51 am - Shivam Gurjar: <Media omitted>
20/07/24, 11:38 pm - Shivam Gurjar: suppose V is finite dimensional and U is subspace of V. Show that U=V if and only if U° ={0}
ChatGPT
To prove that 
𝑈
=
𝑉
U=V if and only if 
𝑈
∘
=
{
0
}
U 
∘
 ={0}, let's consider the definitions and properties of subspaces and orthogonal complements in finite-dimensional vector spaces.

Definitions:

Let 
𝑉
V be a finite-dimensional vector space.
𝑈
U is a subspace of 
𝑉
V.
𝑈
∘
U 
∘
  (the orthogonal complement of 
𝑈
U in 
𝑉
V) is defined as the set of all vectors in 
𝑉
V that are orthogonal to every vector in 
𝑈
U.
Proof:
(1) If 
𝑈
=
𝑉
U=V, then 
𝑈
∘
=
{
0
}
U 
∘
 ={0}.
Assume 
𝑈
=
𝑉
U=V.
By definition, 
𝑈
∘
=
{
𝑣
∈
𝑉
∣
∀
𝑢
∈
𝑈
,
⟨
𝑣
,
𝑢
⟩
=
0
}
U 
∘
 ={v∈V∣∀u∈U,⟨v,u⟩=0}.
Since 
𝑈
=
𝑉
U=V, every vector 
𝑢
u in 
𝑈
U is also in 
𝑉
V.
For any 
𝑣
∈
𝑈
∘
v∈U 
∘
 , we must have 
⟨
𝑣
,
𝑢
⟩
=
0
⟨v,u⟩=0 for all 
𝑢
∈
𝑉
u∈V.
The only vector that is orthogonal to every vector in 
𝑉
V is the zero vector 
0
0.
Therefore, 
𝑈
∘
=
{
0
}
U 
∘
 ={0}.
(2) If 
𝑈
∘
=
{
0
}
U 
∘
 ={0}, then 
𝑈
=
𝑉
U=V.
Assume 
𝑈
∘
=
{
0
}
U 
∘
 ={0}.
By the dimension theorem for orthogonal complements in finite-dimensional spaces, we have 
dim
⁡
(
𝑉
)
=
dim
⁡
(
𝑈
)
+
dim
⁡
(
𝑈
∘
)
dim(V)=dim(U)+dim(U 
∘
 ).
Since 
𝑈
∘
=
{
0
}
U 
∘
 ={0}, we have 
dim
⁡
(
𝑈
∘
)
=
0
dim(U 
∘
 )=0.
Therefore, 
dim
⁡
(
𝑉
)
=
dim
⁡
(
𝑈
)
+
0
dim(V)=dim(U)+0 which simplifies to 
dim
⁡
(
𝑉
)
=
dim
⁡
(
𝑈
)
dim(V)=dim(U).
𝑈
U is a subspace of 
𝑉
V with the same dimension as 
𝑉
V.
In a finite-dimensional vector space, a subspace that has the same dimension as the vector space itself must be the entire vector space.
Therefore, 
𝑈
=
𝑉
U=V.
Conclusion:
We have shown both directions:

If 
𝑈
=
𝑉
U=V, then 
𝑈
∘
=
{
0
}
U 
∘
 ={0}.
If 
𝑈
∘
=
{
0
}
U 
∘
 ={0}, then 
𝑈
=
𝑉
U=V.
Thus, 
𝑈
=
𝑉
U=V if and only if 
𝑈
∘
=
{
0
}
U 
∘
 ={0}.

what is orthogonal complement
ChatGPT
The orthogonal complement of a subspace 
𝑈
U in a finite-dimensional vector space 
𝑉
V, denoted by 
𝑈
∘
U 
∘
 , is the set of all vectors in 
𝑉
V that are orthogonal to every vector in 
𝑈
U.

Definition
Formally, the orthogonal complement 
𝑈
∘
U 
∘
  is defined as:
𝑈
∘
=
{
𝑣
∈
𝑉
∣
⟨
𝑣
,
𝑢
⟩
=
0
 for all 
𝑢
∈
𝑈
}
U 
∘
 ={v∈V∣⟨v,u⟩=0 for all u∈U}
where 
⟨
⋅
,
⋅
⟩
⟨⋅,⋅⟩ denotes the inner product in the vector space 
𝑉
V.

Properties
Subspace: 
𝑈
∘
U 
∘
  is always a subspace of 
𝑉
V.

Dimension: If 
𝑉
V is finite-dimensional, then the dimensions of 
𝑈
U and 
𝑈
∘
U 
∘
  satisfy the following relationship:
dim
⁡
(
𝑈
)
+
dim
⁡
(
𝑈
∘
)
=
dim
⁡
(
𝑉
)
dim(U)+dim(U 
∘
 )=dim(V)

Orthogonality: Every vector in 
𝑈
∘
U 
∘
  is orthogonal to every vector in 
𝑈
U. Conversely, every vector in 
𝑈
U is orthogonal to every vector in 
𝑈
∘
U 
∘
 .

Double Orthogonal Complement: For any subspace 
𝑈
U of 
𝑉
V, the orthogonal complement of the orthogonal complement is the original subspace:
(
𝑈
∘
)
∘
=
𝑈
(U 
∘
 ) 
∘
 =U

Example
Consider 
𝑅
3
R 
3
  with the standard dot product as the inner product, and let 
𝑈
U be the subspace spanned by the vector 
𝑢
=
(
1
,
0
,
0
)
u=(1,0,0).

The orthogonal complement 
𝑈
∘
U 
∘
  consists of all vectors in 
𝑅
3
R 
3
  that are orthogonal to 
𝑢
u.

A vector 
𝑣
=
(
𝑣
1
,
𝑣
2
,
𝑣
3
)
v=(v 
1
​
 ,v 
2
​
 ,v 
3
​
 ) is orthogonal to 
𝑢
=
(
1
,
0
,
0
)
u=(1,0,0) if 
𝑢
⋅
𝑣
=
0
u⋅v=0. This gives:
(
1
,
0
,
0
)
⋅
(
𝑣
1
,
𝑣
2
,
𝑣
3
)
=
1
⋅
𝑣
1
+
0
⋅
𝑣
2
+
0
⋅
𝑣
3
=
𝑣
1
=
0
(1,0,0)⋅(v 
1
​
 ,v 
2
​
 ,v 
3
​
 )=1⋅v 
1
​
 +0⋅v 
2
​
 +0⋅v 
3
​
 =v 
1
​
 =0

Therefore, 
𝑣
1
=
0
v 
1
​
 =0, and the orthogonal complement 
𝑈
∘
U 
∘
  is the subspace of vectors of the form 
(
0
,
𝑣
2
,
𝑣
3
)
(0,v 
2
​
 ,v 
3
​
 ). This is the 
𝑦
𝑧
yz-plane in 
𝑅
3
R 
3
 , spanned by 
{
(
0
,
1
,
0
)
,
(
0
,
0
,
1
)
}
{(0,1,0),(0,0,1)}.

Thus, 
𝑈
∘
=
span
{
(
0
,
1
,
0
)
,
(
0
,
0
,
1
)
}
U 
∘
 =span{(0,1,0),(0,0,1)}.
20/07/24, 11:38 pm - Shivam Gurjar: https://chatgpt.com/share/71f8fc00-aaa9-4650-bb6c-2bdce6b4db30
20/07/24, 11:51 pm - Shivam Gurjar: <Media omitted>
20/07/24, 11:51 pm - Shivam Gurjar: <Media omitted>
23/07/24, 2:04 pm - Shivam Gurjar: <Media omitted>
23/07/24, 3:05 pm - Shivam Gurjar: <Media omitted>
23/07/24, 3:05 pm - Shivam Gurjar: <Media omitted>
23/07/24, 3:06 pm - Shivam Gurjar: <Media omitted>
23/07/24, 3:06 pm - Shivam Gurjar: <Media omitted>
24/07/24, 1:44 am - Shivam Gurjar: vector space
24/07/24, 1:22 pm - Shivam Gurjar: <Media omitted>
24/07/24, 1:23 pm - Shivam Gurjar: <Media omitted>
25/07/24, 9:38 pm - Shivam Gurjar: https://gokuto.watch/series/vikings-83698/3-5/
30/07/24, 7:17 am - Shivam Gurjar: <Media omitted>
03/08/24, 7:05 am - Shivam Gurjar: <Media omitted>
03/08/24, 7:05 am - Shivam Gurjar: <Media omitted>
07/08/24, 11:31 pm - Shivam Gurjar: Using the same system call interface for manipulating both files and devices in an operating system has several advantages and disadvantages. Here are some key points to consider:

Advantages:
Uniformity and Consistency:

A single, consistent interface simplifies the design and usage of the system. Developers only need to learn one set of system calls for handling both files and devices.
This uniformity reduces the likelihood of errors and makes the system easier to understand and use.
Code Reusability:

The same code can be reused for different types of input/output operations, leading to less duplication and more efficient maintenance.
It allows for leveraging existing file handling utilities and functions for device management.
Simplified API:

With a unified interface, the API for system calls becomes simpler. There is no need for separate sets of functions or methods for different types of I/O operations.
Simplifies documentation and learning curves for developers.
Flexibility:

Devices can be treated like files, allowing the use of familiar operations such as read, write, open, and close. This can make the system more flexible and adaptable to different use cases.
Enhances the ability to script or automate tasks that involve both files and devices.
Streamlined I/O Operations:

Streamlines the process of performing I/O operations, as the same methods can be applied across various types of devices and files.
Facilitates the development of generic I/O handling routines that can work with both files and devices.
Disadvantages:
Complexity in Implementation:

Implementing a unified interface can be complex, as it must handle the nuances and specific requirements of both file systems and various types of devices.
It can lead to a more complex kernel design, potentially increasing the likelihood of bugs and vulnerabilities.
Performance Overhead:

Generalizing the interface may introduce performance overhead, especially if special optimizations for specific devices are needed.
Uniform handling might not exploit the full performance potential of specialized devices.
Limited Functionality for Specific Devices:

A unified interface may not provide all the specialized functionality required for certain devices, leading to a less efficient or suboptimal use of those devices.
It might force the abstraction of device-specific features, which can reduce the ability to fully utilize device capabilities.
Security Concerns:

A single interface could expose more attack vectors if not carefully designed and implemented. It might be easier for an exploit in one area (e.g., file handling) to affect another area (e.g., device management).
Requires stringent security measures to ensure that the interface cannot be misused or exploited.
Difficulty in Error Handling:

Error handling can become more complicated as the system must distinguish between different types of errors that are relevant to files versus devices.
It might be challenging to provide clear and specific error messages or recovery mechanisms.
Conclusion:
Using the same system call interface for both files and devices offers significant benefits in terms of consistency, simplicity, and flexibility. However, it also introduces challenges related to complexity, performance, and security. The decision to use a unified interface should consider the specific needs and constraints of the operating system, balancing the advantages of a streamlined API against the potential drawbacks of implementing and maintaining such a system.
07/08/24, 11:35 pm - Shivam Gurjar: que
07/08/24, 11:35 pm - Shivam Gurjar: what are advantages of inter process communication? how communication take place in shared memory enviroment
ChatGPT
Advantages of Inter-Process Communication (IPC)
Inter-Process Communication (IPC) is a mechanism that allows processes to communicate and synchronize their actions. Here are some key advantages:

Data Sharing:

IPC enables processes to share data and resources efficiently. This is essential for applications where multiple processes need to work on the same data or resources.
Modularity:

By allowing separate processes to communicate, IPC supports modular design. Different components of an application can run as separate processes, improving maintainability and scalability.
Resource Utilization:

Processes can coordinate and share resources such as memory, CPU, and I/O devices, leading to more efficient resource utilization.
Concurrency:

IPC facilitates concurrent execution of processes, which can enhance performance, especially on multi-core systems. Processes can execute in parallel and synchronize when needed.
Separation of Concerns:

IPC allows different processes to handle different tasks independently, adhering to the principle of separation of concerns. This can lead to cleaner, more organized code.
Fault Isolation:

Isolating processes can improve the robustness of an application. If one process fails, it doesn't necessarily affect other processes, making the system more resilient to errors.
Security:

IPC mechanisms can include security features that control access to shared resources, ensuring that only authorized processes can communicate or share data.
Communication in Shared Memory Environment
Shared memory is one of the fastest forms of IPC, as it allows multiple processes to access the same memory space. Here’s how communication typically takes place in a shared memory environment:

Setup:

Memory Allocation: One process creates a shared memory segment using system calls (e.g., shmget in Unix/Linux).
Memory Attachment: Other processes attach to the shared memory segment using system calls (e.g., shmat).
Data Communication:

Writing to Shared Memory: A process can write data to the shared memory segment.
Reading from Shared Memory: Other processes can read the data from the shared memory segment.
Synchronization:

Mutual Exclusion: To prevent data corruption due to concurrent access, synchronization mechanisms like semaphores, mutexes, or spinlocks are used.
Condition Variables: These can be used to notify processes about changes in the shared memory segment.
Detachment and Cleanup:

Memory Detachment: Once communication is complete, processes detach from the shared memory segment using system calls (e.g., shmdt).
Memory Deallocation: Finally, the shared memory segment is destroyed using system calls (e.g., shmctl).
08/08/24, 7:03 am - Shivam Gurjar: <Media omitted>
08/08/24, 7:03 am - Shivam Gurjar: <Media omitted>
12/08/24, 2:05 pm - Shivam Gurjar: <Media omitted>
12/08/24, 2:06 pm - Shivam Gurjar: <Media omitted>
12/08/24, 2:08 pm - Shivam Gurjar: <Media omitted>
12/08/24, 2:11 pm - Shivam Gurjar: <Media omitted>
12/08/24, 2:12 pm - Shivam Gurjar: <Media omitted>
12/08/24, 2:14 pm - Shivam Gurjar: <Media omitted>
12/08/24, 2:17 pm - Shivam Gurjar: <Media omitted>
12/08/24, 2:17 pm - Shivam Gurjar: <Media omitted>
12/08/24, 2:17 pm - Shivam Gurjar: <Media omitted>
12/08/24, 2:20 pm - Shivam Gurjar: <Media omitted>
12/08/24, 2:23 pm - Shivam Gurjar: <Media omitted>
13/08/24, 7:02 am - Shivam Gurjar: <Media omitted>
13/08/24, 7:02 am - Shivam Gurjar: <Media omitted>
13/08/24, 10:30 pm - Shivam Gurjar: <Media omitted>
13/08/24, 10:30 pm - Shivam Gurjar: Today, I tackled the "Pow(x, n)" problem, where the goal is to compute 
𝑥
𝑛
x 
n
  efficiently. Instead of a straightforward iterative approach, I leveraged the Exponentiation by Squaring method, which significantly reduces the time complexity to 
𝑂
(
log
⁡
𝑛
)
O(logn).

In my solution, I handled edge cases such as negative exponents by converting the problem into its reciprocal form. Using an iterative loop, I ensured that the calculation remains efficient, even for large values of 
𝑛
n. This approach avoids the overhead of recursion, making the algorithm both time and space-efficient.
13/08/24, 10:32 pm - Shivam Gurjar: ✅ Day 36 of hashtag#100DaysOfLeetCode

🚀 Problem : #703. Kth Largest Element in a Stream

hashtag#Leetcode hashtag#100DaysOfCode hashtag#ProblemSolving hashtag#Backtracking hashtag#Programming
13/08/24, 10:33 pm - Shivam Gurjar: 50. Pow(x, n)
16/08/24, 3:15 pm - Shivam Gurjar: striver sde sheet
17/08/24, 5:56 pm - Shivam Gurjar: <Media omitted>
17/08/24, 6:02 pm - Shivam Gurjar: <Media omitted>
17/08/24, 6:05 pm - Shivam Gurjar: <Media omitted>
17/08/24, 6:09 pm - Shivam Gurjar: <Media omitted>
17/08/24, 6:41 pm - Shivam Gurjar: <Media omitted>
20/08/24, 10:00 pm - Shivam Gurjar: sakshi raut ieee
22/08/24, 11:44 pm - Shivam Gurjar: https://leetcode.com/u/dheerajgurjar55556/
23/08/24, 8:47 am - Shivam Gurjar: Fitgirl
23/08/24, 8:47 am - Shivam Gurjar: Dodi repack
24/08/24, 10:14 am - Shivam Gurjar: In Python, a `Queue` is a data structure that follows the First-In-First-Out (FIFO) principle. Python’s `queue` module provides three types of queue classes: `Queue` (FIFO), `LifoQueue` (LIFO stack), and `PriorityQueue`. 

Here, I'll focus on the `Queue` class, which is the FIFO queue. 

### **Queue Class Methods**

- **`put(item)`**: Adds `item` to the queue. If the queue is full, it will wait until a free slot is available (blocking mode).
  
- **`get()`**: Removes and returns an item from the queue. If the queue is empty, it will wait until an item is available (blocking mode).
  
- **`qsize()`**: Returns the approximate size of the queue. Not reliable in multi-threaded environments.
  
- **`empty()`**: Returns `True` if the queue is empty, `False` otherwise.
  
- **`full()`**: Returns `True` if the queue is full, `False` otherwise.
  
- **`put_nowait(item)`**: Equivalent to `put(item, block=False)`. Raises `queue.Full` exception if the queue is full.
  
- **`get_nowait()`**: Equivalent to `get(block=False)`. Raises `queue.Empty` exception if the queue is empty.

### **Example Program Using `Queue`**

```python
import queue

# Create a FIFO Queue
q = queue.Queue()

# Add items to the queue using put()
q.put(10)
q.put(20)
q.put(30)

# Get and print items from the queue using get()
print(f"First item: {q.get()}")  # Outputs: 10
print(f"Second item: {q.get()}") # Outputs: 20

# Check if the queue is empty or not
print(f"Is the queue empty? {q.empty()}")  # Outputs: False

# Get the next item from the queue
print(f"Third item: {q.get()}")  # Outputs: 30

# Check again if the queue is empty
print(f"Is the queue empty? {q.empty()}")  # Outputs: True

# Attempt to get an item from an empty queue using get_nowait()
try:
    q.get_nowait()  # This will raise queue.Empty exception
except queue.Empty:
    print("Queue is empty!")
```

### **Explanation**:

1. **Create Queue**: 
   - `q = queue.Queue()` creates an empty FIFO queue.

2. **Add Items**: 
   - `q.put(10)` adds the integer `10` to the queue. The same goes for `20` and `30`.

3. **Retrieve Items**:
   - `q.get()` removes and returns the first item in the queue (FIFO order). In this case, it returns `10`, then `20`, then `30`.

4. **Check Queue Status**:
   - `q.empty()` returns `True` if the queue is empty, `False` otherwise.

5. **Exception Handling**:
   - `q.get_nowait()` attempts to retrieve an item without blocking. If the queue is empty, it raises a `queue.Empty` exception, which is caught in the `try-except` block.

### **Queue Example in Multi-threading Context**

Queues are especially useful in multi-threaded programs to safely communicate between threads. Here's a basic example:

```python
import threading
import queue

# Function to perform in each thread
def worker(q):
    while not q.empty():
        item = q.get()
        print(f"Processing item: {item}")
        q.task_done()

# Create a queue and add some items
q = queue.Queue()
for item in range(5):
    q.put(item)

# Create and start multiple threads
threads = []
for i in range(3):
    t = threading.Thread(target=worker, args=(q,))
    t.start()
    threads.append(t)

# Wait for all threads to complete processing
for t in threads:
    t.join()

print("All items have been processed.")
```

### **Explanation**:
- **Queue as a Buffer**: The queue acts as a thread-safe buffer between the main thread and the worker threads.
- **Multi-threading**: Multiple threads are created to process items in the queue concurrently.
- **Thread-safe Operations**: The `queue.Queue` ensures that the `put()` and `get()` operations are thread-safe, so you don't need to worry about race conditions when accessing the queue from multiple threads.
25/08/24, 11:18 pm - Shivam Gurjar: To create a mobile application that connects farmers directly with consumers and retailers, here’s a step-by-step approach you can follow:

1. Market Research and Requirement Gathering
Understand User Needs: Conduct surveys or interviews with farmers, consumers, and retailers to understand their needs, pain points, and expectations from the app.
Analyze Competitors: Look into existing platforms (if any) that serve similar purposes to identify gaps and opportunities for innovation.
2. Define Key Features
User Registration & Profiles:
Farmers can create profiles to list their produce.
Consumers and retailers can create profiles to browse and purchase products.
Product Listing:
Farmers can list their produce with details like quantity, price, and availability.
Option to upload images and descriptions of the products.
Search & Filter:
Allow consumers to search for specific products and filter results based on location, price, quantity, etc.
Price Negotiation:
Implement a chat or messaging feature where buyers and sellers can negotiate prices directly.
Option to accept, reject, or counteroffer bids.
Transaction Management:
Integration of a secure payment gateway for handling transactions.
Order tracking and management for both sellers and buyers.
Review & Rating System:
Allow consumers to rate and review products and sellers.
Farmers can also rate buyers to ensure fair dealings.
Logistics Support:
Partner with logistics providers for delivery services.
Farmers can choose delivery options or pick-up points.
Notifications & Alerts:
Push notifications for new orders, messages, and offers.
Alerts for payment due dates, low inventory, etc.
Language Support:
Multi-language support to cater to farmers and consumers from different regions.
Offline Functionality:
Allow farmers to manage listings and check orders even with limited internet connectivity.
3. Technology Stack
Frontend:
Mobile App: Use Flutter (since you are familiar) to build cross-platform mobile applications for Android and iOS.
Backend:
Node.js for handling the server-side logic and RESTful APIs.
Database: Use Firebase or MongoDB for real-time database management.
Payment Integration:
Use a payment gateway like Stripe, Razorpay, or PayPal to handle transactions.
Messaging:
Implement WebSockets (like Socket.io) for real-time chat features.
Cloud Services:
Use AWS or Google Cloud for hosting and additional services like storage, push notifications, and analytics.
4. Design the User Interface (UI)
User-Centric Design: Create an intuitive and simple UI that caters to both tech-savvy and non-tech-savvy users.
Wireframes and Prototypes: Design wireframes and prototypes to visualize the app flow and user experience.
5. Development Phase
Build MVP (Minimum Viable Product):
Start by building a basic version of the app with essential features like user registration, product listing, and simple transactions.
Iterative Development:
Continuously improve the app based on user feedback and testing. Add advanced features like negotiation, reviews, and logistics integration in subsequent updates.
6. Testing
User Acceptance Testing (UAT):
Conduct testing sessions with real users (farmers and consumers) to gather feedback.
Performance Testing:
Ensure the app performs well under different conditions, especially in areas with poor internet connectivity.
Security Testing:
Test for vulnerabilities, especially in transaction management and data handling.
7. Launch and Deployment
Launch: Deploy the app on Google Play Store and Apple App Store.
Marketing: Create awareness through digital marketing, social media, and collaborations with agricultural cooperatives or government bodies.
8. Post-Launch Support
Continuous Feedback Loop: Gather ongoing feedback from users to refine and improve the app.
Regular Updates: Add new features, fix bugs, and improve the user experience based on feedback and changing market needs.
9. Scalability and Expansion
Scaling Infrastructure:
As the user base grows, scale your backend infrastructure to handle increased load.
Expand to Other Regions:
Once the app is successful in one region, consider expanding to other regions or even countries.
This roadmap will help you build a robust and user-friendly platform that empowers farmers and enhances their income potential by reducing reliance on middlemen.
27/08/24, 8:53 am - Shivam Gurjar: Indian farmers face several challenges when trying to connect directly with buyers, including consumers and retailers:

Lack of Digital Literacy: Many farmers, especially in rural areas, have limited access to and understanding of digital platforms. This makes it difficult for them to use online marketplaces or apps to connect with buyers.

Infrastructure Issues: Poor internet connectivity and lack of reliable transportation infrastructure in rural areas can hinder direct communication and delivery logistics between farmers and buyers.

Trust Issues: There is often a lack of trust between farmers and buyers due to the absence of a middleman who usually facilitates transactions and ensures that both parties fulfill their obligations.

Price Negotiation: Farmers may struggle with price negotiation when dealing directly with buyers, as they might lack the market knowledge or bargaining power that intermediaries usually provide.

Regulatory Barriers: Certain regulations and market structures in India may require farmers to sell their produce through government-regulated markets (mandis), limiting their ability to engage directly with buyers.

Lack of Market Information: Farmers may not have access to real-time market data, making it challenging to set competitive prices or understand market demand trends.

Quality and Standards Compliance: Direct buyers, especially retailers, may require produce to meet specific quality standards, which farmers may find difficult to meet consistently without proper training or resources.

Financial Constraints: Many farmers may lack the financial resources to invest in the technology or logistics required to facilitate direct sales to buyers, such as packaging, transportation, or online transaction platforms.

Cultural and Language Barriers: Differences in language, cultural practices, and business etiquette can also create communication challenges between farmers and buyers from different regions.

Supply Chain Management: Managing inventory, ensuring timely delivery, and maintaining product quality during transportation can be challenging for farmers without the support of established supply chain networks.
27/08/24, 8:56 am - Shivam Gurjar: To address the challenges Indian farmers face in connecting directly with buyers, here are some unique and convincing solutions:

1. Localized Digital Literacy Programs
Solution: Implement mobile-based digital literacy programs tailored specifically for farmers, using regional languages and simple interfaces. These programs can be delivered through SMS, voice messages, or community radio, teaching farmers how to use digital platforms effectively.
Benefit: This empowers farmers with the knowledge to use digital tools for direct sales, boosting their confidence and participation in online markets.
2. Hybrid Digital-Physical Marketplace
Solution: Create a hybrid marketplace where farmers can bring their produce to a local collection center equipped with digital kiosks. These centers can help farmers list their products online, with support staff aiding in price negotiation and logistics.
Benefit: This bridges the gap between traditional and digital sales methods, ensuring farmers who are less tech-savvy can still benefit from direct sales.
3. Blockchain-Based Trust System
Solution: Develop a blockchain-based platform that records every transaction between farmers and buyers, ensuring transparency and building trust. The platform can also include smart contracts that automatically release payments once certain conditions are met, such as delivery and quality checks.
Benefit: This solution eliminates trust issues by ensuring secure, transparent, and tamper-proof transactions, giving farmers and buyers confidence in the process.
4. AI-Driven Market Insights
Solution: Offer an AI-powered tool that provides farmers with real-time market insights, including demand forecasts, optimal pricing, and consumer trends. The tool can be accessed via a simple mobile app and tailored to individual farmers' produce and region.
Benefit: Farmers can make informed decisions about pricing and crop selection, maximizing their profits and reducing the risk of unsold produce.
5. Decentralized Logistics Network
Solution: Establish a decentralized logistics network where local entrepreneurs use electric vehicles to pick up produce from farmers and deliver it to buyers. Farmers can schedule pickups via a mobile app, and the network can be managed through a community-owned cooperative.
Benefit: This reduces transportation costs, ensures timely deliveries, and creates additional income opportunities for local communities.
6. Quality Assurance Through Mobile Labs
Solution: Deploy mobile quality assurance labs that visit farms to test and certify the quality of produce before it is listed for sale. These labs can issue digital certificates that buyers can trust, reducing the need for intermediaries.
Benefit: Farmers can sell their produce at higher prices by proving its quality upfront, while buyers gain confidence in the products they purchase.
7. Gamified Price Negotiation Platform
Solution: Develop a gamified price negotiation platform where farmers and buyers can engage in a bidding process. The platform could include features like “price match challenges” or “bonus rewards” for fair trade practices, making the negotiation process more engaging and transparent.
Benefit: This makes price negotiation more accessible and fair, especially for farmers who might lack strong bargaining skills.
8. Localized E-commerce Hubs
Solution: Create localized e-commerce hubs where farmers can aggregate their produce for bulk sales. These hubs can be managed by local farmer cooperatives, with the infrastructure to support online listings, packaging, and shipping.
Benefit: Farmers can access larger markets and benefit from economies of scale, while buyers enjoy a consistent supply of high-quality produce.
9. Culturally Customized Communication Tools
Solution: Develop communication tools that incorporate local languages, cultural norms, and traditional business practices. These tools can be integrated into existing messaging apps or social media platforms that farmers already use.
Benefit: This ensures that communication between farmers and buyers is smooth and effective, minimizing misunderstandings and fostering stronger relationships.
10. Microfinance-Linked Digital Platforms
Solution: Partner with microfinance institutions to offer farmers access to credit directly through digital platforms. This could include low-interest loans for purchasing technology or improving their supply chain, with repayments linked to successful sales.
Benefit: Farmers gain the financial resources needed to invest in direct sales initiatives, helping them break free from dependence on middlemen.
These solutions aim to empower farmers, enhance transparency, and build trust, all while leveraging technology in a way that respects and adapts to the local context.
27/08/24, 9:43 am - Shivam Gurjar: If you already know Node.js, learning the basics of blockchain to implement a project for a hackathon can take anywhere from a few days to a couple of weeks, depending on the complexity of the project and your prior experience with similar technologies. Here's a breakdown:

### **1. Core Blockchain Concepts (1-2 Days)**
   - **Understanding Blockchain:** Learn the fundamentals—blocks, chains, hashes, consensus mechanisms, and smart contracts.
   - **Hands-On Implementation:** Build a simple blockchain in Node.js, like the one I described earlier.

### **2. Advanced Concepts (3-5 Days)**
   - **Consensus Algorithms:** Explore Proof of Work (PoW), Proof of Stake (PoS), or others relevant to your project.
   - **Smart Contracts:** Learn about deploying and interacting with smart contracts, possibly using Ethereum and Solidity.
   - **Networking:** Understand peer-to-peer networks and how nodes communicate within a blockchain network.

### **3. Project-Specific Skills (2-5 Days)**
   - **Frameworks and Libraries:** Get familiar with any specific frameworks, such as Hyperledger Fabric or Truffle Suite for Ethereum development.
   - **APIs and Integration:** Learn how to integrate your blockchain with frontend or other systems using Node.js.

### **4. Testing and Deployment (1-3 Days)**
   - **Testing:** Write tests for your blockchain to ensure it works as expected.
   - **Deployment:** Deploy your blockchain or decentralized application (dApp) to a testnet or a private network.

### **Total Time Estimate: 1-2 Weeks**
   - **Basic Implementation
27/08/24, 9:48 am - Shivam Gurjar: Blockchain is considered highly secure due to several key principles and mechanisms that ensure the integrity, transparency, and immutability of data. Here’s why blockchain is secure:

### 1. **Decentralization**
   - **No Central Authority:** Blockchain operates on a decentralized network of nodes (computers), each holding a copy of the entire blockchain. This decentralization means there is no single point of failure, making it difficult for any single entity to manipulate the data.
   - **Consensus Mechanisms:** Decisions about which transactions to add to the blockchain are made collectively by the nodes through consensus algorithms like Proof of Work (PoW) or Proof of Stake (PoS), ensuring that only valid transactions are recorded.

### 2. **Cryptographic Hashing**
   - **Hash Functions:** Each block in a blockchain contains a cryptographic hash of the previous block, a unique identifier for the block’s data. This hashing ensures that even a small change in the block’s data will produce a completely different hash.
   - **Chain Integrity:** Because each block is linked to the previous one via its hash, altering any block’s data would require recalculating the hashes of all subsequent blocks, which is computationally impractical, especially in a large blockchain.

### 3. **Immutability**
   - **Irreversible Transactions:** Once a transaction is added to the blockchain, it is practically impossible to alter or delete it. This immutability ensures the integrity of the data, as any attempt to tamper with the data would be immediately obvious.
   - **Tamper Resistance:** Since altering a block would require changing all subsequent blocks (due to the hash links), and obtaining consensus from the majority of the network, it’s nearly impossible to tamper with the blockchain without being detected.

### 4. **Transparency and Auditability**
   - **Public Ledger:** In public blockchains, all transactions are visible to everyone, providing transparency. This openness allows anyone to verify the authenticity of transactions.
   - **Audit Trail:** Blockchain provides a complete and traceable record of all transactions from the genesis block (the first block) to the latest one, making it easy to audit and verify.

### 5. **Consensus Mechanisms**
   - **Proof of Work (PoW):** In PoW, nodes (miners) compete to solve a complex mathematical problem to validate transactions and add them to the blockchain. This process is energy-intensive, making it expensive to alter the blockchain.
   - **Proof of Stake (PoS):** In PoS, validators are chosen based on the amount of cryptocurrency they hold and are willing to "stake." This reduces the likelihood of malicious behavior since validators have a vested interest in maintaining the blockchain’s integrity.

### 6. **Distributed and Redundant Storage**
   - **Multiple Copies:** Since each node has a copy of the entire blockchain, it’s extremely difficult for an attacker to alter the blockchain across all nodes. An attack would require controlling more than 50% of the network’s computational power or stake (known as a 51% attack), which is highly unlikely in large, well-established blockchains.

### 7. **Smart Contract Security**
   - **Automated and Self-Executing:** Smart contracts are automated agreements written in code that execute when predefined conditions are met. They reduce human error and the possibility of tampering.
   - **Immutable Code:** Once deployed on the blockchain, the code of smart contracts cannot be changed, ensuring that the contract's terms cannot be altered after deployment.

### 8. **Peer-to-Peer Network**
   - **No Single Point of Attack:** The peer-to-peer nature of blockchain means that there’s no central server to attack. Instead, data is distributed across all nodes, making it resilient to Distributed Denial of Service (DDoS) attacks.

These factors combined make blockchain an exceptionally secure technology, suitable for applications that require high levels of trust, transparency, and data integrity, such as cryptocurrencies, supply chain management, and secure voting systems.
27/08/24, 9:49 am - Shivam Gurjar: Implementing all the security features of a blockchain in a few weeks, even with your knowledge of Node.js, is ambitious but possible if you focus on a simplified version of each concept. Here's how you can approach it:

### **1. Decentralization**
   - **Simplified Approach:** You can create a peer-to-peer network using libraries like `socket.io` for Node.js to simulate decentralization. Each node in your network can hold a copy of the blockchain.
   - **Implementation Time:** 3-5 days

### **2. Cryptographic Hashing**
   - **Simplified Approach:** Use Node.js's built-in `crypto` module to implement SHA-256 hashing for each block. This is straightforward and essential for linking blocks securely.
   - **Implementation Time:** 1-2 days

### **3. Immutability**
   - **Simplified Approach:** Ensure each block contains the hash of the previous block. This can be done with the basic blockchain implementation, which enforces immutability by design.
   - **Implementation Time:** 1-2 days (as part of cryptographic hashing)

### **4. Transparency and Auditability**
   - **Simplified Approach:** Implement a simple API using Node.js and Express to allow users to query the blockchain. This makes the chain's data transparent and auditable.
   - **Implementation Time:** 2-3 days

### **5. Consensus Mechanisms**
   - **Simplified Approach:** Implement a basic Proof of Work (PoW) algorithm. It doesn’t need to be as complex as Bitcoin's, just enough to demonstrate the concept.
   - **Implementation Time:** 3-5 days

### **6. Distributed and Redundant Storage**
   - **Simplified Approach:** Ensure each peer in your network stores a copy of the blockchain. Implement basic network communication to keep these copies in sync.
   - **Implementation Time:** 2-4 days (integrated with decentralization)

### **7. Smart Contract Security**
   - **Simplified Approach:**
27/08/24, 2:11 pm - Shivam Gurjar: <Media omitted>
29/08/24, 10:01 am - Shivam Gurjar: It seems there was an issue generating the image. However, I can describe how you might visualize this process so you can create it using design tools like Figma, Canva, or any other diagramming software:

### Visualization of the Authentication Process:

1. **User Inputs Aadhar Card Number**
   - **Icon/Graphic**: A user icon with a text field labeled "Aadhar Number".
   - **Text**: "User inputs Aadhar card number."

2. **System Checks Aadhar Number**
   - **Icon/Graphic**: A database icon with a magnifying glass over it.
   - **Text**: "System checks if the Aadhar number exists in the database."

3. **OTP Sent to Registered Phone**
   - **Icon/Graphic**: A smartphone with an SMS notification bubble.
   - **Text**: "If Aadhar number is valid, an OTP is sent to the registered phone number."

4. **User Enters OTP**
   - **Icon/Graphic**: A keypad icon or an OTP input field.
   - **Text**: "User enters the OTP received."

5. **System Verifies OTP**
   - **Icon/Graphic**: A shield or checkmark icon indicating verification.
   - **Text**: "System verifies the OTP."

6. **JWT Issuance**
   - **Icon/Graphic**: A document with a key or a token symbol.
   - **Text**: "Upon successful verification, a JWT token is generated and sent to the user."

### Layout and Style:
- **Flowchart Arrows**: Connect each of these icons/graphics with arrows to show the flow of the process.
- **Color Scheme**: Use different colors for each step to distinguish them clearly, with the final step (JWT issuance) in a more prominent color (like green) to signify completion.
- **Background**: Keep it neutral (like light grey or white) so the flowchart is the main focus.

You can easily put this together in any design software, using these descriptions as a guide for the icons and layout.
29/08/24, 11:35 am - Shivam Gurjar: Client Request --> Node.js Server --> Firebase Authentication --> JWT Token --> Token Storage --> Secure Endpoint --> Token Verification
29/08/24, 11:53 am - Shivam Gurjar: <Media omitted>
29/08/24, 12:30 pm - Shivam Gurjar: +-----------------------------+
|         Start Auction        |
|       (Node.js Server)       |
+-----------------------------+
              |
              v
+-----------------------------+
|       Initialize Auction     |
|  (Set Duration, Items, etc.) |
|   (Database: Firebase/SQL)   |
+-----------------------------+
              |
              v
+-----------------------------+
|        Open WebSocket       |
|  (Real-Time Communication)  |
|    (Socket.io or Firebase)  |
+-----------------------------+
              |
              v
+-----------------------------+           +-----------------------------+
|     Wait for Bidders to     | <-------  |   New Bidder Joins Auction   |
|         Join Auction        |           |   (Connect WebSocket/RTDB)   |
+-----------------------------+           +-----------------------------+
              |                                   |
              v                                   v
+-----------------------------+           +-----------------------------+
|        Broadcast Current     |           |   Synchronize Auction State |
|     Auction State to All     | <-------  |  (Send Current Bids, Timer) |
|         Connected Users      |           +-----------------------------+
|     (Socket.io/Firebase RTDB)|
+-----------------------------+
              |
              v
+-----------------------------+           +-----------------------------+
|       Wait for Bids from     | <-------  |     Bid Submission by       |
|      Connected Users         |           |       Buyer (WebSocket)     |
|    (Process Real-Time Bids)  |           |  (Validate & Update Bid)    |
+-----------------------------+           +-----------------------------+
              |                                   |
              v                                   v
+-----------------------------+           +-----------------------------+
|  Update Highest Bid & Notify |           |  Notify Bidder of Success   |
|    All Connected Users       |           |   or Failure (WebSocket)    |
|    (Real-Time Updates)       |           +-----------------------------+
|     (Socket.io/Firebase RTDB)|
+-----------------------------+
              |
              v
+-----------------------------+           +-----------------------------+
|  Auction Timer Expiry Check | <-------  |      Late Bidder Joins       |
|   (Check for Soft Close,    |           |     (Connect WebSocket)      |
|   Extend Timer if Necessary)|           +-----------------------------+
|     (Node.js/Server Logic)  |                       |
+-----------------------------+                       |
              |                                       v
              |                              +-----------------------------+
              |                              |     Synchronize Auction      |
              |                              |   State for Late Bidders     |
              |                              |  (Send Current Bids, Timer)  |
              v                              +-----------------------------+
+-----------------------------+
|   Auction Ends After Timer   |
|           Expires            |
|   (Finalize & Notify Users)  |
|     (Store Results in DB)    |
+-----------------------------+
              |
              v
+-----------------------------+
|        Close WebSocket       |
|      (End Real-Time Comms)   |
+-----------------------------+
              |
              v
+-----------------------------+
|       End Auction Process    |
|       (Generate Reports,     |
|        Notify All Users)     |
+-----------------------------+
              |
              v
+-----------------------------+
|            End               |
+-----------------------------+
30/08/24, 12:29 am - Shivam Gurjar: https://www.cgap.org/blog/super-platforms-connecting-farmers-to-markets-in-africa
30/08/24, 1:00 am - Shivam Gurjar: Here are some research papers and articles that align with the logistics solutions mentioned earlier:

1. "Improving Agricultural Supply Chains Using Shared Resources"
Description: This paper discusses how shared logistics networks can reduce costs and improve efficiency in agricultural supply chains. It includes case studies where farmers collaborated to transport goods, leveraging shared resources.
Link: Springer - Agricultural Supply Chains (Please replace with the actual link)
2. "The Role of Third-Party Logistics in Agricultural Supply Chains"
Description: This paper explores how third-party logistics providers can streamline agricultural supply chains. It examines the benefits of 3PL partnerships, including cost savings and enhanced market access for smallholder farmers.
Link: Elsevier - Third-Party Logistics (Please replace with the actual link)
3. "Crowdsourced Logistics in Rural Markets: A New Model for Agricultural Distribution"
Description: This study looks at the potential of crowdsourced logistics models in rural areas, particularly for agriculture. It presents a detailed analysis of how farmers can use these models to lower transportation costs.
Link: ResearchGate - Crowdsourced Logistics (Please replace with the actual link)
4. "Leveraging ICT for Efficient Agricultural Supply Chains"
Description: This paper reviews how ICT solutions can optimize logistics in agricultural supply chains. It includes diagrams that depict the integration of digital tools for collaborative transport and logistics management.
Link: Springer - ICT in Agriculture (Please replace with the actual link)
5. "Government and NGO Partnerships for Sustainable Agricultural Logistics"
Description: This research explores how government and NGO interventions can support sustainable logistics solutions for smallholder farmers. It highlights successful partnerships and the role of subsidies in reducing logistics costs.
Link: Wiley Online Library - Agricultural Logistics (Please replace with the actual link)
These papers provide comprehensive insights and practical examples of how logistics challenges in agriculture can be addressed using innovative and collaborative approaches. They include theoretical frameworks as well as case studies, which should be helpful for your project.
30/08/24, 1:06 am - Shivam Gurjar: Given your problem statement and the desire to avoid handling logistics, here are some innovative ideas for your mobile application that can connect farmers directly with consumers and retailers while empowering them to manage sales effectively:

1. Digital Marketplace with Local Focus:
Geotargeting & Local Sales:
The app can focus on connecting farmers with local consumers and retailers within a specific geographic area. By targeting nearby buyers, the need for complex logistics is minimized, as buyers can arrange their own pick-up or delivery.
Local Pickup Points:
Implement a feature that allows farmers to designate local pickup points where buyers can collect their orders. These points could be local markets, community centers, or even specific farm locations.
2. Community-Supported Agriculture (CSA) Integration:
Subscription-Based Model:
Farmers can offer subscription services where consumers pay upfront for a share of the season's produce. This model supports farmers with consistent income and allows consumers to receive fresh produce regularly.
Direct Negotiation & Flexibility:
The app can include a negotiation feature, enabling buyers and farmers to agree on prices, quantities, and pickup schedules, fostering a more personalized and flexible trade relationship.
3. Virtual Farmer’s Market:
Live Sales Events:
Host virtual farmer’s market events within the app where farmers can showcase their produce via live video or photo updates. Consumers can interact in real-time, ask questions, and place orders during these events.
Seasonal & Fresh Produce Alerts:
Implement a feature that sends notifications to consumers when specific seasonal produce becomes available, encouraging timely purchases directly from farmers.
4. Blockchain for Transparency & Trust:
Product Tracking:
Use blockchain technology to provide transparency about the origin of the produce, farming practices, and quality, building trust between farmers and consumers without needing intermediaries.
Smart Contracts for Transactions:
Smart contracts can be used to ensure fair and secure transactions, automatically releasing payments to farmers once the buyer confirms receipt of the produce.
5. Crowdsourcing & Community Engagement:
Collaborative Buying Groups:
Enable consumers to form buying groups to purchase in bulk directly from farmers. This model benefits both parties: farmers can sell larger quantities at once, and consumers can get discounts.
Community Reviews & Ratings:
Introduce a review system where consumers can rate their experience with farmers, promoting accountability and encouraging high standards.
6. Gamification & Loyalty Programs:
Reward Programs:
Implement a loyalty program where consumers earn points for purchasing from local farmers. These points can be redeemed for discounts or special offers.
Achievements for Farmers:
Farmers could earn badges or achievements for milestones like the number of successful transactions, high customer ratings, or offering eco-friendly products.
7. Collaborative Production Planning:
Demand Forecasting:
Allow consumers and retailers to express interest in specific products or quantities before they are harvested, enabling farmers to plan their production according to market demand and reducing waste.
Pre-Sale & Pre-Order Features:
Farmers can list their upcoming produce, allowing consumers to pre-order. This feature ensures farmers have buyers lined up before the harvest, reducing the risk of unsold inventory.
8. Educational & Advisory Features:
Farming Tips & Consumer Education:
Offer a knowledge-sharing section within the app where farmers can access agricultural advice, and consumers can learn about sustainable farming practices and the benefits of buying local.
Direct Messaging:
Implement a direct messaging feature where buyers and farmers can communicate directly, fostering better relationships and understanding.
9. Flexible Payment Options:
Multiple Payment Methods:
Support a range of payment options including mobile wallets, direct bank transfers, and cash on delivery, to accommodate different buyer preferences and ensure easy transactions.
Deferred Payment Plans:
Offer payment flexibility where consumers can pay a portion upfront and the remainder upon receiving the produce, which could make larger purchases more accessible.
10. Sustainability Initiatives:
Carbon Footprint Tracking:
Introduce a feature that tracks and displays the carbon footprint of the transaction, promoting sustainable choices by showcasing the environmental benefits of local purchasing.
Sustainable Farming Certifications:
Farmers can showcase certifications or eco-friendly practices, appealing to environmentally conscious consumers.
These ideas focus on maximizing the direct connection between farmers and buyers, fostering trust, transparency, and convenience, while ensuring the farmers receive fair compensation for their produce without the need for intermediaries.
30/08/24, 7:25 am - Shivam Gurjar: For the app you’re creating, each technology you mentioned can play a specific role in building the features you need. Here's how you can leverage Flutter, Node.js, MongoDB, and Firebase:

### 1. **Flutter (Frontend Development)**
   - **Mobile App UI/UX:** Use Flutter to build the mobile application's user interface. It’s ideal for creating responsive, cross-platform apps with a single codebase for both iOS and Android.
   - **Live Auction Interface:** Implement real-time auction interfaces, where users can place bids, see live updates, and interact with the auction process in real-time.
   - **Chat Interface:** Build the chat UI for negotiations, integrating with backend services to handle real-time messaging.

### 2. **Node.js (Backend Development)**
   - **API Development:** Use Node.js to build the server-side logic, creating RESTful APIs that the Flutter app can communicate with.
   - **Real-Time Features:** Implement real-time features like chat and live auction using libraries such as Socket.IO, which works well with Node.js to handle WebSocket connections.
   - **Auction Logic:** Handle the core auction logic, such as bidding, auction start/end times, and managing active participants.
   - **Integration with Databases:** Use Node.js to interact with MongoDB and Firebase for data storage and retrieval, ensuring seamless communication between the frontend and backend.

### 3. **MongoDB (Database for Non-Real-Time Data)**
   - **Data Storage:** Use MongoDB to store non-real-time data, such as user profiles, auction details, product listings, and historical transaction records.
   - **Flexibility with Schema:** MongoDB’s schema-less nature makes it easy to store and manage complex data structures, which is useful for handling various types of data in your app.
   - **Transaction History:** Store negotiation records, auction history, and other transactional data that doesn’t require real-time updates.

### 4. **Firebase (Real-Time Features and Authentication)**
   - **Real-Time Database:** Use Firebase Realtime Database (or Firestore) to handle real-time chat messages and live auction data. This ensures that all users see the latest bids, messages, and auction status instantly.
   - **Authentication:** Use Firebase Authentication to manage user sign-ups, logins, and authentication. This can be integrated into your app for secure access control.
   - **Push Notifications:** Utilize Firebase Cloud Messaging (FCM) to send push notifications, such as alerts for new bids in an auction, new messages in a negotiation, or reminders about upcoming auctions.
   - **Security Rules:** Implement security rules in Firebase to control access to sensitive data, ensuring that only authorized users can participate in specific auctions or negotiations.

### **How These Technologies Work Together:**
   - **Flutter Frontend** communicates with the **Node.js Backend** via RESTful APIs or WebSockets for real-time features. The frontend retrieves and displays data, such as auction details and chat messages, in real-time.
   - **Node.js** manages the server-side logic, ensuring that business rules (like auction processes) are enforced and that all data is processed and stored correctly.
   - **MongoDB** stores structured data that doesn't need to be updated in real-time, such as user profiles and historical records.
   - **Firebase** handles real-time data needs, like ongoing chat conversations and live auction updates, while also providing authentication and notification services.

This combination of technologies will allow you to build a robust, real-time, and interactive application that meets the needs of your users, whether they are negotiating prices, participating in auctions, or managing their profiles.
30/08/24, 9:37 am - Shivam Gurjar: Caf
30/08/24, 9:37 am - Shivam Gurjar: Dt ct
30/08/24, 9:37 am - Shivam Gurjar: Nqt
31/08/24, 8:59 am - Shivam Gurjar: To effectively present the backend and scalability of your mobile application in a presentation, you can structure your explanation around the following key areas:

1. Backend Architecture Overview
Explain the Components:

Server: Explain that the server is built using Node.js, handling all the requests from the mobile app.
Database: Mention MongoDB as the database to store user data, product listings, chat messages, and transaction records.
API Gateway: Illustrate how API requests from the app are routed through an API Gateway, ensuring secure and efficient communication.
Authentication: Describe how Firebase is used for authentication, allowing farmers and buyers to log in securely.
Flow Diagram:

Include a flow diagram that shows how data flows between the mobile app, server, and database. For example:
User Action: A farmer lists a product on the app.
Request Sent: The mobile app sends a request to the Node.js server.
Data Stored: The server processes the request and stores the data in MongoDB.
Notification: Buyers receive a notification about the new listing.
2. Real-Time Communication
Chat Feature Implementation:

Explain the implementation of the chat feature using WebSockets (Socket.IO) for real-time communication between farmers and buyers.
Data Flow: Describe how messages are sent from one user to the server and then broadcasted to the recipient in real-time.
Scalability of Real-Time Features:

Load Balancing: Discuss how you plan to implement load balancing for the WebSocket server to manage multiple concurrent connections.
Horizontal Scaling: Explain that you can horizontally scale the server by adding more instances to handle increased traffic, ensuring consistent performance as the user base grows.
3. Scalability Considerations
Database Scalability:

Explain how MongoDB's sharding capabilities allow you to scale the database horizontally, distributing data across multiple servers for better performance.
Indexing: Highlight the importance of proper indexing to ensure fast query responses, even with a large number of records.
Microservices Architecture:

If applicable, describe plans to break down the application into microservices (e.g., user management, product listing, transactions) to improve scalability and maintainability.
Auto-Scaling and Cloud Services:

Discuss using cloud services (e.g., AWS, GCP) to deploy your app, taking advantage of auto-scaling features that automatically adjust server capacity based on traffic.
4. Performance Optimization
Caching: Describe how caching frequently accessed data (e.g., product listings) can reduce database load and improve response times.
Asynchronous Processing: Explain the use of background jobs or message queues for processing time-consuming tasks (e.g., image uploads), freeing up server resources for handling real-time requests.
5. Security and Data Integrity
Data Encryption: Explain how data is encrypted in transit and at rest to protect sensitive information.
Scalable Authentication: Highlight how Firebase scales with the number of users, ensuring secure and scalable authentication processes.
6. Monitoring and Maintenance
Monitoring Tools: Discuss using monitoring tools (e.g., Prometheus, Grafana) to track server performance, database health, and application logs.
Maintenance Strategy: Outline how regular maintenance, such as database backups and server updates, will be conducted to ensure the system remains scalable and reliable.
7. Conclusion
Summarize how the backend is designed to handle current needs and is built with scalability in mind, ensuring that the platform can grow as the user base expands and usage increases.
Including diagrams, flowcharts, and examples of potential scaling challenges (and their solutions) will make your presentation more compelling and easy to understand.
31/08/24, 9:03 am - Shivam Gurjar: To present the backend and explain scalability for your mobile application, here's how you can structure your presentation:

1. Overview of the Problem and Solution
Problem Statement:
Farmers struggle to access markets, leading to reduced income due to reliance on middlemen. This limits their ability to sell produce at fair prices.
Solution:
Your mobile application connects farmers directly with consumers and retailers, enabling features like listing produce, negotiating prices, and managing transactions. This reduces the need for intermediaries and improves income potential for farmers.
2. Backend Architecture Overview
Tech Stack:

Node.js: Backend server handling API requests, business logic, and integration with other services.
Flutter: Frontend framework for building a cross-platform mobile app.
Firebase: For real-time chat functionality and user authentication.
MongoDB: Database for storing user data, product listings, and transaction records.
Stripe: Payment gateway for processing transactions securely.
System Architecture Diagram:

Display a diagram showing the interaction between the mobile app (built with Flutter), the Node.js backend, Firebase for real-time updates, MongoDB for data storage, and Stripe for payment processing.
3. Detailed Explanation of Each Component
Node.js Server:

Handles all API requests, interacts with the database, and processes business logic.
Acts as the intermediary between the Flutter app and Firebase, MongoDB, and Stripe.
Firebase (Chat & Authentication):

Manages real-time chat functionality, allowing farmers and buyers to communicate instantly.
Provides user authentication, ensuring secure access to the app.
MongoDB (Database):

Stores data such as user profiles, product listings, chat messages, and transaction records.
Use indexing to improve query performance, especially as data grows.
Stripe (Payments):

Facilitates secure payments between farmers and buyers.
Integrates seamlessly with the Node.js backend to handle transactions.
4. Scalability Considerations
Node.js Server Scalability:

Horizontal Scaling: Discuss how you can scale the Node.js server by adding more instances behind a load balancer to handle increased traffic.
Microservices: Consider breaking down the app into microservices (e.g., user management, chat, payments) to improve scalability and maintenance.
Firebase Scalability:

Real-Time Updates: Firebase automatically scales to handle increased real-time connections, ensuring smooth chat functionality even as the user base grows.
Global Distribution: Firebase’s global data centers ensure low-latency data access for users across different regions.
MongoDB Scalability:

Sharding: Explain how MongoDB’s sharding allows you to distribute data across multiple servers, ensuring efficient data management and retrieval as the database grows.
Caching: Implement caching strategies to reduce the load on the database and improve response times.
Stripe Scalability:

Stripe handles scalability on its own, capable of processing large volumes of transactions securely and efficiently.
5. Performance Optimization and Monitoring
Performance Tuning:

Use asynchronous processing in Node.js to handle multiple requests concurrently, improving server response times.
Implement caching layers (e.g., Redis) to reduce the load on MongoDB and speed up data retrieval.
Monitoring and Alerts:

Utilize monitoring tools like Prometheus and Grafana to track the performance of the Node.js server and Firebase.
Set up alerts to notify the team of potential issues, ensuring timely intervention.
6. Security and Data Integrity
Authentication & Authorization:
Use Firebase Authentication to manage user identities and secure access to the app.
Data Encryption:
Ensure all data transmitted between the app and the server is encrypted using HTTPS.
Store sensitive data like payment information securely, complying with industry standards.
7. Conclusion
Summarize how the backend is designed for both functionality and scalability, ensuring the app can grow to meet the needs of a larger user base without compromising performance or security.
Highlight how each component (Node.js, Firebase, MongoDB, Stripe) contributes to the overall scalability and efficiency of the system.
Using clear visuals, such as architecture diagrams and flowcharts, will help make your presentation more effective and easier for your audience to understand.
31/08/24, 10:49 am - Shivam Gurjar: For your farmer app, scalability can be addressed with a few key points:

1. **Cloud Infrastructure**: Using cloud services like AWS, Google Cloud, or Azure allows for scalable storage and computing resources. Services such as Firebase, which you are already using, provide auto-scaling features to handle increased load.

2. **Microservices Architecture**: Decomposing your app into microservices can help scale different components independently. For example, you could separate chat, video calls, and transaction processing into distinct services.

3. **Database Scalability**: Using a scalable database like MongoDB Atlas (which you are using) ensures that your database can handle large volumes of data and high traffic efficiently.

4. **Load Balancing**: Implement load balancing to distribute traffic evenly across multiple servers, preventing any single server from becoming a bottleneck.

5. **Caching**: Implement caching strategies to reduce the load on your database and speed up response times. Redis or Memcached are popular choices.

6. **Content Delivery Network (CDN)**: Use a CDN to serve static assets, like images and videos, from servers closest to your users, improving load times and reducing server load.

7. **Performance Monitoring**: Regularly monitor your app's performance using tools like Firebase Performance Monitoring or New Relic to identify and address bottlenecks.

By focusing on these aspects, you can ensure that your app remains responsive and efficient as it grows.
31/08/24, 11:03 am - Shivam Gurjar: For deeper scalability considerations in your app:

1. **Serverless Computing**: Leverage serverless architectures (e.g., AWS Lambda, Google Cloud Functions) for certain app functions. This allows you to scale backend processes dynamically without managing server infrastructure.

2. **Data Sharding**: Distribute your database data across multiple servers or clusters. MongoDB supports sharding, which can help manage large datasets and high write/read loads.

3. **Horizontal Scaling**: Add more instances of your application servers to handle increased load. This approach contrasts with vertical scaling, which involves upgrading a single server's hardware.

4. **Asynchronous Processing**: Use message queues (e.g., RabbitMQ, AWS SQS) to handle background tasks asynchronously, such as processing transactions or handling image uploads, to avoid blocking user-facing operations.

5. **Auto-Scaling Groups**: Configure auto-scaling groups in cloud platforms to automatically adjust the number of running instances based on demand.

6. **API Rate Limiting**: Implement rate limiting to protect your services from being overwhelmed by excessive requests, ensuring fair usage and maintaining performance.

7. **Database Replication**: Set up database replication to enhance read performance and ensure high availability. For MongoDB, you can use replica sets to achieve this.

8. **Edge Computing**: Utilize edge computing for processing data closer to the user, reducing latency and server load. This can be especially useful for real-time features like chat and live auctions.

9. **Versioning and Testing**: Implement API versioning and extensive testing to ensure new features do not negatively impact existing functionality and performance.

10. **Decoupling Services**: Keep services loosely coupled so that changes in one service do not require changes in others, facilitating easier scaling and maintenance.

Implementing these strategies will help your app handle increasing numbers of users and data efficiently, maintaining a smooth user experience as you scale.
04/09/24, 12:53 pm - Shivam Gurjar: http://cdn.zeebiz.com/hindi/sites/default/files/styles/zeebiz_850x478/public/2023/02/17/125664-farmers4.jpg
04/09/24, 2:29 pm - Shivam Gurjar: Given your familiarity with Flutter, Node.js, MongoDB, and Python, here's how you can leverage these technologies to build the solution:

1. Python for Web Scraping
Web Scraper: Use Python to build the web scraper that will monitor OEM websites for vulnerability information.
Libraries:
Requests: For making HTTP requests to the websites.
BeautifulSoup: For parsing HTML and extracting vulnerability data.
Selenium (if needed): For interacting with dynamic content on websites.
2. Node.js for Backend
Data Processing: Use Node.js to manage and process the data extracted by the Python scraper.
API Development: Create an API in Node.js that receives vulnerability data from the Python scraper, processes it, and stores it in a MongoDB database.
Email Notifications: Implement email notifications using Node.js libraries like nodemailer to send vulnerability alerts to predefined email addresses.
3. MongoDB for Storage
Database: Use MongoDB to store vulnerability data. Each entry could include fields like product name, version, OEM name, severity level, vulnerability description, and mitigation strategies.
Data Retrieval: Enable querying of the stored data to generate reports or fetch specific vulnerability details.
4. Flutter for Dashboard (Optional)
Admin Dashboard: Build a Flutter app to serve as a dashboard where users can view the scraped vulnerability data, filter by severity, and manage their email subscriptions.
Real-Time Updates: Integrate real-time updates in the Flutter app using WebSockets or similar technologies, so users are immediately informed of new vulnerabilities.
Workflow
Web Scraper (Python):

Scrape vulnerability information from targeted websites.
Send the scraped data to the Node.js backend via an API.
Backend (Node.js):

Receive and process the data.
Store the data in MongoDB.
Trigger email notifications for critical and high-severity vulnerabilities.
Database (MongoDB):

Store and manage vulnerability data.
Support queries for reports and data retrieval.
Dashboard (Flutter) (Optional):

Provide a user interface for monitoring vulnerabilities.
Allow users to manage notifications and view historical data.
Example Workflow Diagram
Web Scraper: Python script → OEM Websites → Scrape Data → API Call to Node.js Backend
Node.js Backend: Receive Data → Store in MongoDB → Trigger Email Notifications
Dashboard: User Views Data → Query MongoDB → Display in Flutter App
Next Steps
Develop the Python Web Scraper: Focus on extracting and sending data.
Set Up Node.js Backend: Develop APIs and integrate email notifications.
Integrate MongoDB: Design the schema and set up the database.
Create Flutter Dashboard (if needed): Build the UI and integrate backend services.
This approach will allow you to utilize your existing skills and technologies effectively to build a comprehensive vulnerability monitoring and reporting system.
06/09/24, 11:56 pm - Shivam Gurjar: 👨‍💻 Backend Developer | JavaScript Enthusiast | Node.js | Express.js | MongoDB | MySQL | Firebase | REST APIs | Flutter Developer | Web & Mobile App Development | Git | Problem Solver
08/09/24, 1:12 am - Shivam Gurjar: Enthusiastic and results-driven Software Engineer | Mobile App Developer 📱 | Web Developer 💻 | Flutter and Next.js Enthusiast 🚀
08/09/24, 1:17 am - Shivam Gurjar: "Full-Stack Developer (MERN) | JavaScript Enthusiast | Node.js | Express.js | MongoDB | MySQL | Flutter Developer | Firebase | REST APIs | Web & Mobile App Development | Git | Problem Solver"
08/09/24, 7:48 pm - Shivam Gurjar: <Media omitted>
08/09/24, 9:57 pm - Shivam Gurjar: "Full-Stack Developer (MERN) | JavaScript | Flutter | Firebase | REST APIs | Git | CI/CD | SQLite | GraphQL | Push Notifications | OAuth | Google Maps API | Testing & Debugging"
08/09/24, 11:49 pm - Shivam Gurjar: Hello everyone,

My name is Shivam Gurjar, and I’m currently pursuing my undergraduate degree in Computer Science and Engineering with a focus on Cyber Security. I’m passionate about backend development and full-stack web and mobile app development. Over the past few years, I’ve worked with technologies like Node.js, Express.js, Flutter, MongoDB, MySQL, and Firebase. I’m particularly enthusiastic about problem-solving, and I enjoy tackling challenges related to data structures and algorithms.

I’ve also explored cloud technologies and have participated in several hackathons, where I’ve worked on innovative projects like developing apps that connect farmers directly with consumers, among others. In addition to my technical skills, I strive to continuously improve my knowledge in the field of cybersecurity, ensuring that my development work aligns with best security practices.

Currently, I’m on a 50-day LeetCode batch and I’m looking forward to continuing my journey with a 100-day batch to further strengthen my problem-solving skills.

Looking forward to learning and collaborating with you all!
08/09/24, 11:51 pm - Shivam Gurjar: "Hi, I’m Shivam Gurjar, a CSE Cyber Security student. I’m into backend and full-stack development, working with Node.js, Flutter, MongoDB, and Firebase. I’m also passionate about problem-solving on LeetCode and recently completed a 50-day batch, aiming for a 100-day challenge soon."
12/09/24, 10:49 pm - Shivam Gurjar: Title: Direct Farmer-to-Consumer Mobile Application
Background
Agriculture remains a cornerstone of the economy, particularly in rural areas, where it is the primary source of livelihood. Despite their hard work, farmers often face significant challenges in accessing markets, resulting in reduced income and limited growth opportunities. One of the most pressing issues is the presence of middlemen or intermediaries who take advantage of the fragmented market structure to purchase produce at low prices and sell it to consumers at much higher rates. This practice not only erodes farmers' profits but also limits their bargaining power, leaving them at the mercy of traders.

Moreover, many farmers lack direct access to consumers or retailers due to geographic isolation, technological barriers, and a lack of market information. These constraints further exacerbate the income gap between farmers and intermediaries, restricting the farmers' ability to sell their produce at fair market prices. Therefore, there is a growing need for a solution that allows farmers to bypass middlemen, enabling them to retain a larger share of their profits by directly connecting with consumers and retailers.

Objective
The primary objective of this project is to create a mobile application that bridges the gap between farmers and the market. The app will provide farmers with a platform to showcase their produce, connect with consumers and retailers, and manage transactions directly. By eliminating intermediaries, the app aims to enhance the income potential of farmers while offering buyers the opportunity to purchase fresh produce at competitive prices.

The solution will focus on:

Increasing Farmers' Market Reach: Giving farmers direct access to a larger customer base.
Fair Pricing: Empowering farmers to negotiate prices, reducing the exploitation by intermediaries.
Transaction Transparency: Facilitating secure and transparent transactions between farmers and buyers.
Key Features
Produce Listing:
The app will allow farmers to create detailed listings of their available produce, including quantity, price, and expected harvest date. This feature ensures that consumers and retailers have access to updated information about the available produce in their region. Listings will also include product quality information to build trust and ensure transparency.

Real-Time Negotiation:
A unique feature of this app will be a real-time price negotiation tool that allows farmers and buyers to engage in price discussions. This tool will enable both parties to agree on a fair price for the produce, ensuring mutual satisfaction. Buyers can also place bulk orders and negotiate discounts directly with the farmers.

Transaction and Payment Management:
To ensure smooth transactions, the app will integrate secure payment options, allowing users to complete payments directly through the platform. Farmers will be able to manage their transactions, track sales, and view payment histories, providing them with greater control over their business dealings.

Chat and Messaging:
For improved communication, the app will offer a messaging feature where farmers and buyers can discuss specific details about the produce, delivery, and other logistics. This will promote efficient coordination and foster trust between the two parties.

Review and Rating System:
Both buyers and farmers will have the ability to rate and review each other after transactions. This system will help build a trustworthy marketplace, where reputation plays a role in improving business relationships.

Logistics and Delivery Support:
The app may also integrate logistics support, helping farmers arrange deliveries or connect with local delivery services to transport the produce to the buyers.

Technology Stack
Frontend: Flutter will be used to build the mobile application, ensuring cross-platform functionality (Android and iOS) with a user-friendly interface.
Backend: Node.js and Express.js will be utilized to manage the server-side operations, including user authentication, product listings, and messaging.
Database: MongoDB will serve as the primary database to store user information, product listings, and transaction histories.
Real-Time Features: Firebase will be incorporated to handle real-time features such as chat, notifications, and updates to product listings.
Payment Integration: A payment gateway like Stripe or Razorpay will be integrated for secure online transactions.
Cloud Hosting: The app will be deployed on cloud services like AWS or Google Cloud to ensure scalability and reliability.
Expected Outcomes
By offering farmers direct access to the market, the proposed application will deliver significant economic and social benefits:

Increased Income for Farmers:
Farmers will receive a larger share of the sale price by bypassing intermediaries, leading to improved livelihoods.

Consumer Benefits:
Consumers will be able to purchase fresh produce directly from the source, often at lower prices than those offered by middlemen or retailers. This will foster a stronger relationship between consumers and farmers, promoting local produce.

Market Efficiency:
The app will contribute to a more transparent and efficient marketplace where fair prices are determined through direct negotiation between farmers and buyers. Reduced dependency on middlemen will lower price distortions and increase market competition.

Technological Empowerment:
By using this app, farmers will become more familiar with technology, which can empower them to explore additional avenues for growth, such as participating in digital literacy programs and expanding their businesses online.

Conclusion
This mobile application aims to revolutionize the way farmers interact with the market by providing a direct link to consumers and retailers. It addresses the long-standing issue of farmers' dependence on intermediaries, thereby ensuring that they can sell their produce at fair prices and retain a larger portion of the profits. Through its user-friendly interface, real-time negotiation tools, secure transaction management, and transparent market practices, this app has the potential to significantly enhance farmers' income and improve their overall quality of life.
15/09/24, 10:12 pm - Shivam Gurjar: <Media omitted>
18/09/24, 6:41 pm - Shivam Gurjar: <Media omitted>
18/09/24, 6:45 pm - Shivam Gurjar: <Media omitted>
18/09/24, 6:46 pm - Shivam Gurjar: <Media omitted>
18/09/24, 6:58 pm - Shivam Gurjar: You deleted this message
18/09/24, 6:58 pm - Shivam Gurjar: <Media omitted>
19/09/24, 2:25 am - Shivam Gurjar: <Media omitted>
19/09/24, 2:28 am - Shivam Gurjar: <Media omitted>
19/09/24, 2:35 am - Shivam Gurjar: <Media omitted>
19/09/24, 2:36 am - Shivam Gurjar: <Media omitted>
20/09/24, 10:20 pm - Shivam Gurjar: <Media omitted>
21/09/24, 11:53 am - Shivam Gurjar: <Media omitted>
21/09/24, 3:18 pm - Shivam Gurjar: You deleted this message
21/09/24, 4:12 pm - Shivam Gurjar: <Media omitted>
21/09/24, 9:15 pm - Shivam Gurjar: To determine the safe sequence of execution for the processes in the given system, we need to apply Banker's Algorithm for deadlock avoidance. Let's go through the steps.

Step 1: Calculate the Need Matrix
The Need matrix is calculated as:

Need
=
Max
−
Allocation
Need=Max−Allocation
For each process, subtract the allocation from the maximum for each resource type.

Need Matrix:
Process	A	B	C
P1	7	4	3
P2	1	2	2
P3	6	6	0
P4	0	1	1
Step 2: Apply Banker's Algorithm
We need to check if the system is in a safe state by checking if there's a sequence of processes that can complete without causing a deadlock.

Available resources initially: A = 3, B = 3, C = 2.
Process P4:
Need for P4: A = 0, B = 1, C = 1.
Available: A = 3, B = 3, C = 2.
Since the available resources are enough for P4, it can execute and release its allocated resources:

New Available after P4: A = 3 + 2 = 5, B = 3 + 1 = 4, C = 2 + 1 = 3.
Process P2:
Need for P2: A = 1, B = 2, C = 2.
Available: A = 5, B = 4, C = 3.
P2 can now execute, releasing its resources:

New Available after P2: A = 5 + 2 = 7, B = 4 + 0 = 4, C = 3 + 0 = 3.
Process P1:
Need for P1: A = 7, B = 4, C = 3.
Available: A = 7, B = 4, C = 3.
P1 can execute and release its resources:

New Available after P1: A = 7 + 0 = 7, B = 4 + 1 = 5, C = 3 + 0 = 3.
Process P3:
Need for P3: A = 6, B = 6, C = 0.
Available: A = 7, B = 5, C = 3.
P3 can execute, and release its resources:

New Available after P3: A = 7 + 3 = 10, B = 5 + 0 = 5, C = 3 + 2 = 5.
Safe Sequence:
The safe sequence of execution is: P4 → P2 → P1 → P3

Thus, the correct answer is: P4, P2, P1, P3.
21/09/24, 9:15 pm - Shivam Gurjar: <Media omitted>
21/09/24, 9:57 pm - Shivam Gurjar: <Media omitted>
21/09/24, 10:01 pm - Shivam Gurjar: <Media omitted>
22/09/24, 11:31 am - Shivam Gurjar: <Media omitted>
26/09/24, 9:17 pm - Shivam Gurjar: https://chatgpt.com/share/66f581ec-917c-8000-a797-908f70210f6e
27/09/24, 1:06 am - Shivam Gurjar: https://chatgpt.com/share/66f5b7b3-6eac-8000-9b92-bf1ca5809d54
28/09/24, 10:05 pm - Shivam Gurjar: https://chatgpt.com/share/66f83020-deb4-8000-9dae-6ebe377eaebc
28/09/24, 11:19 pm - Shivam Gurjar: https://chatgpt.com/share/66f83020-deb4-8000-9dae-6ebe377eaebc
29/09/24, 5:27 pm - Shivam Gurjar: <Media omitted>
29/09/24, 11:32 pm - Shivam Gurjar: <Media omitted>
29/09/24, 11:34 pm - Shivam Gurjar: <Media omitted>
30/09/24, 2:36 am - Shivam Gurjar: <Media omitted>
30/09/24, 2:48 am - Shivam Gurjar: <Media omitted>
30/09/24, 3:24 am - Shivam Gurjar: <Media omitted>
30/09/24, 3:36 am - Shivam Gurjar: <Media omitted>
30/09/24, 8:42 am - Shivam Gurjar: <Media omitted>
04/10/24, 9:12 pm - Shivam Gurjar: Hey, if you're free tomorrow, can we go over the project code so I can start working on it?
09/10/24, 12:00 pm - Shivam Gurjar: Hello, could you please send me the email ID and password, along with the route details
09/10/24, 6:50 pm - Shivam Gurjar: https://meet.google.com/fgk-qzsc-czi
10/10/24, 8:15 pm - Shivam Gurjar: You deleted this message
10/10/24, 10:00 pm - Shivam Gurjar: <Media omitted>
10/10/24, 10:05 pm - Shivam Gurjar: <Media omitted>
11/10/24, 12:10 am - Shivam Gurjar: You deleted this message
11/10/24, 12:33 am - Shivam Gurjar: <Media omitted>
11/10/24, 12:05 pm - Shivam Gurjar: <Media omitted>
13/10/24, 4:19 am - Shivam Gurjar: Sometimes, a simple problem can keep you up late, and before you know it, it's 4 AM. You can't sleep because you're stuck, but then, suddenly, you find the answer. That moment makes all the effort worth it
13/10/24, 9:09 pm - Shivam Gurjar: You deleted this message
13/10/24, 9:10 pm - Shivam Gurjar: <Media omitted>
13/10/24, 9:35 pm - Shivam Gurjar: https://youtu.be/s8lt2bc0rDQ?si=21WzRqQaD37y2_vr
13/10/24, 9:35 pm - Shivam Gurjar: this is complete e commerce
14/10/24, 12:08 am - Shivam Gurjar: https://chatgpt.com/share/670c13a4-21e4-8000-9fd2-3fd4d7e5ddfa
14/10/24, 12:10 am - Shivam Gurjar: <Media omitted>
14/10/24, 9:18 am - Shivam Gurjar: https://chatgpt.com/share/670c9480-e340-8000-a0fa-8d3f64f89d35
17/10/24, 9:43 am - Shivam Gurjar: https://chatgpt.com/share/67108ee9-8ad0-8000-9df9-d068ecf8767e
17/10/24, 9:43 am - Shivam Gurjar: Aptitude
17/10/24, 10:48 pm - Shivam Gurjar: https://chatgpt.com/share/671146e6-a760-8000-997b-d4d71975e055
17/10/24, 10:49 pm - Shivam Gurjar: network security link
17/10/24, 10:56 pm - Shivam Gurjar: https://chatgpt.com/share/671146e6-a760-8000-997b-d4d71975e055
17/10/24, 11:00 pm - Shivam Gurjar: You deleted this message
19/10/24, 2:49 am - Shivam Gurjar: https://chatgpt.com/share/6712d0e8-5350-8000-9950-b813f9e5e196
19/10/24, 2:50 am - Shivam Gurjar: app part1  code explanation
19/10/24, 3:46 am - Shivam Gurjar: <Media omitted>
20/10/24, 12:40 am - Shivam Gurjar: https://chatgpt.com/share/671403ef-c5c0-8000-bbc3-396e0d3dbc90
20/10/24, 7:35 pm - Shivam Gurjar: const express = require('express');
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const crypto = require('crypto'); 

const app = express();
const PORT = 3000;

// Set up multer to store uploaded files in uploads folder by original filename
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'uploads');
  },
  filename: (req, file, cb) => {
    cb(null, file.originalname);  // Save with the original filename
  }
});
const upload = multer({ storage: storage });

app.use(express.static(path.join(__dirname, 'public')));

// Serve different pages (sidebar)
app.get('/home', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'views/index.html'));
});
app.get('/files', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'views/files.html'));
});
app.get('/settings', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});
app.get('/about', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'views/about.html'));
});

// Function to generate SHA-256 hash of a file
const generateFileHash = (filePath) => {
  const fileBuffer = fs.readFileSync(filePath);
  const hash = crypto.createHash('sha256').update(fileBuffer).digest('hex');
  return hash;
};

// Recursive function to generate hashes for all files in a folder
const generateFolderHash = (folderPath) => {
  const files = fs.readdirSync(folderPath);
  const folderHashes = {};

  files.forEach(file => {
    const filePath = path.join(folderPath, file);
    const stats = fs.statSync(filePath);

    // If it's a file, generate its hash
    if (stats.isFile()) {
      const fileHash = generateFileHash(filePath);
      folderHashes[file] = fileHash;
    }
    // If it's a folder, recursively generate hashes for its contents
    else if (stats.isDirectory()) {
      folderHashes[file] = generateFolderHash(filePath);
    }
  });

  return folderHashes;
};

// Save uploaded files and store hashes of all files in the folder
app.post('/upload', upload.single('file'), (req, res) => {
  if (!req.file) {
    return res.status(400).send('No file uploaded.');
  }

  // Generate folder hash after the upload
  const folderPath = path.join(__dirname, 'uploads');
  const folderHashes = generateFolderHash(folderPath);

  // Store the folder's hashes in a file for future integrity checks
  const hashFilePath = 'folder_hashes.json';
  fs.writeFileSync(hashFilePath, JSON.stringify(folderHashes, null, 2));

  res.send(`
    <h3>File uploaded successfully</h3>
    <p>Folder hash has been updated.</p>
  `);
});

// Periodically check for folder integrity (every 5 seconds)
setInterval(() => {
  console.log('Checking folder integrity...');
  const hashFilePath = 'folder_hashes.json';
  const folderPath = path.join(__dirname, 'uploads');

  if (fs.existsSync(hashFilePath)) {
    const savedFolderHashes = JSON.parse(fs.readFileSync(hashFilePath));
    const currentFolderHashes = generateFolderHash(folderPath);

    // Compare current hashes with saved hashes
    const checkFolderIntegrity = (saved, current) => {
      Object.keys(saved).forEach(file => {
        if (typeof saved[file] === 'object') {
          // Recursively check folders
          if (!current[file]) {
            console.error(`ALERT: Folder ${file} is missing.`);
          } else {
            checkFolderIntegrity(saved[file], current[file]);
          }
        } else {
          // Check file hashes
          if (!current[file]) {
            console.error(`ALERT: File ${file} is missing.`);
          } else if (saved[file] !== current[file]) {
            console.error(`ALERT: File integrity compromised for ${file}.`);
          }
        }
      });

      // Check for new files that weren't in the saved hashes
      Object.keys(current).forEach(file => {
        if (!saved[file]) {
          console.error(`ALERT: New file ${file} detected.`);
        }
      });
    };

    checkFolderIntegrity(savedFolderHashes, currentFolderHashes);
  }
}, 5000);

app.listen(PORT, () => {
  console.log('Server is running on port', PORT);
});
21/10/24, 11:38 am - Shivam Gurjar: // const express = require('express');
// const multer = require ('multer');
// const path = require('path');
// const fs = require('fs');
// const crypto = require('crypto'); 

// const app = express();
// const PORT = 3000;

// // set up multer to store uploaded files in uploads folder
// const upload = multer({dest: 'uploads'});

// app.use(express.static(path.join(__dirname, 'public')));



// app.get('/home', (req, res) => {
//     res.sendFile(path.join(__dirname, 'public', 'index.html'));
//   });

//   app.get('/files', (req, res) => {
//     res.sendFile(path.join(__dirname, 'public', 'index.html'));
//   });

//   app.get('/settings', (req, res) => {
//     res.sendFile(path.join(__dirname, 'public', 'index.html'));
//   });


// //route to handle file upload
// app.post('/upload', upload.single('file'), (req, res) => {
//     if (!req.file) {
//       return res.status(400).send('No file uploaded.');
//     }
//     // File info is available in req.file
//     console.log('File uploaded successfully:', req.file);
    
//     // You can implement additional FIM logic here (e.g., file integrity check)
//  const filepath = req.file.path;

//  // readin the file
//  fs.readFile(filepath, 'utf8', (err,data)=>{
//     if(err){
//         return res.status(500).send('error in reading file');
//     }
//     console.log(data);

//      // Create a SHA-256 hash of the file content for FIM
//  const hash = crypto.createHash('sha256').update(data, 'utf8').digest('hex');
//  console.log('File hash (SHA-256):', hash);

//  // Send file content and hash back to the client
//  res.send(`
//    <h3>File uploaded successfully</h3>
//    <p>File content: <pre>${data}</pre></p>
//    <p>File hash (SHA-256): <strong>${hash}</strong></p>
//  `);
//  })




    

//   });

//   app.listen(PORT, ()=>{
//     console.log('server is running ................')
//   })

const express = require('express');
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const crypto = require('crypto'); 

const app = express();
const PORT = 3000;

// Set up multer to store uploaded files in uploads folder by original filename
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'uploads');
  },
  filename: (req, file, cb) => {
    cb(null, file.originalname);  // Save with the original filename
  }
});
const upload = multer({ storage: storage });

app.use(express.static(path.join(__dirname, 'public')));

// Serve different pages (sidebar)
app.get('/home', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'views/index.html'));
});
app.get('/files', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'views/files.html'));
});
app.get('/settings', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.get('/about', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'views/about.html'));
  });
  
// Function to generate SHA-256 hash of a file
const generateFileHash = (filePath) => {
  const fileBuffer = fs.readFileSync(filePath);
  const hash = crypto.createHash('sha256').update(fileBuffer).digest('hex');
  return hash;
};

// Save file and store hash
app.post('/upload', upload.single('file'), (req, res) => {
  if (!req.file) {
    return res.status(400).send('No file uploaded.');
  }
  
  // Generate hash for the uploaded file
  const filePath = req.file.path;
  const fileHash = generateFileHash(filePath);

  // Store the filename and hash in a hash file for FIM (can also use a database)
  const hashFilePath = 'file_hashes.json';
  let fileHashes = {};

  // Read existing hashes if the file exists
  if (fs.existsSync(hashFilePath)) {
    const rawData = fs.readFileSync(hashFilePath);
    fileHashes = JSON.parse(rawData);
  }

  // Prevent re-upload of the same file
  if (fileHashes[req.file.originalname] && fileHashes[req.file.originalname] === fileHash) {
    return res.status(400).send('File with identical content already uploaded.');
  }

  // Store the new file's hash
  fileHashes[req.file.originalname] = fileHash;
  fs.writeFileSync(hashFilePath, JSON.stringify(fileHashes, null, 2));

  res.send(`
    <h3>File uploaded successfully</h3>
    <p>File hash (SHA-256): <strong>${fileHash}</strong></p>
  `);
});

// const watchDirectory = (dir) => {
//     fs.watch(dir, (eventType, filename) => {
//       if (filename && eventType === 'change') {
//         console.log(`File ${filename} has been modified.`);
        
//         const filePath = path.join(dir, filename);
//         const currentHash = generateFileHash(filePath);
//         const hashFilePath = 'file_hashes.json';
  
//         if (fs.existsSync(hashFilePath)) {
//           const fileHashes = JSON.parse(fs.readFileSync(hashFilePath));
          
//           if (fileHashes[filename] && fileHashes[filename] !== currentHash) {
//             console.error(`ALERT: File integrity compromised for ${filename}`);
//           } else {
//             console.log(`${filename} is intact.`);
//           }
//         }
//       }
//     });
//   };
  
//   // Start watching the 'uploads' directory
//   watchDirectory(path.join(__dirname, 'uploads'));

// Periodically check for file integrity (every 5 seconds)
setInterval(() => {
  console.log('Checking file integrity...');
  const hashFilePath = 'file_hashes.json';

  if (fs.existsSync(hashFilePath)) {
    const fileHashes = JSON.parse(fs.readFileSync(hashFilePath));
    
    Object.keys(fileHashes).forEach((fileName) => {
      const filePath = path.join(__dirname, 'uploads', fileName);
      if (fs.existsSync(filePath)) {
        const currentHash = generateFileHash(filePath);
        if (currentHash !== fileHashes[fileName]) {
          console.error(`ALERT: File integrity compromised for ${fileName}`);
          // Additional action like sending alert, email, etc., can be added here
        } else {
          console.log(`${fileName} is intact.`);
        }
      } else {
        console.error(`ALERT: File ${fileName} not found.`);
      }
    });
  }
}, 5000); 



app.listen(PORT, () => {
  console.log('Server is running on port', PORT);
});
21/10/24, 11:42 am - Shivam Gurjar: Logo
Iot(internet of things) 502
Name 
Roll
Cy
Acropolis Institute of tech and research

2nd page 
Index
Insert a table
Coloum four 
15 rows

Row1
colom1 serial
Coulum 2 name of exp
Col3 page no
Col4 date 

Page 3
Hardware requirements
1) arduino board
Description:-
Figure(color) 

2) Register220ohm  10 percent tolerance 
Supply 5 v(dc) 
LEDs quantity 3-5

3) connecting wires
4) red board

Page 4
Arduino ide
Download ide
Write 10 lines about your ide

Page5
Exp -1

Aim:- implement a on-off   led timer with delay using arduino board. 
Description:- port number, inp and outp

Fig circuit diagram

Port description:-

Page 11  and page 12 table

Page 6
Circuit diagram


Page7
Ide program implementation

Page 8
Output

Website arduino.cc
21/10/24, 2:39 pm - Shivam Gurjar: File Integrity Monitoring (FIM) falls under the scope of network security because it plays a key role in safeguarding the integrity and security of an organization's digital assets within a network environment. Here's why FIM is categorized as part of network security:

1. Detecting Unauthorized Changes Across a Network:

FIM monitors critical files and systems across the network, looking for unauthorized changes that could indicate malicious activity or an attack. This makes it a core element of network security, which aims to prevent, detect, and respond to threats within a network.


2. Mitigating Cybersecurity Threats:

Networks are often targeted by attackers trying to modify files, install backdoors, or introduce malicious code. FIM helps detect these unauthorized changes, allowing for swift response and remediation to prevent a security breach from escalating.


3. Monitoring Critical Network Components:

In a network, there are multiple devices, servers, and endpoints that contain important system and configuration files. FIM ensures that all these components are monitored, securing the network infrastructure and preventing compromise at any point.


4. Compliance with Security Standards:

Many security standards, such as PCI-DSS, HIPAA, and GDPR, mandate the use of FIM to secure sensitive data and systems. Since these standards are network-wide and focus on protecting the entire infrastructure, FIM becomes an essential part of ensuring that network environments comply with these regulations.


5. Detecting Insider and External Threats:

Network security isn't just about protecting from external attackers; internal threats such as malicious insiders can also compromise critical files. FIM monitors file changes made by users across the network, helping to detect and respond to both external and insider threats.


6. Integration with Network Security Tools:

FIM is often integrated with network security tools like Intrusion Detection Systems (IDS), Security Information and Event Management (SIEM) systems, and firewalls. These tools work together to provide comprehensive security across the network, and FIM adds a layer of protection by monitoring the integrity of files across the network's devices.


7. Protecting Network Applications and Data:

Many applications and databases are distributed across a network. FIM helps secure these applications by monitoring their configuration files, logs, and system files. This ensures that unauthorized changes to applications running on the network are detected and can be acted upon promptly.


In short, FIM comes under network security projects because it protects the integrity of files across a networked environment, detects potential intrusions or malware, and helps ensure compliance with security standards—all of which are critical to maintaining a secure network.
21/10/24, 8:35 pm - Shivam Gurjar: <Media omitted>
21/10/24, 8:37 pm - Shivam Gurjar: <Media omitted>
21/10/24, 8:40 pm - Shivam Gurjar: <Media omitted>
21/10/24, 8:45 pm - Shivam Gurjar: <Media omitted>
21/10/24, 8:48 pm - Shivam Gurjar: <Media omitted>
21/10/24, 8:48 pm - Shivam Gurjar: <Media omitted>
24/10/24, 6:17 pm - Shivam Gurjar: Tumse mukhatib hone ka haq ab mujhse mahrum ho gaya,
Meri khata-e-azeem ne mujhe tumse alhuda kar diya.
Main sazaawar nahin tumhari lutf-nawāzi ke,
Tumhari dosti mein hum itna to kar sakte hain,
Ab tumko na malool karunga, khamoshi se door chal diya.
27/10/24, 3:51 pm - Shivam Gurjar: <Media omitted>
27/10/24, 7:35 pm - Shivam Gurjar: <Media omitted>
28/10/24, 12:26 am - Shivam Gurjar: Turn web pages into desktop program
30/10/24, 5:56 pm - Shivam Gurjar: You deleted this message
30/10/24, 5:57 pm - Shivam Gurjar: You deleted this message
30/10/24, 5:58 pm - Shivam Gurjar: You deleted this message
30/10/24, 6:00 pm - Shivam Gurjar: You deleted this message
30/10/24, 7:46 pm - Shivam Gurjar: <Media omitted>
31/10/24, 12:01 pm - Shivam Gurjar: <Media omitted>
04/11/24, 4:07 pm - Shivam Gurjar: 2590 Yonge St, Toronto, ON M4P 2J3
05/11/24, 5:22 pm - Shivam Gurjar: You deleted this message
05/11/24, 5:22 pm - Shivam Gurjar: <Media omitted>
05/11/24, 5:25 pm - Shivam Gurjar: <Media omitted>
05/11/24, 10:03 pm - Shivam Gurjar: <Media omitted>
05/11/24, 10:22 pm - Shivam Gurjar: <Media omitted>
05/11/24, 10:43 pm - Shivam Gurjar: <Media omitted>
09/11/24, 2:25 am - Shivam Gurjar: Hello! I'm Shivam Gurjar, a Computer Science student and an aspiring backend developer with a keen interest in cybersecurity and full-stack development. I'm currently exploring and learning various technologies, including Node.js, Express.js, MongoDB, MySQL, Flutter, and Firebase, as I build my skills in both web and mobile app development.

I'm passionate about coding and enjoy diving into Data Structures and Algorithms (DSA) to enhance my problem-solving abilities. Recently, I've been working on projects that integrate security with web development, using languages like HTML, CSS, JavaScript, and Node.js. This has given me insights into network security practices and the importance of securing digital applications.

One of my latest projects is a hackathon idea aimed at connecting farmers directly with consumers and retailers. This project is designed to reduce farmers' dependency on intermediaries, incorporating features like live auctions, a chat system for negotiation, and a collaborative storage solution. By leveraging blockchain, I'm working to make transactions more secure, which has been a valuable experience in both tech and real-world impact.

Outside of academics, I enjoy taking on new challenges that help me grow both technically and personally. I'm committed to continuous learning, and I’m excited to see where this journey in technology and development will take me!
17/11/24, 10:13 pm - Shivam Gurjar: <Media omitted>
21/11/24, 11:08 pm - Shivam Gurjar: <Media omitted>
23/11/24, 12:36 pm - Shivam Gurjar: Here’s one of Elliot's most impactful and lengthy dialogues from Mr. Robot, reflecting his inner turmoil and sense of isolation:

Season 1, Episode 1:

"I don't know if I’m the only one who sees it, but I see it. There’s this deep sadness in everyone. They can try to hide it, they can try to cover it up, but I see it. I see how they really feel. They don't think I notice, but I notice. The way they look at me, the way they talk to me. And I know what they're thinking. They think I’m broken. They think I’m different. And they're right. I am different. I don't fit in. I don't want to fit in. But I’m the only one who sees it. I'm the only one who knows what’s really going on."

This dialogue encapsulates Elliot's profound loneliness and alienation. He believes he sees through people, noticing the pain they hide while feeling even more disconnected from them. His internal world is one of frustration and isolation, where he feels both different and misunderstood by society.

You can find more such dialogue moments and context from reliable sources like Springfield! Springfield! for episode scripts or explore the Mr. Robot fandom.
23/11/24, 12:40 pm - Shivam Gurjar: Sometimes I wonder if all of this is just in my head. If I’m really here, or if it’s all just something I created. I mean, I don’t know how long it’s been since I’ve actually felt real. Since I’ve actually felt alive. It feels like everything is fake. Like it’s all just a story I’m trapped in. A story that I can’t escape from."
23/11/24, 12:42 pm - Shivam Gurjar: You ever feel like you're just... not real? Like you're just going through the motions? Maybe you're just pretending, maybe I'm just pretending. And everything, everything around me... it’s all a simulation. Nothing’s real. Maybe I don't even exist. I mean, it doesn't even matter, right? Because the world doesn’t care. It’s all the same. The world doesn’t care about you. It doesn’t care about me."
23/11/24, 12:46 pm - Shivam Gurjar: The world is built on fantasy. It's the way we make sense of things. We create our own reality, and then we try to force it onto others. But it's all lies. We live in a world where we're all pretending. We're all trying to sell a version of ourselves that isn’t real, and we don’t even see it. The truth is, no one’s paying attention. Everyone’s too busy living their own lies."
23/11/24, 12:56 pm - Shivam Gurjar: Look at it, a world built on fantasy. Synthetic emotions in the form of pills. Psychological warfare in the form of advertising. Mind altering chemicals in the form of food. Brain washing seminars in the form of media. Controlled isolated bubbles in the form of social networks. Real? You want to talk about reality? We haven't lived in anything remotely close to it since the turn of the century. We turned it off. Took out the batteries, snacked on a bag of GMOs while we tossed the remnants in the ever expanding dumpster of the human condition. We live in branded houses trademarked by corporations built on bipolar numbers jumping up and down on digital displays hypnotizing us into the biggest slumber mankind has ever seen. You have to dig pretty deep, kiddo, before you can find anything real. We live in a kingdom of bullshit. A kingdom you've lived in for far too long. So don't tell me about not being real. I'm no less real than the f**king beef patty in your big mac.
24/11/24, 10:34 pm - Shivam Gurjar: <Media omitted>
27/11/24, 12:09 pm - Shivam Gurjar: <Media omitted>
27/11/24, 12:09 pm - Shivam Gurjar: <Media omitted>
28/11/24, 9:59 am - Shivam Gurjar: <Media omitted>
29/11/24, 4:28 pm - Shivam Gurjar: Hello! I'm Shivam Gurjar, a Computer Science student and an aspiring backend developer with a keen interest in cybersecurity and full-stack development. I'm currently exploring and learning various technologies, including Node.js, Express.js, MongoDB, MySQL, Flutter, and Firebase, as I build my skills in both web and mobile app development.

I'm passionate about coding and enjoy diving into Data Structures and Algorithms (DSA) to enhance my problem-solving abilities. Recently, I've been working on projects that integrate security with web development, using languages like HTML, CSS, JavaScript, and Node.js. This has given me insights into network security practices and the importance of securing digital applications.

One of my latest projects is a hackathon idea aimed at connecting farmers directly with consumers and retailers. This project is designed to reduce farmers' dependency on intermediaries, incorporating features like live auctions, a chat system for negotiation, and a collaborative storage solution. By leveraging blockchain, I'm working to make transactions more secure, which has been a valuable experience in both tech and real-world impact.

Outside of academics, I enjoy taking on new challenges that help me grow both technically and personally. I'm committed to continuous learning, and I’m excited to see where this journey in technology and development will take me!
29/11/24, 6:32 pm - Shivam Gurjar: The moment you put a woman over your goals is the moment you lose both
01/12/24, 7:18 pm - Shivam Gurjar: <Media omitted>
01/12/24, 7:25 pm - Shivam Gurjar: <Media omitted>
01/12/24, 7:27 pm - Shivam Gurjar: <Media omitted>
01/12/24, 7:29 pm - Shivam Gurjar: <Media omitted>
01/12/24, 7:29 pm - Shivam Gurjar: <Media omitted>
01/12/24, 8:21 pm - Shivam Gurjar: <Media omitted>
02/12/24, 10:13 pm - Shivam Gurjar: polling - short - long -> fix duration of time ke bad bar bar req bejna aur response ana client ko
02/12/24, 10:13 pm - Shivam Gurjar: server sent event jo ki frequently use hote h
02/12/24, 10:15 pm - Shivam Gurjar: it is unidirectional connection in which server can send data as much server want but there is a problem
02/12/24, 10:15 pm - Shivam Gurjar: isme client data push nhi kar sakta only server can
02/12/24, 10:17 pm - Shivam Gurjar: http handshake with upgrade header
02/12/24, 10:17 pm - Shivam Gurjar: abhi to hum http pe bat kar rahe he par hum upgrade karege ws me
02/12/24, 10:18 pm - Shivam Gurjar: if server agress then server send response in which 101 switching protocol
02/12/24, 10:18 pm - Shivam Gurjar: ws established
06/12/24, 8:16 am - Shivam Gurjar: Subject: Informing About Leave 

Respected Sir,

I am writing to inform you that I will not be able to attend college on 06/12/24 due to personal reasons. I apologize for the inconvenience and assure you that I will ensure all missed work is completed on time.

Thank you for your understanding.

Yours sincerely,
Shivam Gurjar
0827CY22157
CS-CYB
06/12/24, 9:50 pm - Shivam Gurjar: https://weqred.ca/#/CustomerRestView?restId=57
11/12/24, 8:33 pm - Shivam Gurjar: faq_quesetion
11/12/24, 8:34 pm - Shivam Gurjar: faq_feature
11/12/24, 8:53 pm - Shivam Gurjar: scrollToQuestiond(appstrings.faqlist[index].key)
11/12/24, 11:17 pm - Shivam Gurjar: https://gokuto.watch/movie/300-84779/
14/12/24, 2:29 pm - Shivam Gurjar: <Media omitted>
16/12/24, 10:26 pm - Shivam Gurjar: 🤣🤣🥰
17/12/24, 1:15 pm - Shivam Gurjar: <Media omitted>
17/12/24, 1:37 pm - Shivam Gurjar: <Media omitted>
17/12/24, 7:12 pm - Shivam Gurjar: <Media omitted>
17/12/24, 7:13 pm - Shivam Gurjar: <Media omitted>
17/12/24, 7:13 pm - Shivam Gurjar: <Media omitted>
18/12/24, 2:32 pm - Shivam Gurjar: <Media omitted>
19/12/24, 10:37 am - Shivam Gurjar: <Media omitted>
19/12/24, 1:28 pm - Shivam Gurjar: <Media omitted>
21/12/24, 11:34 pm - Shivam Gurjar: deb http://old-releases.ubuntu.com/ubuntu/ hardy main restricted universe multiverse
deb http://old-releases.ubuntu.com/ubuntu/ hardy-updates main restricted universe multiverse
deb http://old-releases.ubuntu.com/ubuntu/ hardy-security main restricted universe multiverse
deb http://old-releases.ubuntu.com/ubuntu/ hardy-backports main restricted universe multiverse
24/12/24, 10:17 pm - Shivam Gurjar: https://youtu.be/PzRQhpbYbeg?si=ehuCmuiCMLfOqs_b
28/12/24, 12:03 am - Shivam Gurjar: Good looks and money win hearts, but a good heart gets broken. Tonight, it's just me, my thoughts, and DSA under the stars. 💔
28/12/24, 12:15 am - Shivam Gurjar: While some chase good looks and money, I’m building solutions at a deeper level. You chose the surface, but true value lies in mastering the complexities. Tonight, it's just me, DSA, and a path only few will understand.
28/12/24, 12:20 am - Shivam Gurjar: While others chase looks and money, I'm like Batman—working in the shadows, mastering DSA and solving what others can’t even see.
01/01/25, 3:56 pm - Shivam Gurjar: https://youtube.com/shorts/AhqWWD_yA-w?si=M2khhXreNIVc1xDD
01/01/25, 5:26 pm - Shivam Gurjar: <Media omitted>
02/01/25, 7:25 am - Shivam Gurjar: <Media omitted>
13/01/25, 7:25 am - Shivam Gurjar: <Media omitted>
14/01/25, 9:34 pm - Shivam Gurjar: // onPressed: () {
              //   if (isExpanded) {
              //     c.isExpandedListForFAQs![index] = false;
              //     c.videoPlayerController.dispose();
              //   } else {
              //     c.isExpandedListForFAQs = List.generate(
              //       faqList.length,
              //       (i) => i == index,
              //     );
              //     c.initializeVideo(faqList[index].videoUrl);
              //     openFAQ(index, c);
              //   }
              //   c.update();
              // },
14/01/25, 9:47 pm - Shivam Gurjar: import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:get/get.dart';
import 'package:restaurent_app/modules/owner/owner_vm.dart';
import 'package:restaurent_app/modules/owner/widgets/owner_collapsible_sidebar.dart';
import 'package:restaurent_app/resources/app_colors.dart';
import 'package:restaurent_app/resources/app_strings.dart';
import 'package:restaurent_app/utils/widgets/app_text.dart';
import 'package:video_player/video_player.dart';

class OwnerFAQ extends StatelessWidget {
  OwnerFAQ({super.key});

  final GlobalKey<AnimatedListState> _listKey = GlobalKey<AnimatedListState>();
  final ScrollController _scrollController = ScrollController();

  // Function to open and rearrange FAQ with transition
  void openFAQ(int index, OwnerVM c) {
    final faqList =
        c.filteredFaqList.isNotEmpty ? c.filteredFaqList : AppStrings.faqItems;

    if (index < 0 || index >= faqList.length) return; // Prevent index out-of-bound

    // Start scroll animation to the top
    _scrollController.animateTo(
      0,
      duration: const Duration(seconds: 3),
      curve: Curves.easeInOut,
    );

    // Transition: Remove FAQ from its current position and add it to the top
    final movedFAQ = faqList.removeAt(index);
    faqList.insert(0, movedFAQ);

    _listKey.currentState?.removeItem(
      index,
      (context, animation) {
        return SizeTransition(
          sizeFactor: animation,
          axisAlignment: 0.0,
          child: faqListView(
            context,
            movedFAQ.question,
            animation,
            false,
            c,
            index,
          ),
        );
      },
      duration: const Duration(seconds: 2),
    );

    // Delay to ensure the item moves to the top before expanding
    Future.delayed(const Duration(seconds: 2), () {
      // Insert item back to the list after the transition
      _listKey.currentState?.insertItem(0);

      // Set the FAQ list expansion state
      c.isExpandedListForFAQs = List.generate(faqList.length, (i) => i == 0);
      c.update();
    });

    // Update state to expand the FAQ item after transition
    Future.delayed(const Duration(seconds: 4), () {
      c.isExpandedListForFAQs![0] = true;
      c.update();

      // Initialize video based on the FAQ's video URL
      c.initializeVideo(
        c.searchFaqCtrl.text.isNotEmpty
            ? c.filteredFaqList[0].videoUrl
            : AppStrings.faqItems[0].videoUrl,
      );
    });
  }

  // Widget for rendering each FAQ item
  Widget faqListView(BuildContext context, String faq,
      Animation<double> animation, bool isExpanded, OwnerVM c, int index) {
    final faqList =
        c.filteredFaqList.isNotEmpty ? c.filteredFaqList : AppStrings.faqItems;

    // RETURN AN EMPTY WIDGET IF INDEX OUT OF BOUND
    if (index >= faqList.length) {
      return const SizedBox();
    }

    final steps = faqList[index].steps;

    return Container(
      decoration: const BoxDecoration(
        color: AppColors.white,
        border: Border(bottom: BorderSide(color: AppColors.black)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          ListTile(
            title: AppText(
              text: faq,
              fontWeight: isExpanded ? FontWeight.bold : FontWeight.normal,
              size: 18.sp,
            ),
            trailing: IconButton(
              icon: Icon(isExpanded ? Icons.minimize : Icons.add),
              onPressed: () {
                if (index == 0) {
                  // Logic for index == 0
                  if (isExpanded) {
                    // If already expanded, collapse it and dispose of the video controller
                    c.isExpandedListForFAQs![index] = false;
                    c.videoPlayerController.dispose();
                  } else {
                    // If not expanded, collapse all other FAQ items and expand the current one
                    for (int i = 0; i < c.isExpandedListForFAQs!.length; i++) {
                      c.isExpandedListForFAQs![i] = false;
                    }
                    c.isExpandedListForFAQs![index] = true;

                    // Initialize the video based on search or default FAQ item
                    c.initializeVideo(
                      c.searchFaqCtrl.text.isNotEmpty
                          ? c.filteredFaqList[index].videoUrl
                          : AppStrings.faqItems[index].videoUrl,
                    );
                  }
                } else {
                  // Logic for other indices (index != 0)
                  if (isExpanded) {
                    // If already expanded, collapse and dispose
                    c.isExpandedListForFAQs![index] = false;
                    c.videoPlayerController.dispose();
                  } else {
                    // If not expanded, expand this FAQ and initialize video
                    c.isExpandedListForFAQs![index] = true;

                    // Initialize video based on search or default FAQ item
                    c.initializeVideo(
                      c.searchFaqCtrl.text.isNotEmpty
                          ? c.filteredFaqList[index].videoUrl
                          : AppStrings.faqItems[index].videoUrl,
                    );

                    // Open FAQ (call the openFAQ method)
                    openFAQ(index, c);
                  }
                }
                c.update();
              },
            ),
          ),
          if (isExpanded)
            Row(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                if (c.isVideoInitialized)
                  Container(
                    width: 720.w,
                    height: 400.h,
                    child: AspectRatio(
                      aspectRatio: c.videoPlayerController.value.aspectRatio,
                      child: Stack(
                        alignment: Alignment.bottomCenter,
                        children: [
                          VideoPlayer(c.videoPlayerController),
                          VideoProgressIndicator(
                            c.videoPlayerController,
                            allowScrubbing: true,
                            colors: const VideoProgressColors(
                              playedColor: AppColors.black,
                            ),
                          ),
                          IconButton(
                            onPressed: c.togglePlayPause,
                            icon: Icon(
                              c.isPlaying ? Icons.pause : Icons.play_arrow,
                              color: AppColors.black,
                              size: 40,
                            ),
                          ),
                        ],
                      ),
                    ),
                  )
                else
                  Container(
                    width: 720.w,
                    height: 400.h,
                    child: const Center(
                      child: CircularProgressIndicator(),
                    ),
                  ),
                SizedBox(height: 160.w),
                Center(
                  child: Container(
                    alignment: Alignment.centerRight,
                    width: 240.w,
                    child: AppText(
                      text: steps,
                      textAlign: TextAlign.left,
                      size: 15.sp,
                      maxLines: 100,
                    ),
                  ),
                ),
              ],
            ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return GetBuilder<OwnerVM>(builder: (c) {
      return Scaffold(
        backgroundColor: AppColors.white,
        body: SafeArea(
          child: Row(
            children: [
              OwnerCollapsibleSidebar(isFaq: true),
              SizedBox(width: 16.w),
              Expanded(
                child: Column(
                  children: [
                    Padding(
                      padding: const EdgeInsets.all(8.0),
                      child: TextField(
                        controller: c.searchFaqCtrl,
                        onChanged: (value) => c.filterFaq(),
                        decoration: InputDecoration(
                          labelText: 'Search FAQs',
                          hintText: 'Type to search...',
                          prefixIcon: const Icon(Icons.search),
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(8),
                          ),
                        ),
                      ),
                    ),
                    Expanded(
                      child: AnimatedList(
                        key: _listKey,
                        controller: _scrollController,
                        initialItemCount: c.filteredFaqList.isNotEmpty
                            ? c.filteredFaqList.length
                            : AppStrings.faqItems.length,
                        itemBuilder: (context, index, animation) {
                          final faqList = c.filteredFaqList.isNotEmpty
                              ? c.filteredFaqList
                              : AppStrings.faqItems;

                          if (index >= faqList.length) return const SizedBox();

                          return faqListView(
                            context,
                            faqList[index].question,
                            animation,
                            c.isExpandedListForFAQs![index],
                            c,
                            index,
                          );
                        },
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      );
    });
  }
}
15/01/25, 3:57 pm - Shivam Gurjar: new
15/01/25, 3:57 pm - Shivam Gurjar: import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: FAQPage(),
    );
  }
}

class FAQPage extends StatefulWidget {
  @override
  _FAQPageState createState() => _FAQPageState();
}

class _FAQPageState extends State<FAQPage> {
  final List<GlobalKey> faqKeys = List.generate(10, (_) => GlobalKey());
  final List<String> faqList = [
    'What is Flutter?',
    'How to use ListView?',
    'What is StatefulWidget?',
    'How to manage state in Flutter?',
    'What are Widgets in Flutter?',
    'How to navigate between screens?',
    'What is Dart?',
    'What is FutureBuilder?',
    'How to use Provider for state management?',
    'What is a CustomPaint in Flutter?'
  ];

  final List<String> answers = [
    'Flutter is an open-source UI software development kit created by Google.',
    'ListView is a scrollable list of widgets.',
    'StatefulWidget is a widget that has mutable state.',
    'State management in Flutter can be done using various techniques like Provider, Riverpod, etc.',
    'Widgets are the basic building blocks of a Flutter app.',
    'Navigator in Flutter is used to manage routes and screens.',
    'Dart is the programming language used by Flutter.',
    'FutureBuilder allows you to build widgets based on asynchronous operations.',
    'Provider is a state management library in Flutter.',
    'CustomPaint allows drawing on a canvas inside a widget.'
  ];

  // Tracking which FAQ item is expanded
  int? expandedIndex;

  void scrollToQuestion(GlobalKey key) {
    final context = key.currentContext;
    if (context != null) {
      Scrollable.ensureVisible(
        context,
        duration: Duration(milliseconds: 500),
        curve: Curves.easeInOut,
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('FAQs'),
      ),
      body: SingleChildScrollView(  // Wrapping ListView inside SingleChildScrollView to prevent overflow
        child: Column(
          children: List.generate(faqList.length, (index) {
            return AnimatedContainer(
              duration: Duration(milliseconds: 300),
              curve: Curves.easeInOut,
              height: expandedIndex == index
                  ? MediaQuery.of(context).size.height
                  : 80, // Expand to full screen
              child: Column(
                children: [
                  ListTile(
                    key: faqKeys[index],
                    title: Text(faqList[index]),
                    subtitle: Text('Tap the + icon to expand'),
                    trailing: IconButton(
                      icon: Icon(expandedIndex == index ? Icons.remove : Icons.add),
                      onPressed: () {
                        setState(() {
                          if (expandedIndex == index) {
                            expandedIndex = null; // Collapse if already expanded
                          } else {
                            expandedIndex = index; // Expand this item
                          }
                          scrollToQuestion(faqKeys[index]);
                        });
                      },
                    ),
                  ),
                  // If expanded, show the answer
                  if (expandedIndex == index)
                   Padding(
  padding: const EdgeInsets.all(16.0),
  child: Container(
    color: Colors.blue,  // Applying color to the container
    child: Text(
      'This is a padded text with a background color',
      style: TextStyle(color: Colors.white),
    ),
  ),
)
                ],
              ),
            );
          }),
        ),
      ),
    );
  }
}
16/01/25, 4:03 pm - Shivam Gurjar: this is working
16/01/25, 4:03 pm - Shivam Gurjar: import 'package:flutter/material.dart';

void main() {
  runApp(QuestionApp());
}

class QuestionApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: QuestionList(),
    );
  }
}

class QuestionList extends StatefulWidget {
  @override
  _QuestionListState createState() => _QuestionListState();
}

class _QuestionListState extends State<QuestionList> {
  final ScrollController _scrollController = ScrollController();
  final List<String> _questions = List.generate(34, (index) => 'Question $index');
  int? _expandedIndex;

  void _scrollToIndex(int index) {
    final offset = index * 60.0; // Assuming each item has a height of 70
    _scrollController.animateTo(
      offset,
      duration: Duration(milliseconds: 300),
      curve: Curves.easeInOut,
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
//       appBar: AppBar(
//         title: Text('FAQ'),
//       ),
      body: ListView.builder(
        controller: _scrollController,
        itemCount: _questions.length,
        itemBuilder: (context, index) {
          final isExpanded = _expandedIndex == index;
          return GestureDetector(
            onTap: () {
              setState(() {
                if (_expandedIndex == index) {
                  _expandedIndex = null;
                } else {
                  _expandedIndex = index;
                  _scrollToIndex(index);
                }
              });
            },
            child: AnimatedContainer(
              duration: Duration(milliseconds: 300),
              color: isExpanded ? Colors.blue.shade100 : Colors.white,
              padding: EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    _questions[index],
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  if (isExpanded)
                    Container(
                      height:720,
                      padding: const EdgeInsets.only(top: 8.0),
                      child: Text(
                        'This is the detailed answer for ${_questions[index]}',
                        style: TextStyle(fontSize: 16),
                      ),
                    ),
                ],
              ),
            ),
          );
        },
      ),
    );
  }
}
18/01/25, 4:44 am - Shivam Gurjar: https://www.researchgate.net/publication/303842610_IoT_based_Smart_Parking_System
18/01/25, 4:51 am - Shivam Gurjar: <Media omitted>
18/01/25, 4:53 am - Shivam Gurjar: https://www.hackerearth.com/blog/developers/smart-city-architecture/
18/01/25, 4:53 am - Shivam Gurjar: smart citiers
18/01/25, 7:12 am - Shivam Gurjar: <Media omitted>
18/01/25, 7:12 am - Shivam Gurjar: <Media omitted>
18/01/25, 7:12 am - Shivam Gurjar: <Media omitted>
18/01/25, 7:12 am - Shivam Gurjar: <Media omitted>
18/01/25, 7:13 am - Shivam Gurjar: <Media omitted>
31/01/25, 1:46 am - Shivam Gurjar: https://www.programiz.com/online-compiler/978otlYxTOf2E
03/02/25, 3:48 pm - Shivam Gurjar: https://youtube.com/shorts/1t6k8K5CHG0?si=DScWnsLANmY28nK7
04/02/25, 6:42 pm - Shivam Gurjar: Replaced the ElevatedButton with AppButton for improved UI consistency.
Added the following buttons using AppButton:

    Report Download
    Edit Restaurant
    Business Hour Cancel and Save buttons.

Restructured the code:

    Created a new file edit_restaurant_widget.dart within the ownerdashboard_widget folder.
    Moved the "Edit Restaurant" functionality into the newly created file for better organization and maintainability.
05/02/25, 1:35 am - Shivam Gurjar: http://192.168.56.1:3000
06/02/25, 9:13 pm - Shivam Gurjar: https://maps.app.goo.gl/Gz4m7gX6BLCtKHzD7
07/02/25, 10:03 pm - Shivam Gurjar: https://chatgpt.com/share/67a635cd-f6a4-8000-b2b8-4d4f3c14cb16
08/02/25, 6:05 am - Shivam Gurjar: <Media omitted>
10/02/25, 4:53 pm - Shivam Gurjar: <Media omitted>
11/02/25, 11:19 pm - Shivam Gurjar: Row(
                                      children: [
                                        RichText(
                                          overflow: TextOverflow.ellipsis,
                                          text: TextSpan(
                                            style: DefaultTextStyle.of(context).style,
                                            children: <TextSpan>[
                                              if (item.itemPrices != null && item.itemPrices!.isNotEmpty) ...[
                                                if (c.timelydiscountApplicable(item) || item.discountPercentage! > 0)
                                                  TextSpan(
                                                    // text: formatPrice(discountedPriceCalculator(item.itemPrices![0].price!, item.defPrice!)), // Your formatted price
                                                    text: formatPrice(item.itemPrices![0].price!), // Your formatted price
                                                    style: TextStyle(
                                                      color: AppColors.dimTextColor,
                                                      fontWeight: FontWeight.w500,
                                                      decoration: TextDecoration.lineThrough,
                                                      fontFamily: AppFonts.interRegular,
                                                      fontSize: 12, // Assuming you use flutter_screenutil for responsive font size
                                                    ),
                                                  ),
                                                TextSpan(text: ' '),
                                                TextSpan(
                                                  text: formatPrice(c.timelydiscountApplicable(item)
                                                      ? discountedPriceCalculator(
                                                          item.itemPrices![0].price!, item.timelyDiscountPercentage!)
                                                      : item.discountPercentage! > 0
                                                          ? discountedPriceCalculator(item.itemPrices![0].price!, item.discountPercentage!)
                                                          : item.itemPrices![0].price!), // Your formatted price
                                                  style: TextStyle(
                                                    color: AppColors.black,
                                                    fontWeight: FontWeight.w500,
                                                    fontFamily: AppFonts.interRegular,
                                                    fontSize: 12, // Assuming you use flutter_screenutil for responsive font size
                                                  ),
                                                ),
                                              ],
                                              TextSpan(
                                                text: ' - ',
                                                style: TextStyle(
                                                  color: AppColors.black,
                                                  fontWeight: FontWeight.w500,
                                                  fontFamily: AppFonts.interRegular,
                                                  fontSize: 12, // Keep the dash the same size as price or adjust as needed
                                                ),
                                              ),
                                              TextSpan(
                                                text: '${item.itemPrices![0].size}'.capitalize,
                                                // Your quantity
                                                style: TextStyle(
                                                  color: AppColors.dimTextColor, // A lighter color for the subtitle
                                                  fontWeight: FontWeight.w400, // A lighter font weight
                                                  fontFamily: AppFonts.interRegular,
                                                  fontSize: 10, // Smaller font size for the quantity
                                                  overflow: TextOverflow.ellipsis,
                                                ),
                                              ),
                                            ],
                                          ),
                                        )
                                      ],
                                    )
                                  : RichText(
                                      overflow: TextOverflow.ellipsis,
                                      text: TextSpan(style: DefaultTextStyle.of(context).style, children: <TextSpan>[
                                        if (c.timelydiscountApplicable(item) || item.discountPercentage! > 0)
                                          TextSpan(
                                            text: formatPrice(item.defPrice!), // Yo
                                            style: TextStyle(
                                              color: AppColors.dimTextColor,
                                              fontWeight: FontWeight.w500,
                                              decoration: TextDecoration.lineThrough,
                                              fontFamily: AppFonts.interRegular,
                                              fontSize: 12,
                                            ),
                                          ),
                                        TextSpan(text: ' '),
                                        TextSpan(
                                          text: formatPrice(c.timelydiscountApplicable(item)
                                              ? discountedPriceCalculator(item.defPrice!, item.timelyDiscountPercentage!)
                                              : item.discountPercentage! > 0
                                                  ? discountedPriceCalculator(item.defPrice!, item.discountPercentage!)
                                                  : item.defPrice!),
                                          style: TextStyle(
                                            color: AppColors.black,
                                            fontWeight: FontWeight.w500,
                                            fontFamily: AppFonts.interRegular,
                                            fontSize: 12,
                                          ),
                                        ),
                                      ]),
                                    ),
11/02/25, 11:38 pm - Shivam Gurjar: Expanded(
                          child: Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Row(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  if (categoryLabelId != null)
                                    Image.asset(
                                      AppIcons.labelIconMap[categoryLabelId]!,
                                      height: 15,
                                      width: 15,
                                    ),
                                  SizedBox(
                                    width: 4,
                                  ),
                                  Expanded(
                                    child: Container(
                                      child: AppText(
                                        text: '${item.name}'.capitalize!,
                                        color: AppColors.black,
                                        fontWeight: FontWeight.bold,
                                        fontFamily: AppFonts.manjariRegular,
                                        size: 14,
                                        maxLines: 2,
                                        overflow: TextOverflow.ellipsis,
                                        height: 1.3,
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                              SizedBox(height: 8),
                              item.hasQuantity!
                                  ? Row(
                                      children: [
                                        RichText(
                                          overflow: TextOverflow.ellipsis,
                                          text: TextSpan(
                                            style: DefaultTextStyle.of(context).style,
                                            children: <TextSpan>[
                                              if (item.itemPrices != null && item.itemPrices!.isNotEmpty) ...[
                                                if (c.timelydiscountApplicable(item) || item.discountPercentage! > 0)
                                                  TextSpan(
                                                    // text: formatPrice(discountedPriceCalculator(item.itemPrices![0].price!, item.defPrice!)), // Your formatted price
                                                    text: formatPrice(item.itemPrices![0].price!), // Your formatted price
                                                    style: TextStyle(
                                                      color: AppColors.dimTextColor,
                                                      fontWeight: FontWeight.w500,
                                                      decoration: TextDecoration.lineThrough,
                                                      fontFamily: AppFonts.interRegular,
                                                      fontSize: 12, // Assuming you use flutter_screenutil for responsive font size
                                                    ),
                                                  ),
                                                TextSpan(text: ' '),
                                                TextSpan(
                                                  text: formatPrice(c.timelydiscountApplicable(item)
                                                      ? discountedPriceCalculator(
                                                          item.itemPrices![0].price!, item.timelyDiscountPercentage!)
                                                      : item.discountPercentage! > 0
                                                          ? discountedPriceCalculator(item.itemPrices![0].price!, item.discountPercentage!)
                                                          : item.itemPrices![0].price!), // Your formatted price
                                                  style: TextStyle(
                                                    color: AppColors.black,
                                                    fontWeight: FontWeight.w500,
                                                    fontFamily: AppFonts.interRegular,
                                                    fontSize: 12, // Assuming you use flutter_screenutil for responsive font size
                                                  ),
                                                ),
                                              ],
                                              TextSpan(
                                                text: ' - ',
                                                style: TextStyle(
                                                  color: AppColors.black,
                                                  fontWeight: FontWeight.w500,
                                                  fontFamily: AppFonts.interRegular,
                                                  fontSize: 12, // Keep the dash the same size as price or adjust as needed
                                                ),
                                              ),
                                              TextSpan(
                                                text: '${item.itemPrices![0].size}'.capitalize,
                                                // Your quantity
                                                style: TextStyle(
                                                  color: AppColors.dimTextColor, // A lighter color for the subtitle
                                                  fontWeight: FontWeight.w400, // A lighter font weight
                                                  fontFamily: AppFonts.interRegular,
                                                  fontSize: 10, // Smaller font size for the quantity
                                                  overflow: TextOverflow.ellipsis,
                                                ),
                                              ),
                                            ],
                                          ),
                                        )
                                      ],
                                    )
                                  : RichText(
                                      overflow: TextOverflow.ellipsis,
                                      text: TextSpan(style: DefaultTextStyle.of(context).style, children: <TextSpan>[
                                        if (c.timelydiscountApplicable(item) || item.discountPercentage! > 0)
                                          TextSpan(
                                            text: formatPrice(item.defPrice!), // Yo
                                            style: TextStyle(
                                              color: AppColors.dimTextColor,
                                              fontWeight: FontWeight.w500,
                                              decoration: TextDecoration.lineThrough,
                                              fontFamily: AppFonts.interRegular,
                                              fontSize: 12,
                                            ),
                                          ),
                                        TextSpan(text: ' '),
                                        TextSpan(
                                          text: formatPrice(c.timelydiscountApplicable(item)
                                              ? discountedPriceCalculator(item.defPrice!, item.timelyDiscountPercentage!)
                                              : item.discountPercentage! > 0
                                                  ? discountedPriceCalculator(item.defPrice!, item.discountPercentage!)
                                                  : item.defPrice!),
                                          style: TextStyle(
                                            color: AppColors.black,
                                            fontWeight: FontWeight.w500,
                                            fontFamily: AppFonts.interRegular,
                                            fontSize: 12,
                                          ),
                                        ),
                                      ]),
                                    ),
                              SizedBox(height: 8),
                              AppText(
                                text: item.desc!,
                                size: 12,
                                color: AppColors.black,
                                fontFamily: AppFonts.montserratRegular,
                                fontWeight: FontWeight.w500,
                                maxLines: 3,
                                overflow: TextOverflow.ellipsis,
                              )
                            ],
                          ),
                        ),
12/02/25, 11:11 pm - Shivam Gurjar: Expanded(
                                                  child: c.menuGroupsList.isEmpty
                                                      ? Container(
                                                          child: Text('Nothing to show'.capitalize!),
                                                        )
                                                      : c.isGroupEditMode
                                                          //C1 GROUP EDIT MODE
                                                          ? Scaffold(
                                                              body: Container(
                                                                color: AppColors.white,
                                                                child: Padding(
                                                                  padding: const EdgeInsets.all(8.0),
                                                                  child: Column(
                                                                    crossAxisAlignment: CrossAxisAlignment.stretch,
                                                                    children: [
                                                                      Expanded(
                                                                        child: ListView.builder(
                                                                          itemCount: c.menuGroupsList.length,
                                                                          itemBuilder: (context, index) {
                                                                            return Padding(
                                                                              //Padding on the last element of menugroupslist in order to cope with delete icon being hidden by floating button for adding group.
                                                                              padding: EdgeInsets.only(
                                                                                  bottom: index == c.menuGroupsList.length - 1
                                                                                      ? hght * 0.1
                                                                                      : 0),
                                                                              child: MouseRegion(
                                                                                cursor: SystemMouseCursors.click,
                                                                                child: GestureDetector(
                                                                                  onTap: () {
                                                                                    c.onGroupSelected(c.menuGroupsList[index]);
                                                                                  },
                                                                                  child: Card(
                                                                                    elevation: 2,
                                                                                    color: AppColors.white,
                                                                                    shape: RoundedRectangleBorder(
                                                                                        borderRadius: BorderRadius.circular(0)),
                                                                                    child: Container(
                                                                                      height: hght * 0.1,
                                                                                      color: c.selectedGroup == null
                                                                                          ? AppColors.white
                                                                                          : c.menuGroupsList[index].gId ==
                                                                                                  c.selectedGroup!.gId
                                                                                              ? const Color.fromARGB(255, 230, 230, 230)
                                                                                              : AppColors.white,
                                                                                      alignment: Alignment.centerLeft,
                                                                                      child: Padding(
                                                                                        padding: EdgeInsets.all(8.0),
                                                                                        child: Row(
                                                                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                                          children: [
                                                                                            AppText(
                                                                                              text: c
                                                                                                  .menuGroupsList[index].gname!.capitalize!,
                                                                                              color: AppColors.black,
                                                                                              size: 24,
                                                                                              fontFamily: AppFonts.manjariRegular,
                                                                                              fontWeight: FontWeight.w500,
                                                                                            ),
                                                                                            Row(
                                                                                              mainAxisSize: MainAxisSize.min,
                                                                                              children: [
                                                                                                //DELETE BUTTON
                                                                                                IconButton(
                                                                                                  onPressed: () {
                                                                                                    final checker = c.menuGroupsList[index]
                                                                                                            .items?.isEmpty ??
                                                                                                        true;
                                                                                                    if (checker) {
                                                                                                      AppDialogbox().showDialog(
                                                                                                        contentText:
                                                                                                            'The group will be deleted, do you wish to continue?',
                                                                                                        onContinue: () {
                                                                                                          Get.back();
                                                                                                          c.deleteGroup(context,
                                                                                                              c.menuGroupsList[index].gId!);
                                                                                                        },
                                                                                                        onCancel: () {
                                                                                                          Get.back();
                                                                                                        },
                                                                                                      );
                                                                                                    } else {
                                                                                                      Get.dialog(
                                                                                                        AlertDialog(
                                                                                                          shape: RoundedRectangleBorder(
                                                                                                            borderRadius:
                                                                                                                BorderRadius.circular(0),
                                                                                                          ),
                                                                                                          title: AppText(
                                                                                                            text: 'Group contains Items!!',
                                                                                                            color: AppColors.black,
                                                                                                            size: 20.sp,
                                                                                                            fontFamily:
                                                                                                                AppFonts.montserratRegular,
                                                                                                            fontWeight: FontWeight.w600,
                                                                                                          ),
                                                                                                          content: AppText(
                                                                                                            text:
                                                                                                                "This group cannot be deleted because it contains some items",
                                                                                                            color: AppColors.black,
                                                                                                            size: 16.sp,
                                                                                                            fontFamily:
                                                                                                                AppFonts.montserratRegular,
                                                                                                            fontWeight: FontWeight.w500,
                                                                                                          ),
                                                                                                          actions: [
                                                                                                            ElevatedButton(
                                                                                                              onPressed: Get.back,
                                                                                                              style:
                                                                                                                  ElevatedButton.styleFrom(
                                                                                                                backgroundColor:
                                                                                                                    AppColors.black,
                                                                                                                shape:
                                                                                                                    RoundedRectangleBorder(
                                                                                                                  borderRadius:
                                                                                                                      BorderRadius.circular(
                                                                                                                          5),
                                                                                                                ),
                                                                                                              ),
                                                                                                              child: AppText(
                                                                                                                text: 'OK',
                                                                                                                size: 12.sp,
                                                                                                                color: AppColors.white,
                                                                                                                fontFamily: AppFonts
                                                                                                                    .montserratRegular,
                                                                                                                fontWeight: FontWeight.w500,
                                                                                                              ),
                                                                                                            ),
                                                                                                          ],
                                                                                                          actionsAlignment:
                                                                                                              MainAxisAlignment.end,
                                                                                                          actionsPadding: EdgeInsets.only(
                                                                                                              top: 32,
                                                                                                              bottom: 16,
                                                                                                              right: 8,
                                                                                                              left: 8),
                                                                                                        ),
                                                                                                      );
                                                                                                    }
                                                                                                  },
                                                                                                  icon: Icon(
                                                                                                    Icons.delete,
                                                                                                  ),
                                                                                                ),
                                                                                                //ARROW ICON
                                                                                                Icon(
                                                                                                  Icons.navigate_next,
                                                                                                  size: 24,
                                                                                                  color: AppColors.black,
                                                                                                ),
                                                                                              ],
                                                                                            ),
                                                                                          ],
                                                                                        ),
                                                                                      ),
                                                                                    ),
                                                                                  ),
                                                                                ),
                                                                              ),
                                                                            );
                                                                          },
                                                                        ),
                                                                      ),
                                                                    ],
                                                                  ),
                                                                ),
                                                              ),
                                                              // FLOATING ACTION BUTTON FOR ADDING GROUP
                                                              floatingActionButton: FloatingActionButton(
                                                                onPressed: () {
                                                                  c.newGroupNameCtrl.clear();
                                                                  c.newGroupIconId = 1;
                                                                  c.selectedGroup = null;
                                                                  Get.dialog(AddGroupAlertbox());
                                                                  c.update();
                                                                },
                                                                backgroundColor: AppColors.black,
                                                                tooltip: 'Add Group',
                                                                child: Icon(
                                                                  Icons.add,
                                                                  color: AppColors.white,
                                                                ),
                                                              ),
                                                            )
                                                          //C1 ITEM EDIT MODE
                                                          : Padding(
                                                              padding: const EdgeInsets.symmetric(vertical: 8.0),
                                                              child: TabBarView(
                                                                children: c.menuGroupsList.where((group) => group.items!.isNotEmpty).map(
                                                                  (groups) {
                                                                    var filterItems = groups.items!.toList();
                                                                    return SizedBox(
                                                                      child: ListView.builder(
                                                                        itemCount: filterItems.length,
                                                                        itemBuilder: (context, index) {
                                                                          MenuItem item = filterItems[index];
                                                                          return MouseRegion(
                                                                            cursor: SystemMouseCursors.click,
                                                                            child: GestureDetector(
                                                                              onTap: () {
                                                                                c.onItemSelected(item);
                                                                              },
                                                                              child: Card(
                                                                                elevation: 1,
                                                                                color: AppColors.white,
                                                                                shape: RoundedRectangleBorder(
                                                                                    borderRadius: BorderRadius.circular(0)),
                                                                                child: Container(
                                                                                  height: hght * 0.1,
                                                                                  color: AppColors.white,
                                                                                  child: Row(
                                                                                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                                                    children: [
                                                                                      SizedBox(width: 8),
                                                                                      Expanded(
                                                                                        flex: 2,
                                                                                        child: Container(
                                                                                          child: Column(
                                                                                            crossAxisAlignment: CrossAxisAlignment.start,
                                                                                            mainAxisAlignment: MainAxisAlignment.start,
                                                                                            children: [
                                                                                              AppText(
                                                                                                text: '${item.name}'.capitalize!,
                                                                                                color: AppColors.black,
                                                                                                fontWeight: FontWeight.w500,
                                                                                                fontFamily: AppFonts.interBold,
                                                                                                size: 20.sp,
                                                                                              ),
                                                                                              AppText(
                                                                                                text: item.desc.toString().capitalize!,
                                                                                                overflow: TextOverflow.ellipsis,
                                                                                                maxLines: 1,
                                                                                                color: AppColors.black,
                                                                                                fontWeight: FontWeight.w400,
                                                                                                fontFamily: AppFonts.interRegular,
                                                                                                size: 14.sp,
                                                                                              ),
                                                                                            ],
                                                                                          ),
                                                                                        ),
                                                                                      ),
                                                                                    ],
                                                                                  ),
                                                                                ),
                                                                              ),
                                                                            ),
                                                                          );
                                                                        },
                                                                      ),
                                                                    );
                                                                  },
                                                                ).toList(),
                                                              ),
                                                            ),
                                                )
                                              ],
                                            ),
                                          )
                                        //SEARCH VIEW
                                        : ListView.builder(
                                            itemCount: c.filteredMenuItemsList.length,
                                            itemBuilder: (context, index) {
                                              MenuItem item = c.filteredMenuItemsList[index];
                                              return MouseRegion(
                                                cursor: SystemMouseCursors.click,
                                                child: GestureDetector(
                                                  onTap: () {
                                                    c.onItemSelected(item);
                                                  },
                                                  child: Card(
                                                    elevation: 1,
                                                    color: AppColors.white,
                                                    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(0)),
                                                    child: Container(
                                                      height: hght * 0.1,
                                                      color: AppColors.white,
                                                      child: Row(
                                                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                                        children: [
                                                          SizedBox(width: 8),
                                                          Expanded(
                                                            flex: 2,
                                                            child: Container(
                                                              child: Column(
                                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                                mainAxisAlignment: MainAxisAlignment.start,
                                                                children: [
                                                                  AppText(
                                                                    text: '${item.name}'.capitalize!,
                                                                    color: AppColors.black,
                                                                    fontWeight: FontWeight.w500,
                                                                    fontFamily: AppFonts.interBold,
                                                                    size: 20.sp,
                                                                  ),
                                                                  AppText(
                                                                    overflow: TextOverflow.ellipsis,
                                                                    maxLines: 1,
                                                                    text: item.desc.toString().capitalize!,
                                                                    color: AppColors.black,
                                                                    fontWeight: FontWeight.w400,
                                                                    fontFamily: AppFonts.interRegular,
                                                                    size: 14.sp,
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                          ),
                                                        ],
                                                      ),
                                                    ),
                                                  ),
                                                ),
                                              );
                                            },
                                          ),
                                  )
                                ],
                              ),
                            ),
                          ),
                        ),this is complete you make scaffold independent but come only in groupedit mode and should not depend on menu group list empty
13/02/25, 11:00 pm - Shivam Gurjar: <Media omitted>
14/02/25, 4:59 pm - Shivam Gurjar: <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Voice Controlled Website</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      text-align: center;
      padding: 20px;
    }
    #navbar {
      display: none;
      background-color: #333;
      padding: 15px;
      color: white;
      margin-bottom: 20px;
    }
    #text-area {
      width: 80%;
      height: 150px;
      font-size: 18px;
      padding: 10px;
      margin-bottom: 20px;
    }
    button {
      padding: 10px 20px;
      font-size: 16px;
      margin: 5px;
      cursor: pointer;
    }
    .active {
      display: block;
    }
  </style>
</head>
<body>

  <h1>Voice Controlled Website</h1>
  <div id="navbar">Navbar Opened! Say "Close navbar" to hide.</div>

  <textarea id="text-area" placeholder="Start voice typing here..."></textarea>
  <br>
  <button onclick="startRecognition()">🎙 Start Listening</button>
  <button onclick="stopRecognition()">🛑 Stop Listening</button>

  <p id="status">Status: Not Listening</p>

  <script>
    const recognition = new webkitSpeechRecognition();
    recognition.continuous = true;
    recognition.lang = 'en-US';

    const navbar = document.getElementById('navbar');
    const textArea = document.getElementById('text-area');
    const status = document.getElementById('status');

    let isTyping = false;

    // Start Recognition
    function startRecognition() {
      recognition.start();
      status.textContent = "Status: Listening...";
    }

    // Stop Recognition
    function stopRecognition() {
      recognition.stop();
      status.textContent = "Status: Not Listening";
    }

    // Handle Voice Commands
    recognition.onresult = (event) => {
      const command = event.results[event.results.length - 1][0].transcript.trim().toLowerCase();
      console.log("Command:", command);

      if (command.includes('open navbar') || command.includes('show navbar')) {
        navbar.classList.add('active');
      } 
      else if (command.includes('close navbar') || command.includes('hide navbar')) {
        navbar.classList.remove('active');
      } 
      else if (command.includes('start typing') || command.includes('type text')) {
        isTyping = true;
      } 
      else if (command.includes('stop typing')) {
        isTyping = false;
      } 
      else {
        if (isTyping) {
          textArea.value += command + ' ';
        }
      }
    };

    recognition.onerror = (event) => {
      console.error('Speech recognition error:', event.error);
      status.textContent = "Error: " + event.error;
    };
  </script>

</body>
</html>
14/02/25, 5:03 pm - Shivam Gurjar: <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Voice Controlled Website</title>
  <style>
    body { font-family: Arial, sans-serif; text-align: center; padding: 20px; }
    #navbar { display: none; background-color: #333; padding: 15px; color: white; margin-bottom: 20px; }
    #text-area { width: 80%; height: 150px; font-size: 18px; padding: 10px; margin-bottom: 20px; }
    button { padding: 10px 20px; font-size: 16px; margin: 5px; cursor: pointer; }
    .active { display: block; }
  </style>
</head>
<body>

  <h1>Voice Controlled Website</h1>
  <div id="navbar">Navbar Opened! Say "Close navbar" to hide.</div>

  <textarea id="text-area" placeholder="Start voice typing here..."></textarea>
  <br>
  <button onclick="startRecognition()">🎙 Start Listening</button>
  <button onclick="stopRecognition()">🛑 Stop Listening</button>

  <p id="status">Status: Not Listening</p>

  <script>
    // Compatibility fix
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    const recognition = new SpeechRecognition();

    recognition.continuous = true;
    recognition.lang = 'en-US';

    const navbar = document.getElementById('navbar');
    const textArea = document.getElementById('text-area');
    const status = document.getElementById('status');

    let isTyping = false;

    // Start Listening
    function startRecognition() {
      recognition.start();
      status.textContent = "Status: Listening...";
      console.log("Listening started...");
    }

    // Stop Listening
    function stopRecognition() {
      recognition.stop();
      status.textContent = "Status: Not Listening";
      console.log("Listening stopped.");
    }

    // Process Results
    recognition.onresult = (event) => {
      const command = event.results[event.results.length - 1][0].transcript.trim().toLowerCase();
      console.log("Command:", command);

      if (command.includes('open navbar') || command.includes('show navbar')) {
        navbar.classList.add('active');
      } else if (command.includes('close navbar') || command.includes('hide navbar')) {
        navbar.classList.remove('active');
      } else if (command.includes('start typing') || command.includes('type text')) {
        isTyping = true;
      } else if (command.includes('stop typing')) {
        isTyping = false;
      } else {
        if (isTyping) {
          textArea.value += command + ' ';
        }
      }
    };

    // Handle Errors
    recognition.onerror = (event) => {
      console.error('Speech recognition error:', event.error);
      status.textContent = "Error: " + event.error;
    };

    recognition.onend = () => {
      status.textContent = "Status: Not Listening (Stopped Automatically)";
    };
  </script>

</body>
</html>
15/02/25, 5:27 am - Shivam Gurjar: I am a builder, not a follower. I choose mastery over mediocrity, truth over illusion, and impact over applause. I am rare—and I honor that.”
16/02/25, 9:37 pm - Shivam Gurjar: // Wrap(
                        //   alignment: WrapAlignment.start,
                        //   spacing: 8,
                        //   children: c.allergyTagsList.map((tag) {
                        //     bool isSelected = c.selectedAllergyTagsList.contains(tag.name);
                        //     debugPrint(" from here tag: ${tag.name}, Selected: $isSelected");
                        //     return ChoiceChip(
                        //       shadowColor: AppColors.transparent,
                        //       label: AppText(
                        //         text: tag.name ?? 'string',
                        //         color: AppColors.white,
                        //         size: 12,
                        //       ),
                        //       selected: isSelected,
                        //       onSelected: (selected) {
                        //         if (selected) {
                        //           // if (tag.name == 'Veg' || tag.name == 'Non-Veg' || tag.name == 'Vegan') {
                        //           //   // Remove any existing dietary tags before adding the new one
                        //           //   c.selectedAllergyTagsList.removeWhere((tag) => tag == 'Veg' || tag == 'Non-Veg' || tag == 'Vegan');
                        //           // }
                        //           c.selectedAllergyTagsList.add(tag.name!);
                        //           debugPrint(" allergy Added label: ${tag.name}");
                        //         } else {
                        //           c.selectedAllergyTagsList.remove(tag.name);
                        //           debugPrint(" allergy Removed label: ${tag.name}");
                        //         }
                        //         // Print the updated list of selected labels
                        //         debugPrint("allergy Updated selectedAllergyTagsList: ${c.selectedAllergyTagsList}");
                        //         c.update();
                        //       },
                        //       selectedColor: AppColors.black,
                        //       backgroundColor: AppColors.bottomBar,
                        //     );
                        //   }).toList(),
                        // ),
18/02/25, 6:40 am - Shivam Gurjar: <Media omitted>
19/02/25, 4:52 pm - Shivam Gurjar: Domicile and caste certificate
19/02/25, 4:52 pm - Shivam Gurjar: Father income certificate
19/02/25, 4:52 pm - Shivam Gurjar: Marksheet 1 2 and 3 and 4
19/02/25, 6:22 pm - Shivam Gurjar: <Media omitted>
19/02/25, 6:22 pm - Shivam Gurjar: <Media omitted>
19/02/25, 6:22 pm - Shivam Gurjar: <Media omitted>
19/02/25, 6:22 pm - Shivam Gurjar: <Media omitted>
19/02/25, 6:22 pm - Shivam Gurjar: <Media omitted>
19/02/25, 6:36 pm - Shivam Gurjar: <Media omitted>
20/02/25, 2:13 pm - Shivam Gurjar: case study  attacks with category
20/02/25, 7:42 pm - Shivam Gurjar: Application form done
20/02/25, 7:42 pm - Shivam Gurjar: Admission format done
20/02/25, 7:42 pm - Shivam Gurjar: 4 color photo
20/02/25, 7:42 pm - Shivam Gurjar: Fee receipt
20/02/25, 8:02 pm - Shivam Gurjar: <Media omitted>
20/02/25, 8:11 pm - Shivam Gurjar: <Media omitted>
20/02/25, 8:11 pm - Shivam Gurjar: <Media omitted>
24/02/25, 3:58 am - Shivam Gurjar: <Media omitted>
25/02/25, 10:19 pm - Shivam Gurjar: H
05/03/25, 9:17 pm - Shivam Gurjar: import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:restaurent_app/modules/owner/owner_vm.dart';
import 'package:restaurent_app/resources/app_colors.dart';
import 'package:restaurent_app/resources/app_fonts.dart';
import 'package:restaurent_app/resources/app_images.dart';
import 'package:restaurent_app/resources/app_routes.dart';
import 'package:restaurent_app/utils/securedStorage.dart';
import 'package:restaurent_app/utils/widgets/app_dialogbox.dart';
import 'package:web/web.dart' as web;

class OwnerCollapsibleSidebar1 extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    double screenWidth = MediaQuery.of(context).size.width;
    return GetBuilder<OwnerVM>(
      builder: (controller) {
        return MouseRegion(
          onEnter: (_) {
            if (screenWidth > 800) {
              controller.isCollapsed = false;
              controller.update();
            }
          },
          onExit: (_) {
            if (screenWidth > 800) {
              Future.delayed(Duration(milliseconds: 200), () {
                if (controller.isCollapsed != true) {
                  controller.isCollapsed = true;
                  controller.update();
                }
              });
            }
          },
          child: AnimatedContainer(
            duration: Duration(milliseconds: 300),
            width: controller.isCollapsed ? 70 : 250,
            decoration: BoxDecoration(
              color: AppColors.black,
              boxShadow: [
                BoxShadow(
                  color: AppColors.boxShadow,
                  offset: Offset(4, 0),
                  spreadRadius: 0.01,
                  blurRadius: 10,
                ),
              ],
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                SizedBox(height: 20),
                Padding(
                  padding: EdgeInsets.symmetric(horizontal: 15),
                  child: Row(
                    children: [
                      Image.asset(AppImages.weQRedLogo, width: 30),
                      if (!controller.isCollapsed) ...[
                        SizedBox(width: 10),
                        Flexible(
                          child: Text(
                            "weQRed",
                            overflow: TextOverflow.ellipsis,
                            softWrap: false,
                            style: TextStyle(
                              color: Colors.white,
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                      ],
                    ],
                  ),
                ),
                SizedBox(height: 30),
                Expanded(
                  child: ListView(
                    padding: EdgeInsets.zero,
                    children: [
                      Padding(
                        padding: const EdgeInsets.fromLTRB(0, 70, 0, 0),
                        child: Column(
                          children: [
                            for (var item in [
                              {'icon': Icons.dashboard, 'text': 'Dashboard', 'route': AppRoutes.ownerDashboard},
                              {'icon': Icons.list, 'text': 'Orders', 'route': AppRoutes.ownerOrders},
                              {'icon': Icons.food_bank_outlined, 'text': 'Kitchens', 'route': AppRoutes.ownerKitchens},
                              {'icon': Icons.fastfood_outlined, 'text': 'Menu', 'route': AppRoutes.ownerMenu},
                              {'icon': Icons.format_quote, 'text': 'FAQ', 'route': AppRoutes.ownerFAQ},
                            ])
                              Padding(
                                padding: EdgeInsets.symmetric(horizontal: 8, vertical: 5),
                                child: InkWell(
                                  borderRadius: BorderRadius.circular(10),
                                  onTap: () => Get.toNamed(item['route'] as String, arguments: {'selectedRoute': item['route']}),
                                  child: AnimatedContainer(
                                    duration: Duration(milliseconds: 300),
                                    padding: EdgeInsets.symmetric(horizontal: 10, vertical: 12),
                                    decoration: BoxDecoration(
                                      borderRadius: BorderRadius.circular(10),
                                      color: Get.currentRoute == item['route'] ? Colors.white.withOpacity(0.1) : Colors.transparent,
                                    ),
                                    child: Row(
                                      mainAxisSize: MainAxisSize.min,
                                      children: [
                                        Icon(item['icon'] as IconData,
                                            color: Get.currentRoute == item['route'] ? AppColors.expBlue5 : Colors.white, size: 22),
                                        if (!controller.isCollapsed) ...[
                                          SizedBox(width: 10),
                                          Expanded(
                                            child: Text(
                                              item['text'] as String,
                                              maxLines: 1,
                                              overflow: TextOverflow.ellipsis,
                                              style: TextStyle(
                                                color: AppColors.white,
                                                fontSize: 18,
                                                fontFamily: AppFonts.poiretOneRegular,
                                              ),
                                            ),
                                          ),
                                        ],
                                      ],
                                    ),
                                  ),
                                ),
                              ),
                          ],
                        ),
                      )
                    ],
                  ),
                ),
                Divider(color: Colors.white30),
                Padding(
                  padding: EdgeInsets.symmetric(horizontal: 10),
                  child: Column(
                    children: [
                      IconButton(
                        onPressed: () {
                          AppDialogbox().showDialog(
                            titleText: 'Logout',
                            contentText: 'Do you want to continue?',
                            onContinue: () async {
                              await SecuredStorage.clearSecureStorage();
                              Get.offAllNamed(AppRoutes.loginView, parameters: {'loginRole': 'Owner'});
                            },
                            onCancel: () => Get.back(),
                          );
                        },
                        icon: Icon(Icons.logout, color: Colors.white, size: 22),
                      ),
                      IconButton(
                        onPressed: () {
                          final web.Element? doc = web.document.documentElement;
                          if (web.document.fullscreenElement != null) {
                            web.document.exitFullscreen();
                          } else {
                            doc?.requestFullscreen();
                          }
                        },
                        icon: Icon(Icons.fullscreen, color: Colors.white, size: 22),
                      ),
                    ],
                  ),
                ),
                SizedBox(height: 10),
              ],
            ),
          ),
        );
      },
    );
  }
}
06/03/25, 10:42 pm - Shivam Gurjar: <Media omitted>
06/03/25, 10:43 pm - Shivam Gurjar: <Media omitted>
10/03/25, 7:02 am - Shivam Gurjar: <Media omitted>
10/03/25, 7:15 am - Shivam Gurjar: // ignore_for_file: prefer_const_constructors

import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:restaurent_app/modules/owner/owner_vm.dart';
import 'package:restaurent_app/resources/app_colors.dart';
import 'package:restaurent_app/resources/app_fonts.dart';
import 'package:restaurent_app/resources/app_images.dart';
import 'package:restaurent_app/resources/app_routes.dart';
import 'package:restaurent_app/utils/securedStorage.dart';
import 'package:restaurent_app/utils/widgets/app_dialogbox.dart';
import 'package:web/web.dart' as web;

class OwnerCollapsibleSidebar1 extends StatelessWidget {
  OwnerCollapsibleSidebar1({super.key});

  @override
  Widget build(BuildContext context) {
    double screenWidth = MediaQuery.of(context).size.width;

    return GetBuilder<OwnerVM>(
      builder: (controller) {
        return MouseRegion(
          onEnter: (_) {
            if (screenWidth > 800 && !controller.isSidebarManuallyToggled) {
              controller.setMouseInside(true);
              controller.expandSidebar();
            }
          },
          onExit: (_) {
            if (screenWidth > 800 && !controller.isSidebarManuallyToggled) {
              controller.setMouseInside(false);
            }
          },
          child: AnimatedContainer(
            curve: Curves.easeInOutCubic,
            duration: Duration(milliseconds: 300),
            width: controller.isSidebarExpanded ? 250 : 70,
            decoration: BoxDecoration(
              color: AppColors.black,
              boxShadow: [
                BoxShadow(
                  color: AppColors.boxShadow,
                  offset: Offset(4, 0),
                  spreadRadius: 0.01,
                  blurRadius: 10,
                ),
              ],
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                SizedBox(height: 20),

                // Sidebar Header (Logo + Title)
                Padding(
                  padding: EdgeInsets.symmetric(horizontal: 15),
                  child: Row(
                    children: [
                      IconButton(
                        icon: Image.asset(
                          AppImages.weQRedLogo,
                          width: 24, // Adjust width
                          height: 24, // Adjust height
                          fit: BoxFit.cover,
                        ),
                        // icon: Icon(
                        //   controller.isSidebarExpanded ? Icons.menu_open : Icons.menu,
                        //   color: Colors.white,
                        // ),
                        onPressed: () {
                          controller.toggleSidebarManually(); // Toggle via button
                        },
                      ),
                      AnimatedContainer(
                        duration: Duration(milliseconds: 400),
                        width: controller.isSidebarExpanded ? 10 : 0,
                      ),
                      // ConstrainedBox(
                      //   constraints: BoxConstraints(
                      //     maxWidth: controller.isSidebarExpanded ? 30 : 0,
                      //     maxHeight: 40,
                      //   ),
                      //   child: Image.asset(
                      //     AppImages.weQRedLogo,
                      //     fit: BoxFit.contain,
                      //   ),
                      // ),
                      if (controller.isSidebarExpanded) ...[
                        SizedBox(width: 10),
                        Flexible(
                          child: AnimatedOpacity(
                            duration: Duration(milliseconds: 300),
                            opacity: controller.isTextVisible ? 1.0 : 0.0,
                            child: Text(
                              "weQRed",
                              overflow: TextOverflow.ellipsis,
                              softWrap: false,
                              style: TextStyle(
                                color: Colors.green,
                                fontSize: 18,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                        ),
                      ],
                    ],
                  ),
                ),

                SizedBox(height: 30),

                // Sidebar Menu List
                Expanded(
                  child: ListView(
                    padding: EdgeInsets.zero,
                    children: [
                      Padding(
                        padding: const EdgeInsets.fromLTRB(0, 70, 0, 0),
                        child: Column(
                          children: [
                            SidebarItem(
                              icon: Icons.dashboard,
                              label: "Dashboard",
                              route: AppRoutes.ownerDashboard,
                            ),
                            SidebarItem(
                              icon: Icons.list,
                              label: "Orders",
                              route: AppRoutes.ownerOrders,
                            ),
                            SidebarItem(
                              icon: Icons.food_bank_outlined,
                              label: "Kitchens",
                              route: AppRoutes.ownerKitchens,
                            ),
                            SidebarItem(
                              icon: Icons.fastfood_outlined,
                              label: "Menu",
                              route: AppRoutes.ownerMenu,
                            ),
                            SidebarItem(
                              icon: Icons.format_quote,
                              label: "FAQ",
                              route: AppRoutes.ownerFAQ,
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),

                // Logout & Fullscreen Buttons
                Divider(color: Colors.white30),
                Padding(
                  padding: EdgeInsets.symmetric(horizontal: 10),
                  child: Column(
                    children: [
                      IconButton(
                        onPressed: () {
                          AppDialogbox().showDialog(
                            titleText: 'Logout',
                            contentText: 'Do you want to continue?',
                            onContinue: () async {
                              await SecuredStorage.clearSecureStorage();
                              Get.offAllNamed(AppRoutes.loginView, parameters: {'loginRole': 'Owner'});
                            },
                            onCancel: () => Get.back(),
                          );
                        },
                        icon: Icon(Icons.logout, color: Colors.white, size: 22),
                      ),
                      IconButton(
                        onPressed: () {
                          final web.Element? doc = web.document.documentElement;
                          if (web.document.fullscreenElement != null) {
                            web.document.exitFullscreen();
                          } else {
                            doc?.requestFullscreen();
                          }
                        },
                        icon: Icon(Icons.fullscreen, color: Colors.white, size: 22),
                      ),
                    ],
                  ),
                ),
                SizedBox(height: 10),
              ],
            ),
          ),
        );
      },
    );
  }
}

/// A Sidebar Item Widget that dynamically highlights the selected route.
class SidebarItem extends StatelessWidget {
  final IconData icon;
  final String label;
  final String route;

  const SidebarItem({
    required this.icon,
    required this.label,
    required this.route,
    super.key, // ✅ Fix: Added super.key for proper widget construction
  });

  @override
  Widget build(BuildContext context) {
    bool isSelected = Get.currentRoute == route; // ✅ Fix: Correctly determines selected item

    return Padding(
      padding: EdgeInsets.symmetric(horizontal: 8, vertical: 5),
      child: InkWell(
        borderRadius: BorderRadius.circular(10),
        onTap: () {
          Get.toNamed(route); // ✅ Fix: Correctly navigates on tap
        },
        child: AnimatedContainer(
          duration: Duration(milliseconds: 300),
          padding: EdgeInsets.symmetric(horizontal: 12, vertical: 12),
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(10),
            color: isSelected ? Colors.white.withOpacity(0.1) : Colors.transparent,
          ),
          child: Row(
            children: [
              SizedBox(
                width: 22,
                child: Icon(icon, color: isSelected ? AppColors.expBlue5 : Colors.white, size: 22),
              ),
              SizedBox(width: 12), // ✅ Fix: Ensures consistent spacing
              Expanded(
                child: AnimatedOpacity(
                  duration: Duration(milliseconds: 300),
                  opacity: 1.0,
                  child: Text(
                    label, // ✅ Fix: Used correct lowercase `label` instead of `Label`
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                    style: TextStyle(
                      color: Colors.white, // ✅ Fix: Ensures all text stays white
                      fontSize: 16,
                      fontWeight: FontWeight.w300,
                      fontFamily: AppFonts.montserratRegular,
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
10/03/25, 7:16 am - Shivam Gurjar: bool isSidebarExpanded = false;
  bool isTextVisible = true;
  bool isSidebarManuallyToggled = false; // ✅ New Flag for Manual Toggle
  bool isMouseInsideSidebar = false; // ✅ Tracks hover state
  String selectedRoute = AppRoutes.ownerDashboard;

  /// ✅ Expand Sidebar (Hover)
  void expandSidebar() {
    if (!isSidebarManuallyToggled) {
      // Prevent hover expand if manually toggled
      isSidebarExpanded = true;
      isTextVisible = true;
      update();
    }
  }

  /// ✅ Collapse Sidebar (Hover)
  void collapseSidebar() {
    if (!isSidebarManuallyToggled && !isMouseInsideSidebar) {
      // Prevent if manually toggled
      isTextVisible = false;
      update();
      Future.delayed(Duration(milliseconds: 400), () {
        if (!isMouseInsideSidebar && !isSidebarManuallyToggled) {
          isSidebarExpanded = false;
          isTextVisible = true;
          update();
        }
      });
    }
  }

  /// ✅ Toggle Sidebar Manually (For Tablets)
  void toggleSidebarManually() {
    isSidebarManuallyToggled = !isSidebarManuallyToggled;
    isSidebarExpanded = isSidebarManuallyToggled;
    isTextVisible = isSidebarManuallyToggled;
    update();
  }

  /// ✅ Track Mouse Enter/Exit
  void setMouseInside(bool isInside) {
    isMouseInsideSidebar = isInside;
    if (!isInside) {
      Future.delayed(Duration(milliseconds: 400), () {
        collapseSidebar(); // Collapse only after delay if needed
      });
    }
  }

  /// ✅ Select Route and Keep Sidebar Expanded
  void selectRoute(String route) {
    selectedRoute = route;
    isSidebarExpanded = true;
    update();
  }
12/03/25, 8:00 pm - Shivam Gurjar: how does writing help with improving you thinking  ability if it is does all <This message was edited>
12/03/25, 8:10 pm - Shivam Gurjar: thinking is a  process that need to be separated from the self and soon as you begin to write the  idea becomes of the paper more than it is  of you. when you are able to  look at your idea very much , like i am  able to look at this shaker or i am able to look at  the screen or watever, you  acquire what is  called objectivity and you know the psychological cost  of not being true to an idea or being very biased in your way of thinking or being lazy in you  way of thinking is eventually invites issues like anxiety and depression and you wont believe how that works but this is  exactly how it works  because  you lie to yourself an d then what happens is your psychological conception of reality becomes very divorced from your actual reality  and then actual reality  behaves a certain way and you don't have a mental model for  why that is happening
13/03/25, 8:07 am - Shivam Gurjar: Every interaction is an equation  and when the variables shift so does the outcome ihave observed not just reacted and in that observation i have come to understand that some things are not decided they simply unfold Thought when separated from self, becomes an instrument of clarity one that does not entertain illusions only patterns and the pattern here is clear.

The problem was never you. The problem is me—me, choosing to see things as they are rather than as they are presented. There is a weight to knowing, a gravity that pulls at every word unsaid. If I step back into conversations, the truth that rests in silence will demand to be spoken, and the cost of that is not one I am willing to pay. Some things, once unearthed, do not return to the ground quietly. I am not avoiding, nor forgetting—I am simply choosing what must remain unspoken.

I hope after this, you don’t need an explanation. <This message was edited>
13/03/25, 8:31 pm - Shivam Gurjar: https://www.muhammadaamirmalik.com/
13/03/25, 8:32 pm - Shivam Gurjar: https://github.com/emmabostian/developer-portfolios?tab=readme-ov-file
14/03/25, 4:26 am - Shivam Gurjar: system design
14/03/25, 4:26 am - Shivam Gurjar: aws cloud
14/03/25, 4:27 am - Shivam Gurjar: dsa
14/03/25, 4:27 am - Shivam Gurjar: projects
14/03/25, 6:56 pm - Shivam Gurjar: what position should you to start  dating as a man?
when I was growing up my mom always told me if you are not in a position to go on a date and pay for the bill, you are not in a position to date, as a man you need to make yourself string first and once you are strong then you can take care of the people around you , if you are in a position you are not solid then what right do you have to bring a another partner into your world an try to lead and stear the ship for the both of you when you are don't even fucking know what direction you are going into, so for me make yourself strong , and then you can be a good partner
15/03/25, 7:21 pm - Shivam Gurjar: http://localhost:50182/#/OwnerMenu
15/03/25, 7:23 pm - Shivam Gurjar: if (wdth < 600) {
                                                                                  showBottomSheet(
                                                                                      context: context,
                                                                                      builder: (context) {
                                                                                        return Container(
                                                                                          height: 200,
                                                                                          width: 700,
                                                                                          child: Column(
                                                                                            children: [
                                                                                              GestureDetector(
                                                                                                  onTap: () => {Get.back()},
                                                                                                  child: Icon(Icons.back_hand)),
                                                                                              Text("i am here"),
                                                                                            ],
                                                                                          ),
                                                                                        );
                                                                                      });
                                                                                }
15/03/25, 7:23 pm - Shivam Gurjar: wdth > 600
                              ? Expanded(
                                  flex: 2,
                                  child: c.isGroupEditMode == false
                                      //C2 ITEM EDIT MODE
                                      ? C2ItemEditMode()
                                      //GROUP EDIT MODE
                                      : C2GroupEditMode())
                              : Container()
15/03/25, 9:35 pm - Shivam Gurjar: <Media omitted>
15/03/25, 9:35 pm - Shivam Gurjar: <Media omitted>
15/03/25, 9:36 pm - Shivam Gurjar: <Media omitted>
15/03/25, 9:36 pm - Shivam Gurjar: <Media omitted>
16/03/25, 3:38 am - Shivam Gurjar: a man with his purpose dosent have all to give his girl
he is building , grinding, and securing his future
16/03/25, 3:39 am - Shivam Gurjar: don't let jobless people make you think that your men doesn't care for you
16/03/25, 3:39 am - Shivam Gurjar: a real man show lover through action , not constant attention
17/03/25, 2:47 am - Shivam Gurjar: <Media omitted>
19/03/25, 5:04 am - Shivam Gurjar: <Media omitted>
19/03/25, 9:50 pm - Shivam Gurjar: <Media omitted>
19/03/25, 9:50 pm - Shivam Gurjar: <Media omitted>
19/03/25, 9:50 pm - Shivam Gurjar: <Media omitted>
19/03/25, 9:50 pm - Shivam Gurjar: <Media omitted>
22/03/25, 8:14 pm - Shivam Gurjar: <Media omitted>
24/03/25, 5:02 pm - Shivam Gurjar: Overview
24/03/25, 5:05 pm - Shivam Gurjar: Both buttons fix at top
24/03/25, 5:06 pm - Shivam Gurjar: Daily sales background color
24/03/25, 5:06 pm - Shivam Gurjar: Bottom sheet background black
24/03/25, 10:39 pm - Shivam Gurjar: 28mfr7UtTzNuG5p6noQfKT
24/03/25, 10:41 pm - Shivam Gurjar: <Media omitted>
28/03/25, 7:54 pm - Shivam Gurjar: <Media omitted>
28/03/25, 7:58 pm - Shivam Gurjar: <Media omitted>
28/03/25, 9:05 pm - Shivam Gurjar: sir changes
29/03/25, 2:06 pm - Shivam Gurjar: <Media omitted>
30/03/25, 8:56 pm - Shivam Gurjar: <Media omitted>
30/03/25, 8:56 pm - Shivam Gurjar: <Media omitted>
30/03/25, 8:56 pm - Shivam Gurjar: <Media omitted>
31/03/25, 12:18 am - Shivam Gurjar: <Media omitted>
31/03/25, 8:56 am - Shivam Gurjar: https://chatgpt.com/share/67ea0b74-73c4-8000-9197-e534fb10cbd4
03/04/25, 2:21 pm - Shivam Gurjar: NN: tools
2-3 lines
how we can download
03/04/25, 2:21 pm - Shivam Gurjar: What can we do with it
03/04/25, 2:25 pm - Shivam Gurjar: https://1drv.ms/w/c/e71c4317e5f1ddc8/EelE4ULupbtEt-rea6QP6JMBDFYnDGhxq1tMlv3UL4Pc1g?e=R3K4iw
04/04/25, 4:42 am - Shivam Gurjar: <Media omitted>
04/04/25, 4:44 am - Shivam Gurjar: <Media omitted>
04/04/25, 4:46 am - Shivam Gurjar: <Media omitted>
05/04/25, 2:46 pm - Shivam Gurjar: <Media omitted>
08/04/25, 9:11 am - Shivam Gurjar: https://chatgpt.com/share/67f49ad6-3aec-8004-aa09-3ad33c11d2d1
08/04/25, 12:39 pm - Shivam Gurjar: Buyer ko dikhna wala trigger point
08/04/25, 12:39 pm - Shivam Gurjar: Bestseller tag
08/04/25, 12:40 pm - Shivam Gurjar: Trigger set by farmer sepper
08/04/25, 12:43 pm - Shivam Gurjar: Kissan billing task
08/04/25, 12:43 pm - Shivam Gurjar: Desk
08/04/25, 12:43 pm - Shivam Gurjar: Quantity sell daily data
08/04/25, 12:43 pm - Shivam Gurjar: Quantity - according to sell
10/04/25, 8:03 am - Shivam Gurjar: <Media omitted>
10/04/25, 8:21 am - Shivam Gurjar: You deleted this message
10/04/25, 8:21 am - Shivam Gurjar: <Media omitted>
11/04/25, 1:30 pm - Shivam Gurjar: mongodb+srv://akshatnamdev23:itihhub073032@4itihashub.7rmxj5o.mongodb.net/?retryWrites=true&w=majority&appName=itihashub
11/04/25, 1:30 pm - Shivam Gurjar: Ob3lGeCufMAZCixl
11/04/25, 2:08 pm - Shivam Gurjar: getaddrinfo ENOTFOUND ac-ivvurav-shard-00-00.ecblohy.mongodb.net while connecting this comung
12/04/25, 8:45 am - Shivam Gurjar: प्याज़
12/04/25, 8:46 am - Shivam Gurjar: ताज़े और गुणवत्ता वाले प्याज़ सीधे किसान से खरीदे। यह प्याज़ स्वादिष्ट व्यंजन बनाने के लिए बिल्कुल उपयुक्त हैं। कीमत 1 किलो के लिए दर्शाई गई है।"
12/04/25, 8:47 am - Shivam Gurjar: "हम आपके लिए लाए हैं खेतों से सीधे ताज़े और स्वास्थ्यवर्धक प्याज़, जो हर रसोई की ज़रूरत हैं। इन प्याज़ों को प्राकृतिक तरीकों से उगाया गया है, जिसमें किसी भी तरह के हानिकारक रसायनों का उपयोग नहीं किया गया है। यह प्याज़ मध्यम से बड़े आकार के हैं, छिलने में आसान और स्वाद में तीखेपन के साथ भरपूर हैं। सब्ज़ियों, पराठों, सलाद या किसी भी व्यंजन को स्वादिष्ट बनाने के लिए ये प्याज़ एकदम उपयुक्त हैं।

हमारा उद्देश्य है कि किसान को उसका उचित मूल्य मिले और उपभोक्ता को ताज़ा उत्पाद सीधा खेत से। इसलिए हम आपको उचित दाम में 100% ताज़ा प्याज़ प्रदान करते हैं। दिए गए मूल्य 1 किलो के लिए हैं। अधिक मात्रा में खरीद पर विशेष छूट भी उपलब्ध है। अभी ऑर्डर करें और ताज़गी का अनुभव लें!"
12/04/25, 4:00 pm - Shivam Gurjar: <Media omitted>
14/04/25, 2:53 pm - Shivam Gurjar: http://192.168.56.1:8080
20/04/25, 7:27 pm - Shivam Gurjar: <Media omitted>
21/04/25, 3:23 pm - Shivam Gurjar: 87KV6KTGUJCE7JMF6YKXPKGV
Twilio
23/04/25, 8:34 am - Shivam Gurjar: <Media omitted>
23/04/25, 8:34 am - Shivam Gurjar: <Media omitted>
23/04/25, 11:17 pm - Shivam Gurjar: <Media omitted>
28/04/25, 6:13 pm - Shivam Gurjar: https://devdailyactivity.netlify.app/
28/04/25, 10:23 pm - Shivam Gurjar: <Media omitted>
28/04/25, 11:31 pm - Shivam Gurjar: <Media omitted>
30/04/25, 7:11 am - Shivam Gurjar: <Media omitted>
30/04/25, 3:44 pm - Shivam Gurjar: Role of osint forensic
30/04/25, 3:45 pm - Shivam Gurjar: Content - pdf
30/04/25, 3:48 pm - Shivam Gurjar: 10th
30/04/25, 3:48 pm - Shivam Gurjar: Chapter 7
30/04/25, 3:50 pm - Shivam Gurjar: 9th exp  page 13 prob 1 and prob 2
01/05/25, 2:10 pm - Shivam Gurjar: https://chatgpt.com/share/68133378-aa38-8000-9713-3409924ef7e4
02/05/25, 1:06 pm - Shivam Gurjar: 238
02/05/25, 1:07 pm - Shivam Gurjar: 239
09/05/25, 3:39 pm - Shivam Gurjar: https://github.com/SHIVAMGURJAR0000
09/05/25, 3:41 pm - Shivam Gurjar: www.linkedin.com/in/
shivam-gurjar-dev
09/05/25, 3:42 pm - Shivam Gurjar: https://www.linkedin.com/in/shivam-gurjar-dev/
10/05/25, 4:05 pm - Shivam Gurjar: <Media omitted>
10/05/25, 4:05 pm - Shivam Gurjar: <Media omitted>
10/05/25, 8:20 pm - Shivam Gurjar: https://apicheckerfortest.netlify.app/
11/05/25, 4:55 pm - Shivam Gurjar: https://bfhldevapigw.healthrx.co.in/wp-cms/v1/posts/
11/05/25, 4:56 pm - Shivam Gurjar: https://hiring.bajajfinservhealth.in/api/iWasCalled
15/05/25, 2:19 pm - Shivam Gurjar: <Media omitted>
15/05/25, 9:45 pm - Shivam Gurjar: Hi Yashika, Shivam this side
15/05/25, 9:47 pm - Shivam Gurjar: Jab  free ho jaaye tab HTML assignment bhej dena please.
15/05/25, 9:48 pm - Shivam Gurjar: Hey Yashika, Shivam this side
Jab tu free ho jaaye tab HTML assignment bhej dena please
17/05/25, 3:09 pm - Shivam Gurjar: 1)  Looks, Healthy, Confidence
17/05/25, 3:10 pm - Shivam Gurjar: 2)  Any Game
17/05/25, 3:10 pm - Shivam Gurjar: 2) skill matter more
17/05/25, 3:11 pm - Shivam Gurjar: 3) No Excuses - don't cheat yourself
17/05/25, 3:13 pm - Shivam Gurjar: Take ownership of you life and stop excuses
17/05/25, 3:13 pm - Shivam Gurjar: 4) 20's is not for finding love , its for finding yourself
17/05/25, 3:14 pm - Shivam Gurjar: 5)  invest yourself
17/05/25, 3:17 pm - Shivam Gurjar: 6) left overthinking and take action
17/05/25, 3:18 pm - Shivam Gurjar: 7) choose wisely
17/05/25, 6:17 pm - Shivam Gurjar: <Media omitted>
17/05/25, 6:17 pm - Shivam Gurjar: <Media omitted>
17/05/25, 6:19 pm - Shivam Gurjar: <Media omitted>
19/05/25, 9:16 am - Shivam Gurjar: <Media omitted>
19/05/25, 9:19 pm - Shivam Gurjar: <Media omitted>
25/05/25, 9:05 pm - Shivam Gurjar: claude api integration
25/05/25, 10:30 pm - Shivam Gurjar: <Media omitted>
28/05/25, 8:59 pm - Shivam Gurjar: koi achi series suggest kar dekhne ke liye
03/06/25, 8:02 pm - Shivam Gurjar: mobile view login logo change
04/06/25, 1:38 pm - Shivam Gurjar: // import 'package:collapsible_sidebar/collapsible_sidebar.dart';
// import 'package:flutter/material.dart';
// import 'package:get/get.dart';
// import 'package:web/web.dart' as web;
// import 'package:restaurent_app/modules/owner/owner_vm.dart';
// import 'package:restaurent_app/resources/app_colors.dart';
// import 'package:restaurent_app/resources/app_fonts.dart';
// import 'package:restaurent_app/resources/app_images.dart';
// import 'package:restaurent_app/resources/app_routes.dart';
// import 'package:restaurent_app/utils/securedStorage.dart';
// import 'package:restaurent_app/utils/widgets/app_dialogbox.dart';

class OwnerCollapsibleSidebar extends StatelessWidget {
  final bool isDashboard;
  final bool isOrders;
  final bool isMenu;
  final bool isFaq;
  final bool isKitchens;

  OwnerCollapsibleSidebar({
    this.isDashboard = false,
    this.isOrders = false,
    this.isFaq = false,
    this.isMenu = false,
    this.isKitchens = false,
    super.key,
  });

  @override
  Widget build(BuildContext context) {
    final screenWidth = MediaQuery.of(context).size.width;

    // Define responsive sidebar widths
    double minSidebarWidth = screenWidth < 600
        ? 60
        : screenWidth < 900
            ? 70
            : 90;

    double maxSidebarWidth = screenWidth < 600
        ? 180
        : screenWidth < 900
            ? 200
            : 250;

    return GetBuilder<OwnerVM>(
      builder: (c) {
        return Stack(
          children: [
            MouseRegion(
              onEnter: (event) {
                if (screenWidth > 600) {
                  c.isCollapsed = false;
                  c.update();
                }
              },
              onExit: (event) {
                if (screenWidth > 600) {
                  c.isCollapsed = true;
                  c.update();
                }
              },
              child: GestureDetector(
                onTap: () {
                  c.isCollapsed = !c.isCollapsed;
                  c.update();
                },
                child: AnimatedContainer(
                  duration: Duration(milliseconds: 300),
                  width: c.isCollapsed ? minSidebarWidth : maxSidebarWidth,
                  child: CollapsibleSidebar(
                    title: 'weQRed',
                    showTitle: true,
                    avatarImg: AssetImage(AppImages.weQRedLogo),
                    avatarBackgroundColor: AppColors.black,
                    screenPadding: 0,
                    borderRadius: 0,
                    showToggleButton: false,
                    topPadding: 80,
                    isCollapsed: c.isCollapsed,
                    iconSize: 24,
                    minWidth: minSidebarWidth,
                    maxWidth: maxSidebarWidth,
                    backgroundColor: AppColors.black,
                    selectedIconColor: AppColors.expBlue5,
                    customItemOffsetX: 16,
                    duration: Duration(milliseconds: 300),
                    sidebarBoxShadow: [
                      BoxShadow(
                        color: AppColors.boxShadow,
                        offset: Offset(4, 0),
                        spreadRadius: 0.01,
                        blurRadius: 10,
                      ),
                    ],
                    titleStyle: TextStyle(
                      fontSize: 22,
                      fontFamily: AppFonts.poiretOneRegular,
                    ),
                    textStyle: TextStyle(
                      fontSize: 14,
                      fontFamily: AppFonts.montserratRegular,
                    ),
                    items: [
                      CollapsibleItem(
                        text: 'Dashboard',
                        icon: Icons.dashboard,
                        onPressed: () {
                          Get.toNamed(AppRoutes.ownerDashboard);
                        },
                        isSelected: isDashboard,
                      ),
                      CollapsibleItem(
                        text: 'Orders',
                        icon: Icons.list,
                        onPressed: () {
                          Get.toNamed(AppRoutes.ownerOrders);
                        },
                        isSelected: isOrders,
                      ),
                      CollapsibleItem(
                        text: 'Stations',
                        icon: Icons.food_bank_outlined,
                        onPressed: () {
                          Get.toNamed(AppRoutes.ownerKitchens);
                        },
                        isSelected: isKitchens,
                      ),
                      CollapsibleItem(
                        text: 'Menu',
                        icon: Icons.fastfood_outlined,
                        onPressed: () {
                          Get.toNamed(AppRoutes.ownerMenu);
                        },
                        isSelected: isMenu,
                      ),
                      CollapsibleItem(
                        text: 'FAQ',
                        icon: Icons.format_quote,
                        onPressed: () {
                          Get.toNamed(AppRoutes.ownerFAQ);
                        },
                        isSelected: isFaq,
                      ),
                    ],
                    body: Container(),
                  ),
                ),
              ),
            ),
            Align(
              alignment: Alignment.bottomCenter,
              child: Padding(
                padding: const EdgeInsets.only(left: 16.0),
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    IconButton(
                      onPressed: () {
                        AppDialogbox().showDialog(
                          context: context,
                          titleText: 'Logout',
                          contentText: 'Do you want to continue?',
                          onContinue: () async {
                            await SecuredStorage.clearSecureStorage();
                            Get.offAllNamed(
                              AppRoutes.loginView,
                              parameters: {'loginRole': 'Owner'},
                            );
                          },
                          onCancel: () {
                            Get.back();
                          },
                        );
                      },
                      icon: Icon(
                        Icons.logout,
                        color: AppColors.white,
                        size: 20,
                      ),
                    ),
                    IconButton(
                      onPressed: () {
                        final web.Element? doc = web.document.documentElement;
                        if (web.document.fullscreenElement != null) {
                          web.document.exitFullscreen();
                        } else {
                          doc?.requestFullscreen();
                        }
                      },
                      icon: Icon(
                        Icons.fullscreen,
                        color: AppColors.white,
                        size: 20,
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ],
        );
      },
    );
  }
}
05/06/25, 1:54 am - Shivam Gurjar: <Media omitted>
05/06/25, 2:15 am - Shivam Gurjar: <Media omitted>
05/06/25, 4:39 am - Shivam Gurjar: <Media omitted>
07/06/25, 9:01 pm - Shivam Gurjar: logout fullscreen icon
07/06/25, 9:01 pm - Shivam Gurjar: name
07/06/25, 9:01 pm - Shivam Gurjar: icon size change order
07/06/25, 9:02 pm - Shivam Gurjar: button size
07/06/25, 9:03 pm - Shivam Gurjar: dashboard size three dot icon
07/06/25, 9:05 pm - Shivam Gurjar: menu vertical line
07/06/25, 9:06 pm - Shivam Gurjar: first switch to branch
07/06/25, 9:22 pm - Shivam Gurjar: changes check at development
07/06/25, 10:06 pm - Shivam Gurjar: order merge problem
07/06/25, 10:06 pm - Shivam Gurjar: minor ui changes correct\
07/06/25, 11:34 pm - Shivam Gurjar: problems:
1) merge problem in owner collapsible side bar in which when order complete -> abnormal behavior
2) when cancel table then 2 order come form the same name. when refresh then become normal
07/06/25, 11:34 pm - Shivam Gurjar: 3) tablet order card problem with testing. <This message was edited>
08/06/25, 3:21 pm - Shivam Gurjar: order tablet complete done
order tablet cancel done
order tablet cancel all done <This message was edited>
08/06/25, 3:26 pm - Shivam Gurjar: order mobile complete done
08/06/25, 3:26 pm - Shivam Gurjar: order mobile cancel done
08/06/25, 3:28 pm - Shivam Gurjar: order mobile cancel all done
